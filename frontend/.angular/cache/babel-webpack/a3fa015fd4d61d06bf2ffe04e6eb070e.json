{"ast":null,"code":"var createjs = this.createjs = this.createjs || {};\n/*!\n* CreateJS\n* Visit http://createjs.com/ for documentation, updates and examples.\n*\n* Copyright (c) 2010 gskinner.com, inc.\n*\n* Permission is hereby granted, free of charge, to any person\n* obtaining a copy of this software and associated documentation\n* files (the \"Software\"), to deal in the Software without\n* restriction, including without limitation the rights to use,\n* copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the\n* Software is furnished to do so, subject to the following\n* conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n* OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nthis.createjs = this.createjs || {}; //##############################################################################\n// extend.js\n//##############################################################################\n\n/**\n * @class Utility Methods\n */\n\n/**\n * Sets up the prototype chain and constructor property for a new class.\n *\n * This should be called right after creating the class constructor.\n *\n * \tfunction MySubClass() {}\n * \tcreatejs.extend(MySubClass, MySuperClass);\n * \tMySubClass.prototype.doSomething = function() { }\n *\n * \tvar foo = new MySubClass();\n * \tconsole.log(foo instanceof MySuperClass); // true\n * \tconsole.log(foo.prototype.constructor === MySubClass); // true\n *\n * @method extend\n * @param {Function} subclass The subclass.\n * @param {Function} superclass The superclass to extend.\n * @return {Function} Returns the subclass's new prototype.\n */\n\ncreatejs.extend = function (subclass, superclass) {\n  \"use strict\";\n\n  function o() {\n    this.constructor = subclass;\n  }\n\n  o.prototype = superclass.prototype;\n  return subclass.prototype = new o();\n}; //##############################################################################\n// promote.js\n//##############################################################################\n\n/**\n * @class Utility Methods\n */\n\n/**\n * Promotes any methods on the super class that were overridden, by creating an alias in the format `prefix_methodName`.\n * It is recommended to use the super class's name as the prefix.\n * An alias to the super class's constructor is always added in the format `prefix_constructor`.\n * This allows the subclass to call super class methods without using `function.call`, providing better performance.\n *\n * For example, if `MySubClass` extends `MySuperClass`, and both define a `draw` method, then calling `promote(MySubClass, \"MySuperClass\")`\n * would add a `MySuperClass_constructor` method to MySubClass and promote the `draw` method on `MySuperClass` to the\n * prototype of `MySubClass` as `MySuperClass_draw`.\n *\n * This should be called after the class's prototype is fully defined.\n *\n * \tfunction ClassA(name) {\n * \t\tthis.name = name;\n * \t}\n * \tClassA.prototype.greet = function() {\n * \t\treturn \"Hello \"+this.name;\n * \t}\n *\n * \tfunction ClassB(name, punctuation) {\n * \t\tthis.ClassA_constructor(name);\n * \t\tthis.punctuation = punctuation;\n * \t}\n * \tcreatejs.extend(ClassB, ClassA);\n * \tClassB.prototype.greet = function() {\n * \t\treturn this.ClassA_greet()+this.punctuation;\n * \t}\n * \tcreatejs.promote(ClassB, \"ClassA\");\n *\n * \tvar foo = new ClassB(\"World\", \"!?!\");\n * \tconsole.log(foo.greet()); // Hello World!?!\n *\n * @method promote\n * @param {Function} subclass The class to promote super class methods on.\n * @param {String} prefix The prefix to add to the promoted method names. Usually the name of the superclass.\n * @return {Function} Returns the subclass.\n */\n\n\ncreatejs.promote = function (subclass, prefix) {\n  \"use strict\";\n\n  var subP = subclass.prototype,\n      supP = Object.getPrototypeOf && Object.getPrototypeOf(subP) || subP.__proto__;\n\n  if (supP) {\n    subP[(prefix += \"_\") + \"constructor\"] = supP.constructor; // constructor is not always innumerable\n\n    for (var n in supP) {\n      if (subP.hasOwnProperty(n) && typeof supP[n] == \"function\") {\n        subP[prefix + n] = supP[n];\n      }\n    }\n  }\n\n  return subclass;\n}; //##############################################################################\n// indexOf.js\n//##############################################################################\n\n/**\n * @class Utility Methods\n */\n\n/**\n * Finds the first occurrence of a specified value searchElement in the passed in array, and returns the index of\n * that value.  Returns -1 if value is not found.\n *\n *      var i = createjs.indexOf(myArray, myElementToFind);\n *\n * @method indexOf\n * @param {Array} array Array to search for searchElement\n * @param searchElement Element to find in array.\n * @return {Number} The first index of searchElement in array.\n */\n\n\ncreatejs.indexOf = function (array, searchElement) {\n  \"use strict\";\n\n  for (var i = 0, l = array.length; i < l; i++) {\n    if (searchElement === array[i]) {\n      return i;\n    }\n  }\n\n  return -1;\n}; //##############################################################################\n// Event.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor:\n\n  /**\n   * Contains properties and methods shared by all events for use with\n   * {{#crossLink \"EventDispatcher\"}}{{/crossLink}}.\n   * \n   * Note that Event objects are often reused, so you should never\n   * rely on an event object's state outside of the call stack it was received in.\n   * @class Event\n   * @param {String} type The event type.\n   * @param {Boolean} bubbles Indicates whether the event will bubble through the display list.\n   * @param {Boolean} cancelable Indicates whether the default behaviour of this event can be cancelled.\n   * @constructor\n   **/\n\n  function Event(type, bubbles, cancelable) {\n    // public properties:\n\n    /**\n     * The type of event.\n     * @property type\n     * @type String\n     **/\n    this.type = type;\n    /**\n     * The object that generated an event.\n     * @property target\n     * @type Object\n     * @default null\n     * @readonly\n    */\n\n    this.target = null;\n    /**\n     * The current target that a bubbling event is being dispatched from. For non-bubbling events, this will\n     * always be the same as target. For example, if childObj.parent = parentObj, and a bubbling event\n     * is generated from childObj, then a listener on parentObj would receive the event with\n     * target=childObj (the original target) and currentTarget=parentObj (where the listener was added).\n     * @property currentTarget\n     * @type Object\n     * @default null\n     * @readonly\n    */\n\n    this.currentTarget = null;\n    /**\n     * For bubbling events, this indicates the current event phase:<OL>\n     * \t<LI> capture phase: starting from the top parent to the target</LI>\n     * \t<LI> at target phase: currently being dispatched from the target</LI>\n     * \t<LI> bubbling phase: from the target to the top parent</LI>\n     * </OL>\n     * @property eventPhase\n     * @type Number\n     * @default 0\n     * @readonly\n    */\n\n    this.eventPhase = 0;\n    /**\n     * Indicates whether the event will bubble through the display list.\n     * @property bubbles\n     * @type Boolean\n     * @default false\n     * @readonly\n    */\n\n    this.bubbles = !!bubbles;\n    /**\n     * Indicates whether the default behaviour of this event can be cancelled via\n     * {{#crossLink \"Event/preventDefault\"}}{{/crossLink}}. This is set via the Event constructor.\n     * @property cancelable\n     * @type Boolean\n     * @default false\n     * @readonly\n    */\n\n    this.cancelable = !!cancelable;\n    /**\n     * The epoch time at which this event was created.\n     * @property timeStamp\n     * @type Number\n     * @default 0\n     * @readonly\n    */\n\n    this.timeStamp = new Date().getTime();\n    /**\n     * Indicates if {{#crossLink \"Event/preventDefault\"}}{{/crossLink}} has been called\n     * on this event.\n     * @property defaultPrevented\n     * @type Boolean\n     * @default false\n     * @readonly\n    */\n\n    this.defaultPrevented = false;\n    /**\n     * Indicates if {{#crossLink \"Event/stopPropagation\"}}{{/crossLink}} or\n     * {{#crossLink \"Event/stopImmediatePropagation\"}}{{/crossLink}} has been called on this event.\n     * @property propagationStopped\n     * @type Boolean\n     * @default false\n     * @readonly\n    */\n\n    this.propagationStopped = false;\n    /**\n     * Indicates if {{#crossLink \"Event/stopImmediatePropagation\"}}{{/crossLink}} has been called\n     * on this event.\n     * @property immediatePropagationStopped\n     * @type Boolean\n     * @default false\n     * @readonly\n    */\n\n    this.immediatePropagationStopped = false;\n    /**\n     * Indicates if {{#crossLink \"Event/remove\"}}{{/crossLink}} has been called on this event.\n     * @property removed\n     * @type Boolean\n     * @default false\n     * @readonly\n    */\n\n    this.removed = false;\n  }\n\n  var p = Event.prototype;\n  /**\n   * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n   * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n   * for details.\n   *\n   * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n   *\n   * @method initialize\n   * @protected\n   * @deprecated\n   */\n  // p.initialize = function() {}; // searchable for devs wondering where it is.\n  // public methods:\n\n  /**\n   * Sets {{#crossLink \"Event/defaultPrevented\"}}{{/crossLink}} to true if the event is cancelable.\n   * Mirrors the DOM level 2 event standard. In general, cancelable events that have `preventDefault()` called will\n   * cancel the default behaviour associated with the event.\n   * @method preventDefault\n   **/\n\n  p.preventDefault = function () {\n    this.defaultPrevented = this.cancelable && true;\n  };\n  /**\n   * Sets {{#crossLink \"Event/propagationStopped\"}}{{/crossLink}} to true.\n   * Mirrors the DOM event standard.\n   * @method stopPropagation\n   **/\n\n\n  p.stopPropagation = function () {\n    this.propagationStopped = true;\n  };\n  /**\n   * Sets {{#crossLink \"Event/propagationStopped\"}}{{/crossLink}} and\n   * {{#crossLink \"Event/immediatePropagationStopped\"}}{{/crossLink}} to true.\n   * Mirrors the DOM event standard.\n   * @method stopImmediatePropagation\n   **/\n\n\n  p.stopImmediatePropagation = function () {\n    this.immediatePropagationStopped = this.propagationStopped = true;\n  };\n  /**\n   * Causes the active listener to be removed via removeEventListener();\n   * \n   * \t\tmyBtn.addEventListener(\"click\", function(evt) {\n   * \t\t\t// do stuff...\n   * \t\t\tevt.remove(); // removes this listener.\n   * \t\t});\n   * \n   * @method remove\n   **/\n\n\n  p.remove = function () {\n    this.removed = true;\n  };\n  /**\n   * Returns a clone of the Event instance.\n   * @method clone\n   * @return {Event} a clone of the Event instance.\n   **/\n\n\n  p.clone = function () {\n    return new Event(this.type, this.bubbles, this.cancelable);\n  };\n  /**\n   * Provides a chainable shortcut method for setting a number of properties on the instance.\n   *\n   * @method set\n   * @param {Object} props A generic object containing properties to copy to the instance.\n   * @return {Event} Returns the instance the method is called on (useful for chaining calls.)\n   * @chainable\n  */\n\n\n  p.set = function (props) {\n    for (var n in props) {\n      this[n] = props[n];\n    }\n\n    return this;\n  };\n  /**\n   * Returns a string representation of this object.\n   * @method toString\n   * @return {String} a string representation of the instance.\n   **/\n\n\n  p.toString = function () {\n    return \"[Event (type=\" + this.type + \")]\";\n  };\n\n  createjs.Event = Event;\n})(); //##############################################################################\n// EventDispatcher.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor:\n\n  /**\n   * EventDispatcher provides methods for managing queues of event listeners and dispatching events.\n   *\n   * You can either extend EventDispatcher or mix its methods into an existing prototype or instance by using the\n   * EventDispatcher {{#crossLink \"EventDispatcher/initialize\"}}{{/crossLink}} method.\n   * \n   * Together with the CreateJS Event class, EventDispatcher provides an extended event model that is based on the\n   * DOM Level 2 event model, including addEventListener, removeEventListener, and dispatchEvent. It supports\n   * bubbling / capture, preventDefault, stopPropagation, stopImmediatePropagation, and handleEvent.\n   * \n   * EventDispatcher also exposes a {{#crossLink \"EventDispatcher/on\"}}{{/crossLink}} method, which makes it easier\n   * to create scoped listeners, listeners that only run once, and listeners with associated arbitrary data. The \n   * {{#crossLink \"EventDispatcher/off\"}}{{/crossLink}} method is merely an alias to\n   * {{#crossLink \"EventDispatcher/removeEventListener\"}}{{/crossLink}}.\n   * \n   * Another addition to the DOM Level 2 model is the {{#crossLink \"EventDispatcher/removeAllEventListeners\"}}{{/crossLink}}\n   * method, which can be used to listeners for all events, or listeners for a specific event. The Event object also \n   * includes a {{#crossLink \"Event/remove\"}}{{/crossLink}} method which removes the active listener.\n   *\n   * <h4>Example</h4>\n   * Add EventDispatcher capabilities to the \"MyClass\" class.\n   *\n   *      EventDispatcher.initialize(MyClass.prototype);\n   *\n   * Add an event (see {{#crossLink \"EventDispatcher/addEventListener\"}}{{/crossLink}}).\n   *\n   *      instance.addEventListener(\"eventName\", handlerMethod);\n   *      function handlerMethod(event) {\n   *          console.log(event.target + \" Was Clicked\");\n   *      }\n   *\n   * <b>Maintaining proper scope</b><br />\n   * Scope (ie. \"this\") can be be a challenge with events. Using the {{#crossLink \"EventDispatcher/on\"}}{{/crossLink}}\n   * method to subscribe to events simplifies this.\n   *\n   *      instance.addEventListener(\"click\", function(event) {\n   *          console.log(instance == this); // false, scope is ambiguous.\n   *      });\n   *      \n   *      instance.on(\"click\", function(event) {\n   *          console.log(instance == this); // true, \"on\" uses dispatcher scope by default.\n   *      });\n   * \n   * If you want to use addEventListener instead, you may want to use function.bind() or a similar proxy to manage\n   * scope.\n   *\n   * <b>Browser support</b>\n   * The event model in CreateJS can be used separately from the suite in any project, however the inheritance model\n   * requires modern browsers (IE9+).\n   *      \n   *\n   * @class EventDispatcher\n   * @constructor\n   **/\n\n  function EventDispatcher() {\n    // private properties:\n\n    /**\n     * @protected\n     * @property _listeners\n     * @type Object\n     **/\n    this._listeners = null;\n    /**\n     * @protected\n     * @property _captureListeners\n     * @type Object\n     **/\n\n    this._captureListeners = null;\n  }\n\n  var p = EventDispatcher.prototype;\n  /**\n   * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n   * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n   * for details.\n   *\n   * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n   *\n   * @method initialize\n   * @protected\n   * @deprecated\n   */\n  // p.initialize = function() {}; // searchable for devs wondering where it is.\n  // static public methods:\n\n  /**\n   * Static initializer to mix EventDispatcher methods into a target object or prototype.\n   * \n   * \t\tEventDispatcher.initialize(MyClass.prototype); // add to the prototype of the class\n   * \t\tEventDispatcher.initialize(myObject); // add to a specific instance\n   * \n   * @method initialize\n   * @static\n   * @param {Object} target The target object to inject EventDispatcher methods into. This can be an instance or a\n   * prototype.\n   **/\n\n  EventDispatcher.initialize = function (target) {\n    target.addEventListener = p.addEventListener;\n    target.on = p.on;\n    target.removeEventListener = target.off = p.removeEventListener;\n    target.removeAllEventListeners = p.removeAllEventListeners;\n    target.hasEventListener = p.hasEventListener;\n    target.dispatchEvent = p.dispatchEvent;\n    target._dispatchEvent = p._dispatchEvent;\n    target.willTrigger = p.willTrigger;\n  }; // public methods:\n\n  /**\n   * Adds the specified event listener. Note that adding multiple listeners to the same function will result in\n   * multiple callbacks getting fired.\n   *\n   * <h4>Example</h4>\n   *\n   *      displayObject.addEventListener(\"click\", handleClick);\n   *      function handleClick(event) {\n   *         // Click happened.\n   *      }\n   *\n   * @method addEventListener\n   * @param {String} type The string type of the event.\n   * @param {Function | Object} listener An object with a handleEvent method, or a function that will be called when\n   * the event is dispatched.\n   * @param {Boolean} [useCapture] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\n   * @return {Function | Object} Returns the listener for chaining or assignment.\n   **/\n\n\n  p.addEventListener = function (type, listener, useCapture) {\n    var listeners;\n\n    if (useCapture) {\n      listeners = this._captureListeners = this._captureListeners || {};\n    } else {\n      listeners = this._listeners = this._listeners || {};\n    }\n\n    var arr = listeners[type];\n\n    if (arr) {\n      this.removeEventListener(type, listener, useCapture);\n    }\n\n    arr = listeners[type]; // remove may have deleted the array\n\n    if (!arr) {\n      listeners[type] = [listener];\n    } else {\n      arr.push(listener);\n    }\n\n    return listener;\n  };\n  /**\n   * A shortcut method for using addEventListener that makes it easier to specify an execution scope, have a listener\n   * only run once, associate arbitrary data with the listener, and remove the listener.\n   * \n   * This method works by creating an anonymous wrapper function and subscribing it with addEventListener.\n   * The wrapper function is returned for use with `removeEventListener` (or `off`).\n   * \n   * <b>IMPORTANT:</b> To remove a listener added with `on`, you must pass in the returned wrapper function as the listener, or use\n   * {{#crossLink \"Event/remove\"}}{{/crossLink}}. Likewise, each time you call `on` a NEW wrapper function is subscribed, so multiple calls\n   * to `on` with the same params will create multiple listeners.\n   * \n   * <h4>Example</h4>\n   * \n   * \t\tvar listener = myBtn.on(\"click\", handleClick, null, false, {count:3});\n   * \t\tfunction handleClick(evt, data) {\n   * \t\t\tdata.count -= 1;\n   * \t\t\tconsole.log(this == myBtn); // true - scope defaults to the dispatcher\n   * \t\t\tif (data.count == 0) {\n   * \t\t\t\talert(\"clicked 3 times!\");\n   * \t\t\t\tmyBtn.off(\"click\", listener);\n   * \t\t\t\t// alternately: evt.remove();\n   * \t\t\t}\n   * \t\t}\n   * \n   * @method on\n   * @param {String} type The string type of the event.\n   * @param {Function | Object} listener An object with a handleEvent method, or a function that will be called when\n   * the event is dispatched.\n   * @param {Object} [scope] The scope to execute the listener in. Defaults to the dispatcher/currentTarget for function listeners, and to the listener itself for object listeners (ie. using handleEvent).\n   * @param {Boolean} [once=false] If true, the listener will remove itself after the first time it is triggered.\n   * @param {*} [data] Arbitrary data that will be included as the second parameter when the listener is called.\n   * @param {Boolean} [useCapture=false] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\n   * @return {Function} Returns the anonymous function that was created and assigned as the listener. This is needed to remove the listener later using .removeEventListener.\n   **/\n\n\n  p.on = function (type, listener, scope, once, data, useCapture) {\n    if (listener.handleEvent) {\n      scope = scope || listener;\n      listener = listener.handleEvent;\n    }\n\n    scope = scope || this;\n    return this.addEventListener(type, function (evt) {\n      listener.call(scope, evt, data);\n      once && evt.remove();\n    }, useCapture);\n  };\n  /**\n   * Removes the specified event listener.\n   *\n   * <b>Important Note:</b> that you must pass the exact function reference used when the event was added. If a proxy\n   * function, or function closure is used as the callback, the proxy/closure reference must be used - a new proxy or\n   * closure will not work.\n   *\n   * <h4>Example</h4>\n   *\n   *      displayObject.removeEventListener(\"click\", handleClick);\n   *\n   * @method removeEventListener\n   * @param {String} type The string type of the event.\n   * @param {Function | Object} listener The listener function or object.\n   * @param {Boolean} [useCapture] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\n   **/\n\n\n  p.removeEventListener = function (type, listener, useCapture) {\n    var listeners = useCapture ? this._captureListeners : this._listeners;\n\n    if (!listeners) {\n      return;\n    }\n\n    var arr = listeners[type];\n\n    if (!arr) {\n      return;\n    }\n\n    for (var i = 0, l = arr.length; i < l; i++) {\n      if (arr[i] == listener) {\n        if (l == 1) {\n          delete listeners[type];\n        } // allows for faster checks.\n        else {\n          arr.splice(i, 1);\n        }\n\n        break;\n      }\n    }\n  };\n  /**\n   * A shortcut to the removeEventListener method, with the same parameters and return value. This is a companion to the\n   * .on method.\n   * \n   * <b>IMPORTANT:</b> To remove a listener added with `on`, you must pass in the returned wrapper function as the listener. See \n   * {{#crossLink \"EventDispatcher/on\"}}{{/crossLink}} for an example.\n   *\n   * @method off\n   * @param {String} type The string type of the event.\n   * @param {Function | Object} listener The listener function or object.\n   * @param {Boolean} [useCapture] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\n   **/\n\n\n  p.off = p.removeEventListener;\n  /**\n   * Removes all listeners for the specified type, or all listeners of all types.\n   *\n   * <h4>Example</h4>\n   *\n   *      // Remove all listeners\n   *      displayObject.removeAllEventListeners();\n   *\n   *      // Remove all click listeners\n   *      displayObject.removeAllEventListeners(\"click\");\n   *\n   * @method removeAllEventListeners\n   * @param {String} [type] The string type of the event. If omitted, all listeners for all types will be removed.\n   **/\n\n  p.removeAllEventListeners = function (type) {\n    if (!type) {\n      this._listeners = this._captureListeners = null;\n    } else {\n      if (this._listeners) {\n        delete this._listeners[type];\n      }\n\n      if (this._captureListeners) {\n        delete this._captureListeners[type];\n      }\n    }\n  };\n  /**\n   * Dispatches the specified event to all listeners.\n   *\n   * <h4>Example</h4>\n   *\n   *      // Use a string event\n   *      this.dispatchEvent(\"complete\");\n   *\n   *      // Use an Event instance\n   *      var event = new createjs.Event(\"progress\");\n   *      this.dispatchEvent(event);\n   *\n   * @method dispatchEvent\n   * @param {Object | String | Event} eventObj An object with a \"type\" property, or a string type.\n   * While a generic object will work, it is recommended to use a CreateJS Event instance. If a string is used,\n   * dispatchEvent will construct an Event instance if necessary with the specified type. This latter approach can\n   * be used to avoid event object instantiation for non-bubbling events that may not have any listeners.\n   * @param {Boolean} [bubbles] Specifies the `bubbles` value when a string was passed to eventObj.\n   * @param {Boolean} [cancelable] Specifies the `cancelable` value when a string was passed to eventObj.\n   * @return {Boolean} Returns false if `preventDefault()` was called on a cancelable event, true otherwise.\n   **/\n\n\n  p.dispatchEvent = function (eventObj, bubbles, cancelable) {\n    if (typeof eventObj == \"string\") {\n      // skip everything if there's no listeners and it doesn't bubble:\n      var listeners = this._listeners;\n\n      if (!bubbles && (!listeners || !listeners[eventObj])) {\n        return true;\n      }\n\n      eventObj = new createjs.Event(eventObj, bubbles, cancelable);\n    } else if (eventObj.target && eventObj.clone) {\n      // redispatching an active event object, so clone it:\n      eventObj = eventObj.clone();\n    } // TODO: it would be nice to eliminate this. Maybe in favour of evtObj instanceof Event? Or !!evtObj.createEvent\n\n\n    try {\n      eventObj.target = this;\n    } catch (e) {} // try/catch allows redispatching of native events\n\n\n    if (!eventObj.bubbles || !this.parent) {\n      this._dispatchEvent(eventObj, 2);\n    } else {\n      var top = this,\n          list = [top];\n\n      while (top.parent) {\n        list.push(top = top.parent);\n      }\n\n      var i,\n          l = list.length; // capture & atTarget\n\n      for (i = l - 1; i >= 0 && !eventObj.propagationStopped; i--) {\n        list[i]._dispatchEvent(eventObj, 1 + (i == 0));\n      } // bubbling\n\n\n      for (i = 1; i < l && !eventObj.propagationStopped; i++) {\n        list[i]._dispatchEvent(eventObj, 3);\n      }\n    }\n\n    return !eventObj.defaultPrevented;\n  };\n  /**\n   * Indicates whether there is at least one listener for the specified event type.\n   * @method hasEventListener\n   * @param {String} type The string type of the event.\n   * @return {Boolean} Returns true if there is at least one listener for the specified event.\n   **/\n\n\n  p.hasEventListener = function (type) {\n    var listeners = this._listeners,\n        captureListeners = this._captureListeners;\n    return !!(listeners && listeners[type] || captureListeners && captureListeners[type]);\n  };\n  /**\n   * Indicates whether there is at least one listener for the specified event type on this object or any of its\n   * ancestors (parent, parent's parent, etc). A return value of true indicates that if a bubbling event of the\n   * specified type is dispatched from this object, it will trigger at least one listener.\n   * \n   * This is similar to {{#crossLink \"EventDispatcher/hasEventListener\"}}{{/crossLink}}, but it searches the entire\n   * event flow for a listener, not just this object.\n   * @method willTrigger\n   * @param {String} type The string type of the event.\n   * @return {Boolean} Returns `true` if there is at least one listener for the specified event.\n   **/\n\n\n  p.willTrigger = function (type) {\n    var o = this;\n\n    while (o) {\n      if (o.hasEventListener(type)) {\n        return true;\n      }\n\n      o = o.parent;\n    }\n\n    return false;\n  };\n  /**\n   * @method toString\n   * @return {String} a string representation of the instance.\n   **/\n\n\n  p.toString = function () {\n    return \"[EventDispatcher]\";\n  }; // private methods:\n\n  /**\n   * @method _dispatchEvent\n   * @param {Object | String | Event} eventObj\n   * @param {Object} eventPhase\n   * @protected\n   **/\n\n\n  p._dispatchEvent = function (eventObj, eventPhase) {\n    var l,\n        listeners = eventPhase == 1 ? this._captureListeners : this._listeners;\n\n    if (eventObj && listeners) {\n      var arr = listeners[eventObj.type];\n\n      if (!arr || !(l = arr.length)) {\n        return;\n      }\n\n      try {\n        eventObj.currentTarget = this;\n      } catch (e) {}\n\n      try {\n        eventObj.eventPhase = eventPhase;\n      } catch (e) {}\n\n      eventObj.removed = false;\n      arr = arr.slice(); // to avoid issues with items being removed or added during the dispatch\n\n      for (var i = 0; i < l && !eventObj.immediatePropagationStopped; i++) {\n        var o = arr[i];\n\n        if (o.handleEvent) {\n          o.handleEvent(eventObj);\n        } else {\n          o(eventObj);\n        }\n\n        if (eventObj.removed) {\n          this.off(eventObj.type, o, eventPhase == 1);\n          eventObj.removed = false;\n        }\n      }\n    }\n  };\n\n  createjs.EventDispatcher = EventDispatcher;\n})(); //##############################################################################\n// Ticker.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor:\n\n  /**\n   * The Ticker provides a centralized tick or heartbeat broadcast at a set interval. Listeners can subscribe to the tick\n   * event to be notified when a set time interval has elapsed.\n   *\n   * Note that the interval that the tick event is called is a target interval, and may be broadcast at a slower interval\n   * when under high CPU load. The Ticker class uses a static interface (ex. `Ticker.framerate = 30;`) and\n   * can not be instantiated.\n   *\n   * <h4>Example</h4>\n   *\n   *      createjs.Ticker.addEventListener(\"tick\", handleTick);\n   *      function handleTick(event) {\n   *          // Actions carried out each tick (aka frame)\n   *          if (!event.paused) {\n   *              // Actions carried out when the Ticker is not paused.\n   *          }\n   *      }\n   *\n   * @class Ticker\n   * @uses EventDispatcher\n   * @static\n   **/\n\n  function Ticker() {\n    throw \"Ticker cannot be instantiated.\";\n  } // constants:\n\n  /**\n   * In this mode, Ticker uses the requestAnimationFrame API, but attempts to synch the ticks to target framerate. It\n   * uses a simple heuristic that compares the time of the RAF return to the target time for the current frame and\n   * dispatches the tick when the time is within a certain threshold.\n   *\n   * This mode has a higher variance for time between frames than {{#crossLink \"Ticker/TIMEOUT:property\"}}{{/crossLink}},\n   * but does not require that content be time based as with {{#crossLink \"Ticker/RAF:property\"}}{{/crossLink}} while\n   * gaining the benefits of that API (screen synch, background throttling).\n   *\n   * Variance is usually lowest for framerates that are a divisor of the RAF frequency. This is usually 60, so\n   * framerates of 10, 12, 15, 20, and 30 work well.\n   *\n   * Falls back to {{#crossLink \"Ticker/TIMEOUT:property\"}}{{/crossLink}} if the requestAnimationFrame API is not\n   * supported.\n   * @property RAF_SYNCHED\n   * @static\n   * @type {String}\n   * @default \"synched\"\n   * @readonly\n   **/\n\n\n  Ticker.RAF_SYNCHED = \"synched\";\n  /**\n   * In this mode, Ticker passes through the requestAnimationFrame heartbeat, ignoring the target framerate completely.\n   * Because requestAnimationFrame frequency is not deterministic, any content using this mode should be time based.\n   * You can leverage {{#crossLink \"Ticker/getTime\"}}{{/crossLink}} and the {{#crossLink \"Ticker/tick:event\"}}{{/crossLink}}\n   * event object's \"delta\" properties to make this easier.\n   *\n   * Falls back on {{#crossLink \"Ticker/TIMEOUT:property\"}}{{/crossLink}} if the requestAnimationFrame API is not\n   * supported.\n   * @property RAF\n   * @static\n   * @type {String}\n   * @default \"raf\"\n   * @readonly\n   **/\n\n  Ticker.RAF = \"raf\";\n  /**\n   * In this mode, Ticker uses the setTimeout API. This provides predictable, adaptive frame timing, but does not\n   * provide the benefits of requestAnimationFrame (screen synch, background throttling).\n   * @property TIMEOUT\n   * @static\n   * @type {String}\n   * @default \"timeout\"\n   * @readonly\n   **/\n\n  Ticker.TIMEOUT = \"timeout\"; // static events:\n\n  /**\n   * Dispatched each tick. The event will be dispatched to each listener even when the Ticker has been paused using\n   * {{#crossLink \"Ticker/setPaused\"}}{{/crossLink}}.\n   *\n   * <h4>Example</h4>\n   *\n   *      createjs.Ticker.addEventListener(\"tick\", handleTick);\n   *      function handleTick(event) {\n   *          console.log(\"Paused:\", event.paused, event.delta);\n   *      }\n   *\n   * @event tick\n   * @param {Object} target The object that dispatched the event.\n   * @param {String} type The event type.\n   * @param {Boolean} paused Indicates whether the ticker is currently paused.\n   * @param {Number} delta The time elapsed in ms since the last tick.\n   * @param {Number} time The total time in ms since Ticker was initialized.\n   * @param {Number} runTime The total time in ms that Ticker was not paused since it was initialized. For example,\n   * \tyou could determine the amount of time that the Ticker has been paused since initialization with `time-runTime`.\n   * @since 0.6.0\n   */\n  // public static properties:\n\n  /**\n   * Deprecated in favour of {{#crossLink \"Ticker/timingMode\"}}{{/crossLink}}, and will be removed in a future version. If true, timingMode will\n   * use {{#crossLink \"Ticker/RAF_SYNCHED\"}}{{/crossLink}} by default.\n   * @deprecated Deprecated in favour of {{#crossLink \"Ticker/timingMode\"}}{{/crossLink}}.\n   * @property useRAF\n   * @static\n   * @type {Boolean}\n   * @default false\n   **/\n\n  Ticker.useRAF = false;\n  /**\n   * Specifies the timing api (setTimeout or requestAnimationFrame) and mode to use. See\n   * {{#crossLink \"Ticker/TIMEOUT\"}}{{/crossLink}}, {{#crossLink \"Ticker/RAF\"}}{{/crossLink}}, and\n   * {{#crossLink \"Ticker/RAF_SYNCHED\"}}{{/crossLink}} for mode details.\n   * @property timingMode\n   * @static\n   * @type {String}\n   * @default Ticker.TIMEOUT\n   **/\n\n  Ticker.timingMode = null;\n  /**\n   * Specifies a maximum value for the delta property in the tick event object. This is useful when building time\n   * based animations and systems to prevent issues caused by large time gaps caused by background tabs, system sleep,\n   * alert dialogs, or other blocking routines. Double the expected frame duration is often an effective value\n   * (ex. maxDelta=50 when running at 40fps).\n   * \n   * This does not impact any other values (ex. time, runTime, etc), so you may experience issues if you enable maxDelta\n   * when using both delta and other values.\n   * \n   * If 0, there is no maximum.\n   * @property maxDelta\n   * @static\n   * @type {number}\n   * @default 0\n   */\n\n  Ticker.maxDelta = 0;\n  /**\n   * When the ticker is paused, all listeners will still receive a tick event, but the <code>paused</code> property\n   * of the event will be `true`. Also, while paused the `runTime` will not increase. See {{#crossLink \"Ticker/tick:event\"}}{{/crossLink}},\n   * {{#crossLink \"Ticker/getTime\"}}{{/crossLink}}, and {{#crossLink \"Ticker/getEventTime\"}}{{/crossLink}} for more\n   * info.\n   *\n   * <h4>Example</h4>\n   *\n   *      createjs.Ticker.addEventListener(\"tick\", handleTick);\n   *      createjs.Ticker.paused = true;\n   *      function handleTick(event) {\n   *          console.log(event.paused,\n   *          \tcreatejs.Ticker.getTime(false),\n   *          \tcreatejs.Ticker.getTime(true));\n   *      }\n   *\n   * @property paused\n   * @static\n   * @type {Boolean}\n   * @default false\n   **/\n\n  Ticker.paused = false; // mix-ins:\n  // EventDispatcher methods:\n\n  Ticker.removeEventListener = null;\n  Ticker.removeAllEventListeners = null;\n  Ticker.dispatchEvent = null;\n  Ticker.hasEventListener = null;\n  Ticker._listeners = null;\n  createjs.EventDispatcher.initialize(Ticker); // inject EventDispatcher methods.\n\n  Ticker._addEventListener = Ticker.addEventListener;\n\n  Ticker.addEventListener = function () {\n    !Ticker._inited && Ticker.init();\n    return Ticker._addEventListener.apply(Ticker, arguments);\n  }; // private static properties:\n\n  /**\n   * @property _inited\n   * @static\n   * @type {Boolean}\n   * @protected\n   **/\n\n\n  Ticker._inited = false;\n  /**\n   * @property _startTime\n   * @static\n   * @type {Number}\n   * @protected\n   **/\n\n  Ticker._startTime = 0;\n  /**\n   * @property _pausedTime\n   * @static\n   * @type {Number}\n   * @protected\n   **/\n\n  Ticker._pausedTime = 0;\n  /**\n   * The number of ticks that have passed\n   * @property _ticks\n   * @static\n   * @type {Number}\n   * @protected\n   **/\n\n  Ticker._ticks = 0;\n  /**\n   * The number of ticks that have passed while Ticker has been paused\n   * @property _pausedTicks\n   * @static\n   * @type {Number}\n   * @protected\n   **/\n\n  Ticker._pausedTicks = 0;\n  /**\n   * @property _interval\n   * @static\n   * @type {Number}\n   * @protected\n   **/\n\n  Ticker._interval = 50;\n  /**\n   * @property _lastTime\n   * @static\n   * @type {Number}\n   * @protected\n   **/\n\n  Ticker._lastTime = 0;\n  /**\n   * @property _times\n   * @static\n   * @type {Array}\n   * @protected\n   **/\n\n  Ticker._times = null;\n  /**\n   * @property _tickTimes\n   * @static\n   * @type {Array}\n   * @protected\n   **/\n\n  Ticker._tickTimes = null;\n  /**\n   * Stores the timeout or requestAnimationFrame id.\n   * @property _timerId\n   * @static\n   * @type {Number}\n   * @protected\n   **/\n\n  Ticker._timerId = null;\n  /**\n   * True if currently using requestAnimationFrame, false if using setTimeout. This may be different than timingMode\n   * if that property changed and a tick hasn't fired.\n   * @property _raf\n   * @static\n   * @type {Boolean}\n   * @protected\n   **/\n\n  Ticker._raf = true; // static getter / setters:\n\n  /**\n   * Use the {{#crossLink \"Ticker/interval:property\"}}{{/crossLink}} property instead.\n   * @method setInterval\n   * @static\n   * @param {Number} interval\n   * @deprecated\n   **/\n\n  Ticker.setInterval = function (interval) {\n    Ticker._interval = interval;\n\n    if (!Ticker._inited) {\n      return;\n    }\n\n    Ticker._setupTick();\n  };\n  /**\n   * Use the {{#crossLink \"Ticker/interval:property\"}}{{/crossLink}} property instead.\n   * @method getInterval\n   * @static\n   * @return {Number}\n   * @deprecated\n   **/\n\n\n  Ticker.getInterval = function () {\n    return Ticker._interval;\n  };\n  /**\n   * Use the {{#crossLink \"Ticker/framerate:property\"}}{{/crossLink}} property instead.\n   * @method setFPS\n   * @static\n   * @param {Number} value\n   * @deprecated\n   **/\n\n\n  Ticker.setFPS = function (value) {\n    Ticker.setInterval(1000 / value);\n  };\n  /**\n   * Use the {{#crossLink \"Ticker/framerate:property\"}}{{/crossLink}} property instead.\n   * @method getFPS\n   * @static\n   * @return {Number}\n   * @deprecated\n   **/\n\n\n  Ticker.getFPS = function () {\n    return 1000 / Ticker._interval;\n  };\n  /**\n   * Indicates the target time (in milliseconds) between ticks. Default is 50 (20 FPS).\n   * Note that actual time between ticks may be more than specified depending on CPU load.\n   * This property is ignored if the ticker is using the `RAF` timing mode.\n   * @property interval\n   * @static\n   * @type {Number}\n   **/\n\n  /**\n   * Indicates the target frame rate in frames per second (FPS). Effectively just a shortcut to `interval`, where\n   * `framerate == 1000/interval`.\n   * @property framerate\n   * @static\n   * @type {Number}\n   **/\n\n\n  try {\n    Object.defineProperties(Ticker, {\n      interval: {\n        get: Ticker.getInterval,\n        set: Ticker.setInterval\n      },\n      framerate: {\n        get: Ticker.getFPS,\n        set: Ticker.setFPS\n      }\n    });\n  } catch (e) {\n    console.log(e);\n  } // public static methods:\n\n  /**\n   * Starts the tick. This is called automatically when the first listener is added.\n   * @method init\n   * @static\n   **/\n\n\n  Ticker.init = function () {\n    if (Ticker._inited) {\n      return;\n    }\n\n    Ticker._inited = true;\n    Ticker._times = [];\n    Ticker._tickTimes = [];\n    Ticker._startTime = Ticker._getTime();\n\n    Ticker._times.push(Ticker._lastTime = 0);\n\n    Ticker.interval = Ticker._interval;\n  };\n  /**\n   * Stops the Ticker and removes all listeners. Use init() to restart the Ticker.\n   * @method reset\n   * @static\n   **/\n\n\n  Ticker.reset = function () {\n    if (Ticker._raf) {\n      var f = window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.oCancelAnimationFrame || window.msCancelAnimationFrame;\n      f && f(Ticker._timerId);\n    } else {\n      clearTimeout(Ticker._timerId);\n    }\n\n    Ticker.removeAllEventListeners(\"tick\");\n    Ticker._timerId = Ticker._times = Ticker._tickTimes = null;\n    Ticker._startTime = Ticker._lastTime = Ticker._ticks = 0;\n    Ticker._inited = false;\n  };\n  /**\n   * Returns the average time spent within a tick. This can vary significantly from the value provided by getMeasuredFPS\n   * because it only measures the time spent within the tick execution stack. \n   * \n   * Example 1: With a target FPS of 20, getMeasuredFPS() returns 20fps, which indicates an average of 50ms between \n   * the end of one tick and the end of the next. However, getMeasuredTickTime() returns 15ms. This indicates that \n   * there may be up to 35ms of \"idle\" time between the end of one tick and the start of the next.\n   *\n   * Example 2: With a target FPS of 30, getFPS() returns 10fps, which indicates an average of 100ms between the end of\n   * one tick and the end of the next. However, getMeasuredTickTime() returns 20ms. This would indicate that something\n   * other than the tick is using ~80ms (another script, DOM rendering, etc).\n   * @method getMeasuredTickTime\n   * @static\n   * @param {Number} [ticks] The number of previous ticks over which to measure the average time spent in a tick.\n   * Defaults to the number of ticks per second. To get only the last tick's time, pass in 1.\n   * @return {Number} The average time spent in a tick in milliseconds.\n   **/\n\n\n  Ticker.getMeasuredTickTime = function (ticks) {\n    var ttl = 0,\n        times = Ticker._tickTimes;\n\n    if (!times || times.length < 1) {\n      return -1;\n    } // by default, calculate average for the past ~1 second:\n\n\n    ticks = Math.min(times.length, ticks || Ticker.getFPS() | 0);\n\n    for (var i = 0; i < ticks; i++) {\n      ttl += times[i];\n    }\n\n    return ttl / ticks;\n  };\n  /**\n   * Returns the actual frames / ticks per second.\n   * @method getMeasuredFPS\n   * @static\n   * @param {Number} [ticks] The number of previous ticks over which to measure the actual frames / ticks per second.\n   * Defaults to the number of ticks per second.\n   * @return {Number} The actual frames / ticks per second. Depending on performance, this may differ\n   * from the target frames per second.\n   **/\n\n\n  Ticker.getMeasuredFPS = function (ticks) {\n    var times = Ticker._times;\n\n    if (!times || times.length < 2) {\n      return -1;\n    } // by default, calculate fps for the past ~1 second:\n\n\n    ticks = Math.min(times.length - 1, ticks || Ticker.getFPS() | 0);\n    return 1000 / ((times[0] - times[ticks]) / ticks);\n  };\n  /**\n   * Use the {{#crossLink \"Ticker/paused:property\"}}{{/crossLink}} property instead.\n   * @method setPaused\n   * @static\n   * @param {Boolean} value\n   * @deprecated\n   **/\n\n\n  Ticker.setPaused = function (value) {\n    // TODO: deprecated.\n    Ticker.paused = value;\n  };\n  /**\n   * Use the {{#crossLink \"Ticker/paused:property\"}}{{/crossLink}} property instead.\n   * @method getPaused\n   * @static\n   * @return {Boolean}\n   * @deprecated\n   **/\n\n\n  Ticker.getPaused = function () {\n    // TODO: deprecated.\n    return Ticker.paused;\n  };\n  /**\n   * Returns the number of milliseconds that have elapsed since Ticker was initialized via {{#crossLink \"Ticker/init\"}}.\n   * Returns -1 if Ticker has not been initialized. For example, you could use\n   * this in a time synchronized animation to determine the exact amount of time that has elapsed.\n   * @method getTime\n   * @static\n   * @param {Boolean} [runTime=false] If true only time elapsed while Ticker was not paused will be returned.\n   * If false, the value returned will be total time elapsed since the first tick event listener was added.\n   * @return {Number} Number of milliseconds that have elapsed since Ticker was initialized or -1.\n   **/\n\n\n  Ticker.getTime = function (runTime) {\n    return Ticker._startTime ? Ticker._getTime() - (runTime ? Ticker._pausedTime : 0) : -1;\n  };\n  /**\n   * Similar to the {{#crossLink \"Ticker/getTime\"}}{{/crossLink}} method, but returns the time on the most recent {{#crossLink \"Ticker/tick:event\"}}{{/crossLink}}\n   * event object.\n   * @method getEventTime\n   * @static\n   * @param runTime {Boolean} [runTime=false] If true, the runTime property will be returned instead of time.\n   * @returns {number} The time or runTime property from the most recent tick event or -1.\n   */\n\n\n  Ticker.getEventTime = function (runTime) {\n    return Ticker._startTime ? (Ticker._lastTime || Ticker._startTime) - (runTime ? Ticker._pausedTime : 0) : -1;\n  };\n  /**\n   * Returns the number of ticks that have been broadcast by Ticker.\n   * @method getTicks\n   * @static\n   * @param {Boolean} pauseable Indicates whether to include ticks that would have been broadcast\n   * while Ticker was paused. If true only tick events broadcast while Ticker is not paused will be returned.\n   * If false, tick events that would have been broadcast while Ticker was paused will be included in the return\n   * value. The default value is false.\n   * @return {Number} of ticks that have been broadcast.\n   **/\n\n\n  Ticker.getTicks = function (pauseable) {\n    return Ticker._ticks - (pauseable ? Ticker._pausedTicks : 0);\n  }; // private static methods:\n\n  /**\n   * @method _handleSynch\n   * @static\n   * @protected\n   **/\n\n\n  Ticker._handleSynch = function () {\n    Ticker._timerId = null;\n\n    Ticker._setupTick(); // run if enough time has elapsed, with a little bit of flexibility to be early:\n\n\n    if (Ticker._getTime() - Ticker._lastTime >= (Ticker._interval - 1) * 0.97) {\n      Ticker._tick();\n    }\n  };\n  /**\n   * @method _handleRAF\n   * @static\n   * @protected\n   **/\n\n\n  Ticker._handleRAF = function () {\n    Ticker._timerId = null;\n\n    Ticker._setupTick();\n\n    Ticker._tick();\n  };\n  /**\n   * @method _handleTimeout\n   * @static\n   * @protected\n   **/\n\n\n  Ticker._handleTimeout = function () {\n    Ticker._timerId = null;\n\n    Ticker._setupTick();\n\n    Ticker._tick();\n  };\n  /**\n   * @method _setupTick\n   * @static\n   * @protected\n   **/\n\n\n  Ticker._setupTick = function () {\n    if (Ticker._timerId != null) {\n      return;\n    } // avoid duplicates\n\n\n    var mode = Ticker.timingMode || Ticker.useRAF && Ticker.RAF_SYNCHED;\n\n    if (mode == Ticker.RAF_SYNCHED || mode == Ticker.RAF) {\n      var f = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame;\n\n      if (f) {\n        Ticker._timerId = f(mode == Ticker.RAF ? Ticker._handleRAF : Ticker._handleSynch);\n        Ticker._raf = true;\n        return;\n      }\n    }\n\n    Ticker._raf = false;\n    Ticker._timerId = setTimeout(Ticker._handleTimeout, Ticker._interval);\n  };\n  /**\n   * @method _tick\n   * @static\n   * @protected\n   **/\n\n\n  Ticker._tick = function () {\n    var paused = Ticker.paused;\n\n    var time = Ticker._getTime();\n\n    var elapsedTime = time - Ticker._lastTime;\n    Ticker._lastTime = time;\n    Ticker._ticks++;\n\n    if (paused) {\n      Ticker._pausedTicks++;\n      Ticker._pausedTime += elapsedTime;\n    }\n\n    if (Ticker.hasEventListener(\"tick\")) {\n      var event = new createjs.Event(\"tick\");\n      var maxDelta = Ticker.maxDelta;\n      event.delta = maxDelta && elapsedTime > maxDelta ? maxDelta : elapsedTime;\n      event.paused = paused;\n      event.time = time;\n      event.runTime = time - Ticker._pausedTime;\n      Ticker.dispatchEvent(event);\n    }\n\n    Ticker._tickTimes.unshift(Ticker._getTime() - time);\n\n    while (Ticker._tickTimes.length > 100) {\n      Ticker._tickTimes.pop();\n    }\n\n    Ticker._times.unshift(time);\n\n    while (Ticker._times.length > 100) {\n      Ticker._times.pop();\n    }\n  };\n  /**\n   * @method _getTime\n   * @static\n   * @protected\n   **/\n\n\n  var now = window.performance && (performance.now || performance.mozNow || performance.msNow || performance.oNow || performance.webkitNow);\n\n  Ticker._getTime = function () {\n    return (now && now.call(performance) || new Date().getTime()) - Ticker._startTime;\n  };\n\n  createjs.Ticker = Ticker;\n})(); //##############################################################################\n// UID.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor:\n\n  /**\n   * Global utility for generating sequential unique ID numbers. The UID class uses a static interface (ex. <code>UID.get()</code>)\n   * and should not be instantiated.\n   * @class UID\n   * @static\n   **/\n\n  function UID() {\n    throw \"UID cannot be instantiated\";\n  } // private static properties:\n\n  /**\n   * @property _nextID\n   * @type Number\n   * @protected\n   **/\n\n\n  UID._nextID = 0; // public static methods:\n\n  /**\n   * Returns the next unique id.\n   * @method get\n   * @return {Number} The next unique id\n   * @static\n   **/\n\n  UID.get = function () {\n    return UID._nextID++;\n  };\n\n  createjs.UID = UID;\n})(); //##############################################################################\n// MouseEvent.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor:\n\n  /**\n   * Passed as the parameter to all mouse/pointer/touch related events. For a listing of mouse events and their properties,\n   * see the {{#crossLink \"DisplayObject\"}}{{/crossLink}} and {{#crossLink \"Stage\"}}{{/crossLink}} event listings.\n   * @class MouseEvent\n   * @param {String} type The event type.\n   * @param {Boolean} bubbles Indicates whether the event will bubble through the display list.\n   * @param {Boolean} cancelable Indicates whether the default behaviour of this event can be cancelled.\n   * @param {Number} stageX The normalized x position relative to the stage.\n   * @param {Number} stageY The normalized y position relative to the stage.\n   * @param {MouseEvent} nativeEvent The native DOM event related to this mouse event.\n   * @param {Number} pointerID The unique id for the pointer.\n   * @param {Boolean} primary Indicates whether this is the primary pointer in a multitouch environment.\n   * @param {Number} rawX The raw x position relative to the stage.\n   * @param {Number} rawY The raw y position relative to the stage.\n   * @param {DisplayObject} relatedTarget The secondary target for the event.\n   * @extends Event\n   * @constructor\n   **/\n\n  function MouseEvent(type, bubbles, cancelable, stageX, stageY, nativeEvent, pointerID, primary, rawX, rawY, relatedTarget) {\n    this.Event_constructor(type, bubbles, cancelable); // public properties:\n\n    /**\n     * The normalized x position on the stage. This will always be within the range 0 to stage width.\n     * @property stageX\n     * @type Number\n    */\n\n    this.stageX = stageX;\n    /**\n     * The normalized y position on the stage. This will always be within the range 0 to stage height.\n     * @property stageY\n     * @type Number\n     **/\n\n    this.stageY = stageY;\n    /**\n     * The raw x position relative to the stage. Normally this will be the same as the stageX value, unless\n     * stage.mouseMoveOutside is true and the pointer is outside of the stage bounds.\n     * @property rawX\n     * @type Number\n    */\n\n    this.rawX = rawX == null ? stageX : rawX;\n    /**\n     * The raw y position relative to the stage. Normally this will be the same as the stageY value, unless\n     * stage.mouseMoveOutside is true and the pointer is outside of the stage bounds.\n     * @property rawY\n     * @type Number\n    */\n\n    this.rawY = rawY == null ? stageY : rawY;\n    /**\n     * The native MouseEvent generated by the browser. The properties and API for this\n     * event may differ between browsers. This property will be null if the\n     * EaselJS property was not directly generated from a native MouseEvent.\n     * @property nativeEvent\n     * @type HtmlMouseEvent\n     * @default null\n     **/\n\n    this.nativeEvent = nativeEvent;\n    /**\n     * The unique id for the pointer (touch point or cursor). This will be either -1 for the mouse, or the system\n     * supplied id value.\n     * @property pointerID\n     * @type {Number}\n     */\n\n    this.pointerID = pointerID;\n    /**\n     * Indicates whether this is the primary pointer in a multitouch environment. This will always be true for the mouse.\n     * For touch pointers, the first pointer in the current stack will be considered the primary pointer.\n     * @property primary\n     * @type {Boolean}\n     */\n\n    this.primary = !!primary;\n    /**\n     * The secondary target for the event, if applicable. This is used for mouseout/rollout\n     * events to indicate the object that the mouse entered from, mouseover/rollover for the object the mouse exited,\n     * and stagemousedown/stagemouseup events for the object that was the under the cursor, if any.\n     * \n     * Only valid interaction targets will be returned (ie. objects with mouse listeners or a cursor set).\n     * @property relatedTarget\n     * @type {DisplayObject}\n     */\n\n    this.relatedTarget = relatedTarget;\n  }\n\n  var p = createjs.extend(MouseEvent, createjs.Event); // TODO: deprecated\n  // p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n  // getter / setters:\n\n  /**\n   * Returns the x position of the mouse in the local coordinate system of the current target (ie. the dispatcher).\n   * @property localX\n   * @type {Number}\n   * @readonly\n   */\n\n  p._get_localX = function () {\n    return this.currentTarget.globalToLocal(this.rawX, this.rawY).x;\n  };\n  /**\n   * Returns the y position of the mouse in the local coordinate system of the current target (ie. the dispatcher).\n   * @property localY\n   * @type {Number}\n   * @readonly\n   */\n\n\n  p._get_localY = function () {\n    return this.currentTarget.globalToLocal(this.rawX, this.rawY).y;\n  };\n  /**\n   * Indicates whether the event was generated by a touch input (versus a mouse input).\n   * @property isTouch\n   * @type {Boolean}\n   * @readonly\n   */\n\n\n  p._get_isTouch = function () {\n    return this.pointerID !== -1;\n  };\n\n  try {\n    Object.defineProperties(p, {\n      localX: {\n        get: p._get_localX\n      },\n      localY: {\n        get: p._get_localY\n      },\n      isTouch: {\n        get: p._get_isTouch\n      }\n    });\n  } catch (e) {} // TODO: use Log\n  // public methods:\n\n  /**\n   * Returns a clone of the MouseEvent instance.\n   * @method clone\n   * @return {MouseEvent} a clone of the MouseEvent instance.\n   **/\n\n\n  p.clone = function () {\n    return new MouseEvent(this.type, this.bubbles, this.cancelable, this.stageX, this.stageY, this.nativeEvent, this.pointerID, this.primary, this.rawX, this.rawY);\n  };\n  /**\n   * Returns a string representation of this object.\n   * @method toString\n   * @return {String} a string representation of the instance.\n   **/\n\n\n  p.toString = function () {\n    return \"[MouseEvent (type=\" + this.type + \" stageX=\" + this.stageX + \" stageY=\" + this.stageY + \")]\";\n  };\n\n  createjs.MouseEvent = createjs.promote(MouseEvent, \"Event\");\n})(); //##############################################################################\n// Matrix2D.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor:\n\n  /**\n   * Represents an affine transformation matrix, and provides tools for constructing and concatenating matrices.\n   *\n   * This matrix can be visualized as:\n   *\n   * \t[ a  c  tx\n   * \t  b  d  ty\n   * \t  0  0  1  ]\n   *\n   * Note the locations of b and c.\n   *\n   * @class Matrix2D\n   * @param {Number} [a=1] Specifies the a property for the new matrix.\n   * @param {Number} [b=0] Specifies the b property for the new matrix.\n   * @param {Number} [c=0] Specifies the c property for the new matrix.\n   * @param {Number} [d=1] Specifies the d property for the new matrix.\n   * @param {Number} [tx=0] Specifies the tx property for the new matrix.\n   * @param {Number} [ty=0] Specifies the ty property for the new matrix.\n   * @constructor\n   **/\n\n  function Matrix2D(a, b, c, d, tx, ty) {\n    this.setValues(a, b, c, d, tx, ty); // public properties:\n    // assigned in the setValues method.\n\n    /**\n     * Position (0, 0) in a 3x3 affine transformation matrix.\n     * @property a\n     * @type Number\n     **/\n\n    /**\n     * Position (0, 1) in a 3x3 affine transformation matrix.\n     * @property b\n     * @type Number\n     **/\n\n    /**\n     * Position (1, 0) in a 3x3 affine transformation matrix.\n     * @property c\n     * @type Number\n     **/\n\n    /**\n     * Position (1, 1) in a 3x3 affine transformation matrix.\n     * @property d\n     * @type Number\n     **/\n\n    /**\n     * Position (2, 0) in a 3x3 affine transformation matrix.\n     * @property tx\n     * @type Number\n     **/\n\n    /**\n     * Position (2, 1) in a 3x3 affine transformation matrix.\n     * @property ty\n     * @type Number\n     **/\n  }\n\n  var p = Matrix2D.prototype;\n  /**\n   * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n   * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n   * for details.\n   *\n   * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n   *\n   * @method initialize\n   * @protected\n   * @deprecated\n   */\n  // p.initialize = function() {}; // searchable for devs wondering where it is.\n  // constants:\n\n  /**\n   * Multiplier for converting degrees to radians. Used internally by Matrix2D.\n   * @property DEG_TO_RAD\n   * @static\n   * @final\n   * @type Number\n   * @readonly\n   **/\n\n  Matrix2D.DEG_TO_RAD = Math.PI / 180; // static public properties:\n\n  /**\n   * An identity matrix, representing a null transformation.\n   * @property identity\n   * @static\n   * @type Matrix2D\n   * @readonly\n   **/\n\n  Matrix2D.identity = null; // set at bottom of class definition.\n  // public methods:\n\n  /**\n   * Sets the specified values on this instance. \n   * @method setValues\n   * @param {Number} [a=1] Specifies the a property for the new matrix.\n   * @param {Number} [b=0] Specifies the b property for the new matrix.\n   * @param {Number} [c=0] Specifies the c property for the new matrix.\n   * @param {Number} [d=1] Specifies the d property for the new matrix.\n   * @param {Number} [tx=0] Specifies the tx property for the new matrix.\n   * @param {Number} [ty=0] Specifies the ty property for the new matrix.\n   * @return {Matrix2D} This instance. Useful for chaining method calls.\n  */\n\n  p.setValues = function (a, b, c, d, tx, ty) {\n    // don't forget to update docs in the constructor if these change:\n    this.a = a == null ? 1 : a;\n    this.b = b || 0;\n    this.c = c || 0;\n    this.d = d == null ? 1 : d;\n    this.tx = tx || 0;\n    this.ty = ty || 0;\n    return this;\n  };\n  /**\n   * Appends the specified matrix properties to this matrix. All parameters are required.\n   * This is the equivalent of multiplying `(this matrix) * (specified matrix)`.\n   * @method append\n   * @param {Number} a\n   * @param {Number} b\n   * @param {Number} c\n   * @param {Number} d\n   * @param {Number} tx\n   * @param {Number} ty\n   * @return {Matrix2D} This matrix. Useful for chaining method calls.\n   **/\n\n\n  p.append = function (a, b, c, d, tx, ty) {\n    var a1 = this.a;\n    var b1 = this.b;\n    var c1 = this.c;\n    var d1 = this.d;\n\n    if (a != 1 || b != 0 || c != 0 || d != 1) {\n      this.a = a1 * a + c1 * b;\n      this.b = b1 * a + d1 * b;\n      this.c = a1 * c + c1 * d;\n      this.d = b1 * c + d1 * d;\n    }\n\n    this.tx = a1 * tx + c1 * ty + this.tx;\n    this.ty = b1 * tx + d1 * ty + this.ty;\n    return this;\n  };\n  /**\n   * Prepends the specified matrix properties to this matrix.\n   * This is the equivalent of multiplying `(specified matrix) * (this matrix)`.\n   * All parameters are required.\n   * @method prepend\n   * @param {Number} a\n   * @param {Number} b\n   * @param {Number} c\n   * @param {Number} d\n   * @param {Number} tx\n   * @param {Number} ty\n   * @return {Matrix2D} This matrix. Useful for chaining method calls.\n   **/\n\n\n  p.prepend = function (a, b, c, d, tx, ty) {\n    var a1 = this.a;\n    var c1 = this.c;\n    var tx1 = this.tx;\n    this.a = a * a1 + c * this.b;\n    this.b = b * a1 + d * this.b;\n    this.c = a * c1 + c * this.d;\n    this.d = b * c1 + d * this.d;\n    this.tx = a * tx1 + c * this.ty + tx;\n    this.ty = b * tx1 + d * this.ty + ty;\n    return this;\n  };\n  /**\n   * Appends the specified matrix to this matrix.\n   * This is the equivalent of multiplying `(this matrix) * (specified matrix)`.\n   * @method appendMatrix\n   * @param {Matrix2D} matrix\n   * @return {Matrix2D} This matrix. Useful for chaining method calls.\n   **/\n\n\n  p.appendMatrix = function (matrix) {\n    return this.append(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);\n  };\n  /**\n   * Prepends the specified matrix to this matrix.\n   * This is the equivalent of multiplying `(specified matrix) * (this matrix)`.\n   * For example, you could calculate the combined transformation for a child object using:\n   * \n   * \tvar o = myDisplayObject;\n   * \tvar mtx = o.getMatrix();\n   * \twhile (o = o.parent) {\n   * \t\t// prepend each parent's transformation in turn:\n   * \t\to.prependMatrix(o.getMatrix());\n   * \t}\n   * @method prependMatrix\n   * @param {Matrix2D} matrix\n   * @return {Matrix2D} This matrix. Useful for chaining method calls.\n   **/\n\n\n  p.prependMatrix = function (matrix) {\n    return this.prepend(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);\n  };\n  /**\n   * Generates matrix properties from the specified display object transform properties, and appends them to this matrix.\n   * For example, you can use this to generate a matrix representing the transformations of a display object:\n   * \n   * \tvar mtx = new createjs.Matrix2D();\n   * \tmtx.appendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);\n   * @method appendTransform\n   * @param {Number} x\n   * @param {Number} y\n   * @param {Number} scaleX\n   * @param {Number} scaleY\n   * @param {Number} rotation\n   * @param {Number} skewX\n   * @param {Number} skewY\n   * @param {Number} regX Optional.\n   * @param {Number} regY Optional.\n   * @return {Matrix2D} This matrix. Useful for chaining method calls.\n   **/\n\n\n  p.appendTransform = function (x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\n    if (rotation % 360) {\n      var r = rotation * Matrix2D.DEG_TO_RAD;\n      var cos = Math.cos(r);\n      var sin = Math.sin(r);\n    } else {\n      cos = 1;\n      sin = 0;\n    }\n\n    if (skewX || skewY) {\n      // TODO: can this be combined into a single append operation?\n      skewX *= Matrix2D.DEG_TO_RAD;\n      skewY *= Matrix2D.DEG_TO_RAD;\n      this.append(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);\n      this.append(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, 0, 0);\n    } else {\n      this.append(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, x, y);\n    }\n\n    if (regX || regY) {\n      // append the registration offset:\n      this.tx -= regX * this.a + regY * this.c;\n      this.ty -= regX * this.b + regY * this.d;\n    }\n\n    return this;\n  };\n  /**\n   * Generates matrix properties from the specified display object transform properties, and prepends them to this matrix.\n   * For example, you could calculate the combined transformation for a child object using:\n   * \n   * \tvar o = myDisplayObject;\n   * \tvar mtx = new createjs.Matrix2D();\n   * \tdo  {\n   * \t\t// prepend each parent's transformation in turn:\n   * \t\tmtx.prependTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation, o.skewX, o.skewY, o.regX, o.regY);\n   * \t} while (o = o.parent);\n   * \t\n   * \tNote that the above example would not account for {{#crossLink \"DisplayObject/transformMatrix:property\"}}{{/crossLink}}\n   * \tvalues. See {{#crossLink \"Matrix2D/prependMatrix\"}}{{/crossLink}} for an example that does.\n   * @method prependTransform\n   * @param {Number} x\n   * @param {Number} y\n   * @param {Number} scaleX\n   * @param {Number} scaleY\n   * @param {Number} rotation\n   * @param {Number} skewX\n   * @param {Number} skewY\n   * @param {Number} regX Optional.\n   * @param {Number} regY Optional.\n   * @return {Matrix2D} This matrix. Useful for chaining method calls.\n   **/\n\n\n  p.prependTransform = function (x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\n    if (rotation % 360) {\n      var r = rotation * Matrix2D.DEG_TO_RAD;\n      var cos = Math.cos(r);\n      var sin = Math.sin(r);\n    } else {\n      cos = 1;\n      sin = 0;\n    }\n\n    if (regX || regY) {\n      // prepend the registration offset:\n      this.tx -= regX;\n      this.ty -= regY;\n    }\n\n    if (skewX || skewY) {\n      // TODO: can this be combined into a single prepend operation?\n      skewX *= Matrix2D.DEG_TO_RAD;\n      skewY *= Matrix2D.DEG_TO_RAD;\n      this.prepend(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, 0, 0);\n      this.prepend(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);\n    } else {\n      this.prepend(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, x, y);\n    }\n\n    return this;\n  };\n  /**\n   * Applies a clockwise rotation transformation to the matrix.\n   * @method rotate\n   * @param {Number} angle The angle to rotate by, in degrees. To use a value in radians, multiply it by `180/Math.PI`.\n   * @return {Matrix2D} This matrix. Useful for chaining method calls.\n   **/\n\n\n  p.rotate = function (angle) {\n    angle = angle * Matrix2D.DEG_TO_RAD;\n    var cos = Math.cos(angle);\n    var sin = Math.sin(angle);\n    var a1 = this.a;\n    var b1 = this.b;\n    this.a = a1 * cos + this.c * sin;\n    this.b = b1 * cos + this.d * sin;\n    this.c = -a1 * sin + this.c * cos;\n    this.d = -b1 * sin + this.d * cos;\n    return this;\n  };\n  /**\n   * Applies a skew transformation to the matrix.\n   * @method skew\n   * @param {Number} skewX The amount to skew horizontally in degrees. To use a value in radians, multiply it by `180/Math.PI`.\n   * @param {Number} skewY The amount to skew vertically in degrees.\n   * @return {Matrix2D} This matrix. Useful for chaining method calls.\n  */\n\n\n  p.skew = function (skewX, skewY) {\n    skewX = skewX * Matrix2D.DEG_TO_RAD;\n    skewY = skewY * Matrix2D.DEG_TO_RAD;\n    this.append(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), 0, 0);\n    return this;\n  };\n  /**\n   * Applies a scale transformation to the matrix.\n   * @method scale\n   * @param {Number} x The amount to scale horizontally. E.G. a value of 2 will double the size in the X direction, and 0.5 will halve it.\n   * @param {Number} y The amount to scale vertically.\n   * @return {Matrix2D} This matrix. Useful for chaining method calls.\n   **/\n\n\n  p.scale = function (x, y) {\n    this.a *= x;\n    this.b *= x;\n    this.c *= y;\n    this.d *= y; //this.tx *= x;\n    //this.ty *= y;\n\n    return this;\n  };\n  /**\n   * Translates the matrix on the x and y axes.\n   * @method translate\n   * @param {Number} x\n   * @param {Number} y\n   * @return {Matrix2D} This matrix. Useful for chaining method calls.\n   **/\n\n\n  p.translate = function (x, y) {\n    this.tx += this.a * x + this.c * y;\n    this.ty += this.b * x + this.d * y;\n    return this;\n  };\n  /**\n   * Sets the properties of the matrix to those of an identity matrix (one that applies a null transformation).\n   * @method identity\n   * @return {Matrix2D} This matrix. Useful for chaining method calls.\n   **/\n\n\n  p.identity = function () {\n    this.a = this.d = 1;\n    this.b = this.c = this.tx = this.ty = 0;\n    return this;\n  };\n  /**\n   * Inverts the matrix, causing it to perform the opposite transformation.\n   * @method invert\n   * @return {Matrix2D} This matrix. Useful for chaining method calls.\n   **/\n\n\n  p.invert = function () {\n    var a1 = this.a;\n    var b1 = this.b;\n    var c1 = this.c;\n    var d1 = this.d;\n    var tx1 = this.tx;\n    var n = a1 * d1 - b1 * c1;\n    this.a = d1 / n;\n    this.b = -b1 / n;\n    this.c = -c1 / n;\n    this.d = a1 / n;\n    this.tx = (c1 * this.ty - d1 * tx1) / n;\n    this.ty = -(a1 * this.ty - b1 * tx1) / n;\n    return this;\n  };\n  /**\n   * Returns true if the matrix is an identity matrix.\n   * @method isIdentity\n   * @return {Boolean}\n   **/\n\n\n  p.isIdentity = function () {\n    return this.tx === 0 && this.ty === 0 && this.a === 1 && this.b === 0 && this.c === 0 && this.d === 1;\n  };\n  /**\n   * Returns true if this matrix is equal to the specified matrix (all property values are equal).\n   * @method equals\n   * @param {Matrix2D} matrix The matrix to compare.\n   * @return {Boolean}\n   **/\n\n\n  p.equals = function (matrix) {\n    return this.tx === matrix.tx && this.ty === matrix.ty && this.a === matrix.a && this.b === matrix.b && this.c === matrix.c && this.d === matrix.d;\n  };\n  /**\n   * Transforms a point according to this matrix.\n   * @method transformPoint\n   * @param {Number} x The x component of the point to transform.\n   * @param {Number} y The y component of the point to transform.\n   * @param {Point | Object} [pt] An object to copy the result into. If omitted a generic object with x/y properties will be returned.\n   * @return {Point} This matrix. Useful for chaining method calls.\n   **/\n\n\n  p.transformPoint = function (x, y, pt) {\n    pt = pt || {};\n    pt.x = x * this.a + y * this.c + this.tx;\n    pt.y = x * this.b + y * this.d + this.ty;\n    return pt;\n  };\n  /**\n   * Decomposes the matrix into transform properties (x, y, scaleX, scaleY, and rotation). Note that these values\n   * may not match the transform properties you used to generate the matrix, though they will produce the same visual\n   * results.\n   * @method decompose\n   * @param {Object} target The object to apply the transform properties to. If null, then a new object will be returned.\n   * @return {Object} The target, or a new generic object with the transform properties applied.\n  */\n\n\n  p.decompose = function (target) {\n    // TODO: it would be nice to be able to solve for whether the matrix can be decomposed into only scale/rotation even when scale is negative\n    if (target == null) {\n      target = {};\n    }\n\n    target.x = this.tx;\n    target.y = this.ty;\n    target.scaleX = Math.sqrt(this.a * this.a + this.b * this.b);\n    target.scaleY = Math.sqrt(this.c * this.c + this.d * this.d);\n    var skewX = Math.atan2(-this.c, this.d);\n    var skewY = Math.atan2(this.b, this.a);\n    var delta = Math.abs(1 - skewX / skewY);\n\n    if (delta < 0.00001) {\n      // effectively identical, can use rotation:\n      target.rotation = skewY / Matrix2D.DEG_TO_RAD;\n\n      if (this.a < 0 && this.d >= 0) {\n        target.rotation += target.rotation <= 0 ? 180 : -180;\n      }\n\n      target.skewX = target.skewY = 0;\n    } else {\n      target.skewX = skewX / Matrix2D.DEG_TO_RAD;\n      target.skewY = skewY / Matrix2D.DEG_TO_RAD;\n    }\n\n    return target;\n  };\n  /**\n   * Copies all properties from the specified matrix to this matrix.\n   * @method copy\n   * @param {Matrix2D} matrix The matrix to copy properties from.\n   * @return {Matrix2D} This matrix. Useful for chaining method calls.\n  */\n\n\n  p.copy = function (matrix) {\n    return this.setValues(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);\n  };\n  /**\n   * Returns a clone of the Matrix2D instance.\n   * @method clone\n   * @return {Matrix2D} a clone of the Matrix2D instance.\n   **/\n\n\n  p.clone = function () {\n    return new Matrix2D(this.a, this.b, this.c, this.d, this.tx, this.ty);\n  };\n  /**\n   * Returns a string representation of this object.\n   * @method toString\n   * @return {String} a string representation of the instance.\n   **/\n\n\n  p.toString = function () {\n    return \"[Matrix2D (a=\" + this.a + \" b=\" + this.b + \" c=\" + this.c + \" d=\" + this.d + \" tx=\" + this.tx + \" ty=\" + this.ty + \")]\";\n  }; // this has to be populated after the class is defined:\n\n\n  Matrix2D.identity = new Matrix2D();\n  createjs.Matrix2D = Matrix2D;\n})(); //##############################################################################\n// DisplayProps.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\";\n  /**\n   * Used for calculating and encapsulating display related properties.\n   * @class DisplayProps\n   * @param {Number} [visible=true] Visible value.\n   * @param {Number} [alpha=1] Alpha value.\n   * @param {Number} [shadow=null] A Shadow instance or null.\n   * @param {Number} [compositeOperation=null] A compositeOperation value or null.\n   * @param {Number} [matrix] A transformation matrix. Defaults to a new identity matrix.\n   * @constructor\n   **/\n\n  function DisplayProps(visible, alpha, shadow, compositeOperation, matrix) {\n    this.setValues(visible, alpha, shadow, compositeOperation, matrix); // public properties:\n    // assigned in the setValues method.\n\n    /**\n     * Property representing the alpha that will be applied to a display object.\n     * @property alpha\n     * @type Number\n     **/\n\n    /**\n     * Property representing the shadow that will be applied to a display object.\n     * @property shadow\n     * @type Shadow\n     **/\n\n    /**\n     * Property representing the compositeOperation that will be applied to a display object.\n     * You can find a list of valid composite operations at:\n     * <a href=\"https://developer.mozilla.org/en/Canvas_tutorial/Compositing\">https://developer.mozilla.org/en/Canvas_tutorial/Compositing</a>\n     * @property compositeOperation\n     * @type String\n     **/\n\n    /**\n     * Property representing the value for visible that will be applied to a display object.\n     * @property visible\n     * @type Boolean\n     **/\n\n    /**\n     * The transformation matrix that will be applied to a display object.\n     * @property matrix\n     * @type Matrix2D\n     **/\n  }\n\n  var p = DisplayProps.prototype; // initialization:\n\n  /**\n   * Reinitializes the instance with the specified values.\n   * @method setValues\n   * @param {Number} [visible=true] Visible value.\n   * @param {Number} [alpha=1] Alpha value.\n   * @param {Number} [shadow=null] A Shadow instance or null.\n   * @param {Number} [compositeOperation=null] A compositeOperation value or null.\n   * @param {Number} [matrix] A transformation matrix. Defaults to an identity matrix.\n   * @return {DisplayProps} This instance. Useful for chaining method calls.\n   * @chainable\n  */\n\n  p.setValues = function (visible, alpha, shadow, compositeOperation, matrix) {\n    this.visible = visible == null ? true : !!visible;\n    this.alpha = alpha == null ? 1 : alpha;\n    this.shadow = shadow;\n    this.compositeOperation = compositeOperation;\n    this.matrix = matrix || this.matrix && this.matrix.identity() || new createjs.Matrix2D();\n    return this;\n  }; // public methods:\n\n  /**\n   * Appends the specified display properties. This is generally used to apply a child's properties its parent's.\n   * @method append\n   * @param {Boolean} visible desired visible value\n   * @param {Number} alpha desired alpha value\n   * @param {Shadow} shadow desired shadow value\n   * @param {String} compositeOperation desired composite operation value\n   * @param {Matrix2D} [matrix] a Matrix2D instance\n   * @return {DisplayProps} This instance. Useful for chaining method calls.\n   * @chainable\n  */\n\n\n  p.append = function (visible, alpha, shadow, compositeOperation, matrix) {\n    this.alpha *= alpha;\n    this.shadow = shadow || this.shadow;\n    this.compositeOperation = compositeOperation || this.compositeOperation;\n    this.visible = this.visible && visible;\n    matrix && this.matrix.appendMatrix(matrix);\n    return this;\n  };\n  /**\n   * Prepends the specified display properties. This is generally used to apply a parent's properties to a child's.\n   * For example, to get the combined display properties that would be applied to a child, you could use:\n   * \n   * \tvar o = myDisplayObject;\n   * \tvar props = new createjs.DisplayProps();\n   * \tdo {\n   * \t\t// prepend each parent's props in turn:\n   * \t\tprops.prepend(o.visible, o.alpha, o.shadow, o.compositeOperation, o.getMatrix());\n   * \t} while (o = o.parent);\n   * \t\n   * @method prepend\n   * @param {Boolean} visible desired visible value\n   * @param {Number} alpha desired alpha value\n   * @param {Shadow} shadow desired shadow value\n   * @param {String} compositeOperation desired composite operation value\n   * @param {Matrix2D} [matrix] a Matrix2D instance\n   * @return {DisplayProps} This instance. Useful for chaining method calls.\n   * @chainable\n  */\n\n\n  p.prepend = function (visible, alpha, shadow, compositeOperation, matrix) {\n    this.alpha *= alpha;\n    this.shadow = this.shadow || shadow;\n    this.compositeOperation = this.compositeOperation || compositeOperation;\n    this.visible = this.visible && visible;\n    matrix && this.matrix.prependMatrix(matrix);\n    return this;\n  };\n  /**\n   * Resets this instance and its matrix to default values.\n   * @method identity\n   * @return {DisplayProps} This instance. Useful for chaining method calls.\n   * @chainable\n  */\n\n\n  p.identity = function () {\n    this.visible = true;\n    this.alpha = 1;\n    this.shadow = this.compositeOperation = null;\n    this.matrix.identity();\n    return this;\n  };\n  /**\n   * Returns a clone of the DisplayProps instance. Clones the associated matrix.\n   * @method clone\n   * @return {DisplayProps} a clone of the DisplayProps instance.\n   **/\n\n\n  p.clone = function () {\n    return new DisplayProps(this.alpha, this.shadow, this.compositeOperation, this.visible, this.matrix.clone());\n  }; // private methods:\n\n\n  createjs.DisplayProps = DisplayProps;\n})(); //##############################################################################\n// Point.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor:\n\n  /**\n   * Represents a point on a 2 dimensional x / y coordinate system.\n   *\n   * <h4>Example</h4>\n   * \n   *      var point = new createjs.Point(0, 100);\n   * \n   * @class Point\n   * @param {Number} [x=0] X position.\n   * @param {Number} [y=0] Y position.\n   * @constructor\n   **/\n\n  function Point(x, y) {\n    this.setValues(x, y); // public properties:\n    // assigned in the setValues method.\n\n    /**\n     * X position.\n     * @property x\n     * @type Number\n     **/\n\n    /**\n     * Y position.\n     * @property y\n     * @type Number\n     **/\n  }\n\n  var p = Point.prototype;\n  /**\n   * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n   * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n   * for details.\n   *\n   * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n   *\n   * @method initialize\n   * @protected\n   * @deprecated\n   */\n  // p.initialize = function() {}; // searchable for devs wondering where it is.\n  // public methods:\n\n  /** \n   * Sets the specified values on this instance.\n   * @method setValues\n   * @param {Number} [x=0] X position.\n   * @param {Number} [y=0] Y position.\n   * @return {Point} This instance. Useful for chaining method calls.\n   * @chainable\n  */\n\n  p.setValues = function (x, y) {\n    this.x = x || 0;\n    this.y = y || 0;\n    return this;\n  };\n  /**\n   * Copies all properties from the specified point to this point.\n   * @method copy\n   * @param {Point} point The point to copy properties from.\n   * @return {Point} This point. Useful for chaining method calls.\n   * @chainable\n  */\n\n\n  p.copy = function (point) {\n    this.x = point.x;\n    this.y = point.y;\n    return this;\n  };\n  /**\n   * Returns a clone of the Point instance.\n   * @method clone\n   * @return {Point} a clone of the Point instance.\n   **/\n\n\n  p.clone = function () {\n    return new Point(this.x, this.y);\n  };\n  /**\n   * Returns a string representation of this object.\n   * @method toString\n   * @return {String} a string representation of the instance.\n   **/\n\n\n  p.toString = function () {\n    return \"[Point (x=\" + this.x + \" y=\" + this.y + \")]\";\n  };\n\n  createjs.Point = Point;\n})(); //##############################################################################\n// Rectangle.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor:\n\n  /**\n   * Represents a rectangle as defined by the points (x, y) and (x+width, y+height).\n   *\n   * <h4>Example</h4>\n   *\n   *      var rect = new createjs.Rectangle(0, 0, 100, 100);\n   *\n   * @class Rectangle\n   * @param {Number} [x=0] X position.\n   * @param {Number} [y=0] Y position.\n   * @param {Number} [width=0] The width of the Rectangle.\n   * @param {Number} [height=0] The height of the Rectangle.\n   * @constructor\n   **/\n\n  function Rectangle(x, y, width, height) {\n    this.setValues(x, y, width, height); // public properties:\n    // assigned in the setValues method.\n\n    /**\n     * X position.\n     * @property x\n     * @type Number\n     **/\n\n    /**\n     * Y position.\n     * @property y\n     * @type Number\n     **/\n\n    /**\n     * Width.\n     * @property width\n     * @type Number\n     **/\n\n    /**\n     * Height.\n     * @property height\n     * @type Number\n     **/\n  }\n\n  var p = Rectangle.prototype;\n  /**\n   * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n   * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n   * for details.\n   *\n   * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n   *\n   * @method initialize\n   * @protected\n   * @deprecated\n   */\n  // p.initialize = function() {}; // searchable for devs wondering where it is.\n  // public methods:\n\n  /** \n   * Sets the specified values on this instance.\n   * @method setValues\n   * @param {Number} [x=0] X position.\n   * @param {Number} [y=0] Y position.\n   * @param {Number} [width=0] The width of the Rectangle.\n   * @param {Number} [height=0] The height of the Rectangle.\n   * @return {Rectangle} This instance. Useful for chaining method calls.\n   * @chainable\n  */\n\n  p.setValues = function (x, y, width, height) {\n    // don't forget to update docs in the constructor if these change:\n    this.x = x || 0;\n    this.y = y || 0;\n    this.width = width || 0;\n    this.height = height || 0;\n    return this;\n  };\n  /** \n   * Extends the rectangle's bounds to include the described point or rectangle.\n   * @method extend\n   * @param {Number} x X position of the point or rectangle.\n   * @param {Number} y Y position of the point or rectangle.\n   * @param {Number} [width=0] The width of the rectangle.\n   * @param {Number} [height=0] The height of the rectangle.\n   * @return {Rectangle} This instance. Useful for chaining method calls.\n   * @chainable\n  */\n\n\n  p.extend = function (x, y, width, height) {\n    width = width || 0;\n    height = height || 0;\n\n    if (x + width > this.x + this.width) {\n      this.width = x + width - this.x;\n    }\n\n    if (y + height > this.y + this.height) {\n      this.height = y + height - this.y;\n    }\n\n    if (x < this.x) {\n      this.width += this.x - x;\n      this.x = x;\n    }\n\n    if (y < this.y) {\n      this.height += this.y - y;\n      this.y = y;\n    }\n\n    return this;\n  };\n  /** \n   * Adds the specified padding to the rectangle's bounds.\n   * @method pad\n   * @param {Number} top\n   * @param {Number} left\n   * @param {Number} right\n   * @param {Number} bottom\n   * @return {Rectangle} This instance. Useful for chaining method calls.\n   * @chainable\n  */\n\n\n  p.pad = function (top, left, bottom, right) {\n    this.x -= left;\n    this.y -= top;\n    this.width += left + right;\n    this.height += top + bottom;\n    return this;\n  };\n  /**\n   * Copies all properties from the specified rectangle to this rectangle.\n   * @method copy\n   * @param {Rectangle} rectangle The rectangle to copy properties from.\n   * @return {Rectangle} This rectangle. Useful for chaining method calls.\n   * @chainable\n  */\n\n\n  p.copy = function (rectangle) {\n    return this.setValues(rectangle.x, rectangle.y, rectangle.width, rectangle.height);\n  };\n  /** \n   * Returns true if this rectangle fully encloses the described point or rectangle.\n   * @method contains\n   * @param {Number} x X position of the point or rectangle.\n   * @param {Number} y Y position of the point or rectangle.\n   * @param {Number} [width=0] The width of the rectangle.\n   * @param {Number} [height=0] The height of the rectangle.\n   * @return {Boolean} True if the described point or rectangle is contained within this rectangle.\n  */\n\n\n  p.contains = function (x, y, width, height) {\n    width = width || 0;\n    height = height || 0;\n    return x >= this.x && x + width <= this.x + this.width && y >= this.y && y + height <= this.y + this.height;\n  };\n  /** \n   * Returns a new rectangle which contains this rectangle and the specified rectangle.\n   * @method union\n   * @param {Rectangle} rect The rectangle to calculate a union with.\n   * @return {Rectangle} A new rectangle describing the union.\n  */\n\n\n  p.union = function (rect) {\n    return this.clone().extend(rect.x, rect.y, rect.width, rect.height);\n  };\n  /** \n   * Returns a new rectangle which describes the intersection (overlap) of this rectangle and the specified rectangle,\n   * or null if they do not intersect.\n   * @method intersection\n   * @param {Rectangle} rect The rectangle to calculate an intersection with.\n   * @return {Rectangle} A new rectangle describing the intersection or null.\n  */\n\n\n  p.intersection = function (rect) {\n    var x1 = rect.x,\n        y1 = rect.y,\n        x2 = x1 + rect.width,\n        y2 = y1 + rect.height;\n\n    if (this.x > x1) {\n      x1 = this.x;\n    }\n\n    if (this.y > y1) {\n      y1 = this.y;\n    }\n\n    if (this.x + this.width < x2) {\n      x2 = this.x + this.width;\n    }\n\n    if (this.y + this.height < y2) {\n      y2 = this.y + this.height;\n    }\n\n    return x2 <= x1 || y2 <= y1 ? null : new Rectangle(x1, y1, x2 - x1, y2 - y1);\n  };\n  /** \n   * Returns true if the specified rectangle intersects (has any overlap) with this rectangle.\n   * @method intersects\n   * @param {Rectangle} rect The rectangle to compare.\n   * @return {Boolean} True if the rectangles intersect.\n  */\n\n\n  p.intersects = function (rect) {\n    return rect.x <= this.x + this.width && this.x <= rect.x + rect.width && rect.y <= this.y + this.height && this.y <= rect.y + rect.height;\n  };\n  /** \n   * Returns true if the width or height are equal or less than 0.\n   * @method isEmpty\n   * @return {Boolean} True if the rectangle is empty.\n  */\n\n\n  p.isEmpty = function () {\n    return this.width <= 0 || this.height <= 0;\n  };\n  /**\n   * Returns a clone of the Rectangle instance.\n   * @method clone\n   * @return {Rectangle} a clone of the Rectangle instance.\n   **/\n\n\n  p.clone = function () {\n    return new Rectangle(this.x, this.y, this.width, this.height);\n  };\n  /**\n   * Returns a string representation of this object.\n   * @method toString\n   * @return {String} a string representation of the instance.\n   **/\n\n\n  p.toString = function () {\n    return \"[Rectangle (x=\" + this.x + \" y=\" + this.y + \" width=\" + this.width + \" height=\" + this.height + \")]\";\n  };\n\n  createjs.Rectangle = Rectangle;\n})(); //##############################################################################\n// ButtonHelper.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor:\n\n  /**\n   * The ButtonHelper is a helper class to create interactive buttons from {{#crossLink \"MovieClip\"}}{{/crossLink}} or\n   * {{#crossLink \"Sprite\"}}{{/crossLink}} instances. This class will intercept mouse events from an object, and\n   * automatically call {{#crossLink \"Sprite/gotoAndStop\"}}{{/crossLink}} or {{#crossLink \"Sprite/gotoAndPlay\"}}{{/crossLink}},\n   * to the respective animation labels, add a pointer cursor, and allows the user to define a hit state frame.\n   *\n   * The ButtonHelper instance does not need to be added to the stage, but a reference should be maintained to prevent\n   * garbage collection.\n   * \n   * Note that over states will not work unless you call {{#crossLink \"Stage/enableMouseOver\"}}{{/crossLink}}.\n   *\n   * <h4>Example</h4>\n   *\n   *      var helper = new createjs.ButtonHelper(myInstance, \"out\", \"over\", \"down\", false, myInstance, \"hit\");\n   *      myInstance.addEventListener(\"click\", handleClick);\n   *      function handleClick(event) {\n   *          // Click Happened.\n   *      }\n   *\n   * @class ButtonHelper\n   * @param {Sprite|MovieClip} target The instance to manage.\n   * @param {String} [outLabel=\"out\"] The label or animation to go to when the user rolls out of the button.\n   * @param {String} [overLabel=\"over\"] The label or animation to go to when the user rolls over the button.\n   * @param {String} [downLabel=\"down\"] The label or animation to go to when the user presses the button.\n   * @param {Boolean} [play=false] If the helper should call \"gotoAndPlay\" or \"gotoAndStop\" on the button when changing\n   * states.\n   * @param {DisplayObject} [hitArea] An optional item to use as the hit state for the button. If this is not defined,\n   * then the button's visible states will be used instead. Note that the same instance as the \"target\" argument can be\n   * used for the hitState.\n   * @param {String} [hitLabel] The label or animation on the hitArea instance that defines the hitArea bounds. If this is\n   * null, then the default state of the hitArea will be used. *\n   * @constructor\n   */\n\n  function ButtonHelper(target, outLabel, overLabel, downLabel, play, hitArea, hitLabel) {\n    if (!target.addEventListener) {\n      return;\n    } // public properties:\n\n    /**\n     * The target for this button helper.\n     * @property target\n     * @type MovieClip | Sprite\n     * @readonly\n     **/\n\n\n    this.target = target;\n    /**\n     * The label name or frame number to display when the user mouses out of the target. Defaults to \"over\".\n     * @property overLabel\n     * @type String | Number\n     **/\n\n    this.overLabel = overLabel == null ? \"over\" : overLabel;\n    /**\n     * The label name or frame number to display when the user mouses over the target. Defaults to \"out\".\n     * @property outLabel\n     * @type String | Number\n     **/\n\n    this.outLabel = outLabel == null ? \"out\" : outLabel;\n    /**\n     * The label name or frame number to display when the user presses on the target. Defaults to \"down\".\n     * @property downLabel\n     * @type String | Number\n     **/\n\n    this.downLabel = downLabel == null ? \"down\" : downLabel;\n    /**\n     * If true, then ButtonHelper will call gotoAndPlay, if false, it will use gotoAndStop. Default is false.\n     * @property play\n     * @default false\n     * @type Boolean\n     **/\n\n    this.play = play; //  private properties\n\n    /**\n     * @property _isPressed\n     * @type Boolean\n     * @protected\n     **/\n\n    this._isPressed = false;\n    /**\n     * @property _isOver\n     * @type Boolean\n     * @protected\n     **/\n\n    this._isOver = false;\n    /**\n     * @property _enabled\n     * @type Boolean\n     * @protected\n     **/\n\n    this._enabled = false; // setup:\n\n    target.mouseChildren = false; // prevents issues when children are removed from the display list when state changes.\n\n    this.enabled = true;\n    this.handleEvent({});\n\n    if (hitArea) {\n      if (hitLabel) {\n        hitArea.actionsEnabled = false;\n        hitArea.gotoAndStop && hitArea.gotoAndStop(hitLabel);\n      }\n\n      target.hitArea = hitArea;\n    }\n  }\n\n  var p = ButtonHelper.prototype;\n  /**\n   * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n   * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n   * for details.\n   *\n   * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n   *\n   * @method initialize\n   * @protected\n   * @deprecated\n   */\n  // p.initialize = function() {}; // searchable for devs wondering where it is.\n  // getter / setters:\n\n  /**\n   * Use the {{#crossLink \"ButtonHelper/enabled:property\"}}{{/crossLink}} property instead.\n   * @method setEnabled\n   * @param {Boolean} value\n   * @deprecated\n   **/\n\n  p.setEnabled = function (value) {\n    // TODO: deprecated.\n    if (value == this._enabled) {\n      return;\n    }\n\n    var o = this.target;\n    this._enabled = value;\n\n    if (value) {\n      o.cursor = \"pointer\";\n      o.addEventListener(\"rollover\", this);\n      o.addEventListener(\"rollout\", this);\n      o.addEventListener(\"mousedown\", this);\n      o.addEventListener(\"pressup\", this);\n\n      if (o._reset) {\n        o.__reset = o._reset;\n        o._reset = this._reset;\n      }\n    } else {\n      o.cursor = null;\n      o.removeEventListener(\"rollover\", this);\n      o.removeEventListener(\"rollout\", this);\n      o.removeEventListener(\"mousedown\", this);\n      o.removeEventListener(\"pressup\", this);\n\n      if (o.__reset) {\n        o._reset = o.__reset;\n        delete o.__reset;\n      }\n    }\n  };\n  /**\n   * Use the {{#crossLink \"ButtonHelper/enabled:property\"}}{{/crossLink}} property instead.\n   * @method getEnabled\n   * @return {Boolean}\n   * @deprecated\n   **/\n\n\n  p.getEnabled = function () {\n    return this._enabled;\n  };\n  /**\n   * Enables or disables the button functionality on the target.\n   * @property enabled\n   * @type {Boolean}\n   **/\n\n\n  try {\n    Object.defineProperties(p, {\n      enabled: {\n        get: p.getEnabled,\n        set: p.setEnabled\n      }\n    });\n  } catch (e) {} // TODO: use Log\n  // public methods:\n\n  /**\n   * Returns a string representation of this object.\n   * @method toString\n   * @return {String} a string representation of the instance.\n   **/\n\n\n  p.toString = function () {\n    return \"[ButtonHelper]\";\n  }; // private methods:\n\n  /**\n   * @method handleEvent\n   * @param {Object} evt The mouse event to handle.\n   * @protected\n   **/\n\n\n  p.handleEvent = function (evt) {\n    var label,\n        t = this.target,\n        type = evt.type;\n\n    if (type == \"mousedown\") {\n      this._isPressed = true;\n      label = this.downLabel;\n    } else if (type == \"pressup\") {\n      this._isPressed = false;\n      label = this._isOver ? this.overLabel : this.outLabel;\n    } else if (type == \"rollover\") {\n      this._isOver = true;\n      label = this._isPressed ? this.downLabel : this.overLabel;\n    } else {\n      // rollout and default\n      this._isOver = false;\n      label = this._isPressed ? this.overLabel : this.outLabel;\n    }\n\n    if (this.play) {\n      t.gotoAndPlay && t.gotoAndPlay(label);\n    } else {\n      t.gotoAndStop && t.gotoAndStop(label);\n    }\n  };\n  /**\n   * Injected into target. Preserves the paused state through a reset.\n   * @method _reset\n   * @protected\n   **/\n\n\n  p._reset = function () {\n    // TODO: explore better ways to handle this issue. This is hacky & disrupts object signatures.\n    var p = this.paused;\n\n    this.__reset();\n\n    this.paused = p;\n  };\n\n  createjs.ButtonHelper = ButtonHelper;\n})(); //##############################################################################\n// Shadow.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor:\n\n  /**\n   * This class encapsulates the properties required to define a shadow to apply to a {{#crossLink \"DisplayObject\"}}{{/crossLink}}\n   * via its <code>shadow</code> property.\n   *\n   * <h4>Example</h4>\n   *\n   *      myImage.shadow = new createjs.Shadow(\"#000000\", 5, 5, 10);\n   *\n   * @class Shadow\n   * @constructor\n   * @param {String} color The color of the shadow. This can be any valid CSS color value.\n   * @param {Number} offsetX The x offset of the shadow in pixels.\n   * @param {Number} offsetY The y offset of the shadow in pixels.\n   * @param {Number} blur The size of the blurring effect.\n   **/\n\n  function Shadow(color, offsetX, offsetY, blur) {\n    // public properties:\n\n    /** \n     * The color of the shadow. This can be any valid CSS color value.\n     * @property color\n     * @type String\n     * @default null\n     */\n    this.color = color || \"black\";\n    /** The x offset of the shadow.\n     * @property offsetX\n     * @type Number\n     * @default 0\n     */\n\n    this.offsetX = offsetX || 0;\n    /** The y offset of the shadow.\n     * @property offsetY\n     * @type Number\n     * @default 0\n     */\n\n    this.offsetY = offsetY || 0;\n    /** The blur of the shadow.\n     * @property blur\n     * @type Number\n     * @default 0\n     */\n\n    this.blur = blur || 0;\n  }\n\n  var p = Shadow.prototype;\n  /**\n   * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n   * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n   * for details.\n   *\n   * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n   *\n   * @method initialize\n   * @protected\n   * @deprecated\n   */\n  // p.initialize = function() {}; // searchable for devs wondering where it is.\n  // static public properties:\n\n  /**\n   * An identity shadow object (all properties are set to 0).\n   * @property identity\n   * @type Shadow\n   * @static\n   * @final\n   * @readonly\n   **/\n\n  Shadow.identity = new Shadow(\"transparent\", 0, 0, 0); // public methods:\n\n  /**\n   * Returns a string representation of this object.\n   * @method toString\n   * @return {String} a string representation of the instance.\n   **/\n\n  p.toString = function () {\n    return \"[Shadow]\";\n  };\n  /**\n   * Returns a clone of this Shadow instance.\n   * @method clone\n   * @return {Shadow} A clone of the current Shadow instance.\n   **/\n\n\n  p.clone = function () {\n    return new Shadow(this.color, this.offsetX, this.offsetY, this.blur);\n  };\n\n  createjs.Shadow = Shadow;\n})(); //##############################################################################\n// SpriteSheet.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor:\n\n  /**\n   * Encapsulates the properties and methods associated with a sprite sheet. A sprite sheet is a series of images (usually\n   * animation frames) combined into a larger image (or images). For example, an animation consisting of eight 100x100\n   * images could be combined into a single 400x200 sprite sheet (4 frames across by 2 high).\n   *\n   * The data passed to the SpriteSheet constructor defines:\n   * <ol>\n   * \t<li> The source image or images to use.</li>\n   * \t<li> The positions of individual image frames.</li>\n   * \t<li> Sequences of frames that form named animations. Optional.</li>\n   * \t<li> The target playback framerate. Optional.</li>\n   * </ol>\n   * <h3>SpriteSheet Format</h3>\n   * SpriteSheets are an object with two required properties (`images` and `frames`), and two optional properties\n   * (`framerate` and `animations`). This makes them easy to define in javascript code, or in JSON.\n   *\n   * <h4>images</h4>\n   * An array of source images. Images can be either an HTMlimage\n   * instance, or a uri to an image. The former is recommended to control preloading.\n   *\n   * \timages: [image1, \"path/to/image2.png\"],\n   *\n   * <h4>frames</h4>\n   * Defines the individual frames. There are two supported formats for frame data:\n   * When all of the frames are the same size (in a grid), use an object with `width`, `height`, `regX`, `regY`,\n   * and `count` properties.\n   *\n   * <ul>\n   *  <li>`width` & `height` are required and specify the dimensions of the frames</li>\n   *  <li>`regX` & `regY` indicate the registration point or \"origin\" of the frames</li>\n   *  <li>`spacing` indicate the spacing between frames</li>\n   *  <li>`margin` specify the margin around the image(s)</li>\n   *  <li>`count` allows you to specify the total number of frames in the spritesheet; if omitted, this will\n   *  be calculated based on the dimensions of the source images and the frames. Frames will be assigned\n   *  indexes based on their position in the source images (left to right, top to bottom).</li>\n   * </ul>\n   *\n   *  \tframes: {width:64, height:64, count:20, regX: 32, regY:64, spacing:0, margin:0}\n   *\n   * If the frames are of different sizes, use an array of frame definitions. Each definition is itself an array\n   * with 4 required and 3 optional entries, in the order:\n   *\n   * <ul>\n   *  <li>The first four, `x`, `y`, `width`, and `height` are required and define the frame rectangle.</li>\n   *  <li>The fifth, `imageIndex`, specifies the index of the source image (defaults to 0)</li>\n   *  <li>The last two, `regX` and `regY` specify the registration point of the frame</li>\n   * </ul>\n   *\n   * \tframes: [\n   * \t\t// x, y, width, height, imageIndex*, regX*, regY*\n   * \t\t[64, 0, 96, 64],\n   * \t\t[0, 0, 64, 64, 1, 32, 32]\n   * \t\t// etc.\n   * \t]\n   *\n   * <h4>animations</h4>\n   * Optional. An object defining sequences of frames to play as named animations. Each property corresponds to an\n   * animation of the same name. Each animation must specify the frames to play, and may\n   * also include a relative playback `speed` (ex. 2 would playback at double speed, 0.5 at half), and\n   * the name of the `next` animation to sequence to after it completes.\n   *\n   * There are three formats supported for defining the frames in an animation, which can be mixed and matched as appropriate:\n   * <ol>\n   * \t<li>for a single frame animation, you can simply specify the frame index\n   *\n   * \t\tanimations: {\n   * \t\t\tsit: 7\n   * \t\t}\n   *\n   * </li>\n   * <li>\n   *      for an animation of consecutive frames, you can use an array with two required, and two optional entries\n   * \t\tin the order: `start`, `end`, `next`, and `speed`. This will play the frames from start to end inclusive.\n   *\n   * \t\tanimations: {\n   * \t\t\t// start, end, next*, speed*\n   * \t\t\trun: [0, 8],\n   * \t\t\tjump: [9, 12, \"run\", 2]\n   * \t\t}\n   *\n   *  </li>\n   *  <li>\n   *     for non-consecutive frames, you can use an object with a `frames` property defining an array of frame\n   *     indexes to play in order. The object can also specify `next` and `speed` properties.\n   *\n   * \t\tanimations: {\n   * \t\t\twalk: {\n   * \t\t\t\tframes: [1,2,3,3,2,1]\n   * \t\t\t},\n   * \t\t\tshoot: {\n   * \t\t\t\tframes: [1,4,5,6],\n   * \t\t\t\tnext: \"walk\",\n   * \t\t\t\tspeed: 0.5\n   * \t\t\t}\n   * \t\t}\n   *\n   *  </li>\n   * </ol>\n   * <strong>Note:</strong> the `speed` property was added in EaselJS 0.7.0. Earlier versions had a `frequency`\n   * property instead, which was the inverse of `speed`. For example, a value of \"4\" would be 1/4 normal speed in\n   * earlier versions, but is 4x normal speed in EaselJS 0.7.0+.\n   *\n   * <h4>framerate</h4>\n   * Optional. Indicates the default framerate to play this spritesheet at in frames per second. See\n   * {{#crossLink \"SpriteSheet/framerate:property\"}}{{/crossLink}} for more information.\n   *\n   * \t\tframerate: 20\n   *\n   * Note that the Sprite framerate will only work if the stage update method is provided with the {{#crossLink \"Ticker/tick:event\"}}{{/crossLink}}\n   * event generated by the {{#crossLink \"Ticker\"}}{{/crossLink}}.\n   *\n   * \t\tcreatejs.Ticker.on(\"tick\", handleTick);\n   * \t\tfunction handleTick(event) {\n   *\t\t\tstage.update(event);\n   *\t\t}\n   *\n   * <h3>Example</h3>\n   * To define a simple sprite sheet, with a single image \"sprites.jpg\" arranged in a regular 50x50 grid with three\n   * animations: \"stand\" showing the first frame, \"run\" looping frame 1-5 inclusive, and \"jump\" playing frame 6-8 and\n   * sequencing back to run.\n   *\n   * \t\tvar data = {\n   * \t\t\timages: [\"sprites.jpg\"],\n   * \t\t\tframes: {width:50, height:50},\n   * \t\t\tanimations: {\n   * \t\t\t\tstand:0,\n   * \t\t\t\trun:[1,5],\n   * \t\t\t\tjump:[6,8,\"run\"]\n   * \t\t\t}\n   * \t\t};\n   * \t\tvar spriteSheet = new createjs.SpriteSheet(data);\n   * \t\tvar animation = new createjs.Sprite(spriteSheet, \"run\");\n   *\n   * <h3>Generating SpriteSheet Images</h3>\n   * Spritesheets can be created manually by combining images in PhotoShop, and specifying the frame size or\n   * coordinates manually, however there are a number of tools that facilitate this.\n   * <ul>\n   *     <li>Exporting SpriteSheets or HTML5 content from Flash Pro supports the EaselJS SpriteSheet format.</li>\n   *     <li>The popular <a href=\"https://www.codeandweb.com/texturepacker/easeljs\" target=\"_blank\">Texture Packer</a> has\n   *     EaselJS support.\n   *     <li>SWF animations in Flash can be exported to SpriteSheets using <a href=\"http://createjs.com/zoe\" target=\"_blank\"></a></li>\n   * </ul>\n   *\n   * <h3>Cross Origin Issues</h3>\n   * <strong>Warning:</strong> Images loaded cross-origin will throw cross-origin security errors when interacted with\n   * using:\n   * <ul>\n   *     <li>a mouse</li>\n   *     <li>methods such as {{#crossLink \"Container/getObjectUnderPoint\"}}{{/crossLink}}</li>\n   *     <li>Filters (see {{#crossLink \"Filter\"}}{{/crossLink}})</li>\n   *     <li>caching (see {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}})</li>\n   * </ul>\n   * You can get around this by setting `crossOrigin` property on your images before passing them to EaselJS, or\n   * setting the `crossOrigin` property on PreloadJS' LoadQueue or LoadItems.\n   *\n   * \t\tvar image = new Image();\n   * \t\timg.crossOrigin=\"Anonymous\";\n   * \t\timg.src = \"http://server-with-CORS-support.com/path/to/image.jpg\";\n   *\n   * If you pass string paths to SpriteSheets, they will not work cross-origin. The server that stores the image must\n   * support cross-origin requests, or this will not work. For more information, check out\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\" target=\"_blank\">CORS overview on MDN</a>.\n   *\n   * @class SpriteSheet\n   * @constructor\n   * @param {Object} data An object describing the SpriteSheet data.\n   * @extends EventDispatcher\n   **/\n\n  function SpriteSheet(data) {\n    this.EventDispatcher_constructor(); // public properties:\n\n    /**\n     * Indicates whether all images are finished loading.\n     * @property complete\n     * @type Boolean\n     * @readonly\n     **/\n\n    this.complete = true;\n    /**\n     * Specifies the framerate to use by default for Sprite instances using the SpriteSheet. See the Sprite class\n     * {{#crossLink \"Sprite/framerate:property\"}}{{/crossLink}} for more information.\n     * @property framerate\n     * @type Number\n     **/\n\n    this.framerate = 0; // private properties:\n\n    /**\n     * @property _animations\n     * @protected\n     * @type Array\n     **/\n\n    this._animations = null;\n    /**\n     * @property _frames\n     * @protected\n     * @type Array\n     **/\n\n    this._frames = null;\n    /**\n     * @property _images\n     * @protected\n     * @type Array\n     **/\n\n    this._images = null;\n    /**\n     * @property _data\n     * @protected\n     * @type Object\n     **/\n\n    this._data = null;\n    /**\n     * @property _loadCount\n     * @protected\n     * @type Number\n     **/\n\n    this._loadCount = 0; // only used for simple frame defs:\n\n    /**\n     * @property _frameHeight\n     * @protected\n     * @type Number\n     **/\n\n    this._frameHeight = 0;\n    /**\n     * @property _frameWidth\n     * @protected\n     * @type Number\n     **/\n\n    this._frameWidth = 0;\n    /**\n     * @property _numFrames\n     * @protected\n     * @type Number\n     **/\n\n    this._numFrames = 0;\n    /**\n     * @property _regX\n     * @protected\n     * @type Number\n     **/\n\n    this._regX = 0;\n    /**\n     * @property _regY\n     * @protected\n     * @type Number\n     **/\n\n    this._regY = 0;\n    /**\n     * @property _spacing\n     * @protected\n     * @type Number\n     **/\n\n    this._spacing = 0;\n    /**\n     * @property _margin\n     * @protected\n     * @type Number\n     **/\n\n    this._margin = 0; // setup:\n\n    this._parseData(data);\n  }\n\n  var p = createjs.extend(SpriteSheet, createjs.EventDispatcher); // TODO: deprecated\n  // p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n  // events:\n\n  /**\n   * Dispatched when all images are loaded.  Note that this only fires if the images\n   * were not fully loaded when the sprite sheet was initialized. You should check the complete property\n   * to prior to adding a listener. Ex.\n   *\n   * \tvar sheet = new createjs.SpriteSheet(data);\n   * \tif (!sheet.complete) {\n   * \t\t// not preloaded, listen for the complete event:\n   * \t\tsheet.addEventListener(\"complete\", handler);\n   * \t}\n   *\n   * @event complete\n   * @param {Object} target The object that dispatched the event.\n   * @param {String} type The event type.\n   * @since 0.6.0\n   */\n\n  /**\n   * Dispatched when getFrame is called with a valid frame index. This is primarily intended for use by {{#crossLink \"SpriteSheetBuilder\"}}{{/crossLink}}\n   * when doing on-demand rendering.\n   * @event getframe\n   * @param {Number} index The frame index.\n   * @param {Object} frame The frame object that getFrame will return.\n   */\n\n  /**\n   * Dispatched when an image encounters an error. A SpriteSheet will dispatch an error event for each image that\n   * encounters an error, and will still dispatch a {{#crossLink \"SpriteSheet/complete:event\"}}{{/crossLink}}\n   * event once all images are finished processing, even if an error is encountered.\n   * @event error\n   * @param {String} src The source of the image that failed to load.\n   * @since 0.8.2\n   */\n  // getter / setters:\n\n  /**\n   * Use the {{#crossLink \"SpriteSheet/animations:property\"}}{{/crossLink}} property instead.\n   * @method getAnimations\n   * @return {Array}\n   * @deprecated\n   **/\n\n  p.getAnimations = function () {\n    return this._animations.slice();\n  };\n  /**\n   * Returns an array of all available animation names available on this sprite sheet as strings.\n   * @property animations\n   * @type {Array}\n   * @readonly\n   **/\n\n\n  try {\n    Object.defineProperties(p, {\n      animations: {\n        get: p.getAnimations\n      }\n    });\n  } catch (e) {} // public methods:\n\n  /**\n   * Returns the total number of frames in the specified animation, or in the whole sprite\n   * sheet if the animation param is omitted. Returns 0 if the spritesheet relies on calculated frame counts, and\n   * the images have not been fully loaded.\n   * @method getNumFrames\n   * @param {String} animation The name of the animation to get a frame count for.\n   * @return {Number} The number of frames in the animation, or in the entire sprite sheet if the animation param is omitted.\n   */\n\n\n  p.getNumFrames = function (animation) {\n    if (animation == null) {\n      return this._frames ? this._frames.length : this._numFrames || 0;\n    } else {\n      var data = this._data[animation];\n\n      if (data == null) {\n        return 0;\n      } else {\n        return data.frames.length;\n      }\n    }\n  };\n  /**\n   * Returns an object defining the specified animation. The returned object contains:<UL>\n   * \t<li>frames: an array of the frame ids in the animation</li>\n   * \t<li>speed: the playback speed for this animation</li>\n   * \t<li>name: the name of the animation</li>\n   * \t<li>next: the default animation to play next. If the animation loops, the name and next property will be the\n   * \tsame.</li>\n   * </UL>\n   * @method getAnimation\n   * @param {String} name The name of the animation to get.\n   * @return {Object} a generic object with frames, speed, name, and next properties.\n   **/\n\n\n  p.getAnimation = function (name) {\n    return this._data[name];\n  };\n  /**\n   * Returns an object specifying the image and source rect of the specified frame. The returned object has:<UL>\n   * \t<li>an image property holding a reference to the image object in which the frame is found</li>\n   * \t<li>a rect property containing a Rectangle instance which defines the boundaries for the frame within that\n   * \timage.</li>\n   * \t<li> A regX and regY property corresponding to the regX/Y values for the frame.\n   * </UL>\n   * @method getFrame\n   * @param {Number} frameIndex The index of the frame.\n   * @return {Object} a generic object with image and rect properties. Returns null if the frame does not exist.\n   **/\n\n\n  p.getFrame = function (frameIndex) {\n    var frame;\n\n    if (this._frames && (frame = this._frames[frameIndex])) {\n      return frame;\n    }\n\n    return null;\n  };\n  /**\n   * Returns a {{#crossLink \"Rectangle\"}}{{/crossLink}} instance defining the bounds of the specified frame relative\n   * to the origin. For example, a 90 x 70 frame with a regX of 50 and a regY of 40 would return:\n   *\n   * \t[x=-50, y=-40, width=90, height=70]\n   *\n   * @method getFrameBounds\n   * @param {Number} frameIndex The index of the frame.\n   * @param {Rectangle} [rectangle] A Rectangle instance to copy the values into. By default a new instance is created.\n   * @return {Rectangle} A Rectangle instance. Returns null if the frame does not exist, or the image is not fully loaded.\n   **/\n\n\n  p.getFrameBounds = function (frameIndex, rectangle) {\n    var frame = this.getFrame(frameIndex);\n    return frame ? (rectangle || new createjs.Rectangle()).setValues(-frame.regX, -frame.regY, frame.rect.width, frame.rect.height) : null;\n  };\n  /**\n   * Returns a string representation of this object.\n   * @method toString\n   * @return {String} a string representation of the instance.\n   **/\n\n\n  p.toString = function () {\n    return \"[SpriteSheet]\";\n  };\n  /**\n   * SpriteSheet cannot be cloned. A SpriteSheet can be shared by multiple Sprite instances without cloning it.\n   * @method clone\n   **/\n\n\n  p.clone = function () {\n    throw \"SpriteSheet cannot be cloned.\";\n  }; // private methods:\n\n  /**\n   * @method _parseData\n   * @param {Object} data An object describing the SpriteSheet data.\n   * @protected\n   **/\n\n\n  p._parseData = function (data) {\n    var i, l, o, a;\n\n    if (data == null) {\n      return;\n    }\n\n    this.framerate = data.framerate || 0; // parse images:\n\n    if (data.images && (l = data.images.length) > 0) {\n      a = this._images = [];\n\n      for (i = 0; i < l; i++) {\n        var img = data.images[i];\n\n        if (typeof img == \"string\") {\n          var src = img;\n          img = document.createElement(\"img\");\n          img.src = src;\n        }\n\n        a.push(img);\n\n        if (!img.getContext && !img.naturalWidth) {\n          this._loadCount++;\n          this.complete = false;\n\n          (function (o, src) {\n            img.onload = function () {\n              o._handleImageLoad(src);\n            };\n          })(this, src);\n\n          (function (o, src) {\n            img.onerror = function () {\n              o._handleImageError(src);\n            };\n          })(this, src);\n        }\n      }\n    } // parse frames:\n\n\n    if (data.frames == null) {// nothing\n    } else if (Array.isArray(data.frames)) {\n      this._frames = [];\n      a = data.frames;\n\n      for (i = 0, l = a.length; i < l; i++) {\n        var arr = a[i];\n\n        this._frames.push({\n          image: this._images[arr[4] ? arr[4] : 0],\n          rect: new createjs.Rectangle(arr[0], arr[1], arr[2], arr[3]),\n          regX: arr[5] || 0,\n          regY: arr[6] || 0\n        });\n      }\n    } else {\n      o = data.frames;\n      this._frameWidth = o.width;\n      this._frameHeight = o.height;\n      this._regX = o.regX || 0;\n      this._regY = o.regY || 0;\n      this._spacing = o.spacing || 0;\n      this._margin = o.margin || 0;\n      this._numFrames = o.count;\n\n      if (this._loadCount == 0) {\n        this._calculateFrames();\n      }\n    } // parse animations:\n\n\n    this._animations = [];\n\n    if ((o = data.animations) != null) {\n      this._data = {};\n      var name;\n\n      for (name in o) {\n        var anim = {\n          name: name\n        };\n        var obj = o[name];\n\n        if (typeof obj == \"number\") {\n          // single frame\n          a = anim.frames = [obj];\n        } else if (Array.isArray(obj)) {\n          // simple\n          if (obj.length == 1) {\n            anim.frames = [obj[0]];\n          } else {\n            anim.speed = obj[3];\n            anim.next = obj[2];\n            a = anim.frames = [];\n\n            for (i = obj[0]; i <= obj[1]; i++) {\n              a.push(i);\n            }\n          }\n        } else {\n          // complex\n          anim.speed = obj.speed;\n          anim.next = obj.next;\n          var frames = obj.frames;\n          a = anim.frames = typeof frames == \"number\" ? [frames] : frames.slice(0);\n        }\n\n        if (anim.next === true || anim.next === undefined) {\n          anim.next = name;\n        } // loop\n\n\n        if (anim.next === false || a.length < 2 && anim.next == name) {\n          anim.next = null;\n        } // stop\n\n\n        if (!anim.speed) {\n          anim.speed = 1;\n        }\n\n        this._animations.push(name);\n\n        this._data[name] = anim;\n      }\n    }\n  };\n  /**\n   * @method _handleImageLoad\n   * @protected\n   **/\n\n\n  p._handleImageLoad = function (src) {\n    if (--this._loadCount == 0) {\n      this._calculateFrames();\n\n      this.complete = true;\n      this.dispatchEvent(\"complete\");\n    }\n  };\n  /**\n   * @method _handleImageError\n   * @protected\n   */\n\n\n  p._handleImageError = function (src) {\n    var errorEvent = new createjs.Event(\"error\");\n    errorEvent.src = src;\n    this.dispatchEvent(errorEvent); // Complete is still dispatched.\n\n    if (--this._loadCount == 0) {\n      this.dispatchEvent(\"complete\");\n    }\n  };\n  /**\n   * @method _calculateFrames\n   * @protected\n   **/\n\n\n  p._calculateFrames = function () {\n    if (this._frames || this._frameWidth == 0) {\n      return;\n    }\n\n    this._frames = [];\n    var maxFrames = this._numFrames || 100000; // if we go over this, something is wrong.\n\n    var frameCount = 0,\n        frameWidth = this._frameWidth,\n        frameHeight = this._frameHeight;\n    var spacing = this._spacing,\n        margin = this._margin;\n\n    imgLoop: for (var i = 0, imgs = this._images; i < imgs.length; i++) {\n      var img = imgs[i],\n          imgW = img.width,\n          imgH = img.height;\n      var y = margin;\n\n      while (y <= imgH - margin - frameHeight) {\n        var x = margin;\n\n        while (x <= imgW - margin - frameWidth) {\n          if (frameCount >= maxFrames) {\n            break imgLoop;\n          }\n\n          frameCount++;\n\n          this._frames.push({\n            image: img,\n            rect: new createjs.Rectangle(x, y, frameWidth, frameHeight),\n            regX: this._regX,\n            regY: this._regY\n          });\n\n          x += frameWidth + spacing;\n        }\n\n        y += frameHeight + spacing;\n      }\n    }\n\n    this._numFrames = frameCount;\n  };\n\n  createjs.SpriteSheet = createjs.promote(SpriteSheet, \"EventDispatcher\");\n})(); //##############################################################################\n// Graphics.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor:\n\n  /**\n   * The Graphics class exposes an easy to use API for generating vector drawing instructions and drawing them to a\n   * specified context. Note that you can use Graphics without any dependency on the EaselJS framework by calling {{#crossLink \"Graphics/draw\"}}{{/crossLink}}\n   * directly, or it can be used with the {{#crossLink \"Shape\"}}{{/crossLink}} object to draw vector graphics within the\n   * context of an EaselJS display list.\n   *\n   * There are two approaches to working with Graphics object: calling methods on a Graphics instance (the \"Graphics API\"), or\n   * instantiating Graphics command objects and adding them to the graphics queue via {{#crossLink \"Graphics/append\"}}{{/crossLink}}.\n   * The former abstracts the latter, simplifying beginning and ending paths, fills, and strokes.\n   *\n   *      var g = new createjs.Graphics();\n   *      g.setStrokeStyle(1);\n   *      g.beginStroke(\"#000000\");\n   *      g.beginFill(\"red\");\n   *      g.drawCircle(0,0,30);\n   *\n   * All drawing methods in Graphics return the Graphics instance, so they can be chained together. For example,\n   * the following line of code would generate the instructions to draw a rectangle with a red stroke and blue fill:\n   *\n   *      myGraphics.beginStroke(\"red\").beginFill(\"blue\").drawRect(20, 20, 100, 50);\n   *\n   * Each graphics API call generates a command object (see below). The last command to be created can be accessed via\n   * {{#crossLink \"Graphics/command:property\"}}{{/crossLink}}:\n   *\n   *      var fillCommand = myGraphics.beginFill(\"red\").command;\n   *      // ... later, update the fill style/color:\n   *      fillCommand.style = \"blue\";\n   *      // or change it to a bitmap fill:\n   *      fillCommand.bitmap(myImage);\n   *\n   * For more direct control of rendering, you can instantiate and append command objects to the graphics queue directly. In this case, you\n   * need to manage path creation manually, and ensure that fill/stroke is applied to a defined path:\n   *\n   *      // start a new path. Graphics.beginCmd is a reusable BeginPath instance:\n   *      myGraphics.append(createjs.Graphics.beginCmd);\n   *      // we need to define the path before applying the fill:\n   *      var circle = new createjs.Graphics.Circle(0,0,30);\n   *      myGraphics.append(circle);\n   *      // fill the path we just defined:\n   *      var fill = new createjs.Graphics.Fill(\"red\");\n   *      myGraphics.append(fill);\n   *\n   * These approaches can be used together, for example to insert a custom command:\n   *\n   *      myGraphics.beginFill(\"red\");\n   *      var customCommand = new CustomSpiralCommand(etc);\n   *      myGraphics.append(customCommand);\n   *      myGraphics.beginFill(\"blue\");\n   *      myGraphics.drawCircle(0, 0, 30);\n   *\n   * See {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more info on creating custom commands.\n   *\n   * <h4>Tiny API</h4>\n   * The Graphics class also includes a \"tiny API\", which is one or two-letter methods that are shortcuts for all of the\n   * Graphics methods. These methods are great for creating compact instructions, and is used by the Toolkit for CreateJS\n   * to generate readable code. All tiny methods are marked as protected, so you can view them by enabling protected\n   * descriptions in the docs.\n   *\n   * <table>\n   *     <tr><td><b>Tiny</b></td><td><b>Method</b></td><td><b>Tiny</b></td><td><b>Method</b></td></tr>\n   *     <tr><td>mt</td><td>{{#crossLink \"Graphics/moveTo\"}}{{/crossLink}} </td>\n   *     <td>lt</td> <td>{{#crossLink \"Graphics/lineTo\"}}{{/crossLink}}</td></tr>\n   *     <tr><td>a/at</td><td>{{#crossLink \"Graphics/arc\"}}{{/crossLink}} / {{#crossLink \"Graphics/arcTo\"}}{{/crossLink}} </td>\n   *     <td>bt</td><td>{{#crossLink \"Graphics/bezierCurveTo\"}}{{/crossLink}} </td></tr>\n   *     <tr><td>qt</td><td>{{#crossLink \"Graphics/quadraticCurveTo\"}}{{/crossLink}} (also curveTo)</td>\n   *     <td>r</td><td>{{#crossLink \"Graphics/rect\"}}{{/crossLink}} </td></tr>\n   *     <tr><td>cp</td><td>{{#crossLink \"Graphics/closePath\"}}{{/crossLink}} </td>\n   *     <td>c</td><td>{{#crossLink \"Graphics/clear\"}}{{/crossLink}} </td></tr>\n   *     <tr><td>f</td><td>{{#crossLink \"Graphics/beginFill\"}}{{/crossLink}} </td>\n   *     <td>lf</td><td>{{#crossLink \"Graphics/beginLinearGradientFill\"}}{{/crossLink}} </td></tr>\n   *     <tr><td>rf</td><td>{{#crossLink \"Graphics/beginRadialGradientFill\"}}{{/crossLink}} </td>\n   *     <td>bf</td><td>{{#crossLink \"Graphics/beginBitmapFill\"}}{{/crossLink}} </td></tr>\n   *     <tr><td>ef</td><td>{{#crossLink \"Graphics/endFill\"}}{{/crossLink}} </td>\n   *     <td>ss / sd</td><td>{{#crossLink \"Graphics/setStrokeStyle\"}}{{/crossLink}} / {{#crossLink \"Graphics/setStrokeDash\"}}{{/crossLink}} </td></tr>\n   *     <tr><td>s</td><td>{{#crossLink \"Graphics/beginStroke\"}}{{/crossLink}} </td>\n   *     <td>ls</td><td>{{#crossLink \"Graphics/beginLinearGradientStroke\"}}{{/crossLink}} </td></tr>\n   *     <tr><td>rs</td><td>{{#crossLink \"Graphics/beginRadialGradientStroke\"}}{{/crossLink}} </td>\n   *     <td>bs</td><td>{{#crossLink \"Graphics/beginBitmapStroke\"}}{{/crossLink}} </td></tr>\n   *     <tr><td>es</td><td>{{#crossLink \"Graphics/endStroke\"}}{{/crossLink}} </td>\n   *     <td>dr</td><td>{{#crossLink \"Graphics/drawRect\"}}{{/crossLink}} </td></tr>\n   *     <tr><td>rr</td><td>{{#crossLink \"Graphics/drawRoundRect\"}}{{/crossLink}} </td>\n   *     <td>rc</td><td>{{#crossLink \"Graphics/drawRoundRectComplex\"}}{{/crossLink}} </td></tr>\n   *     <tr><td>dc</td><td>{{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}} </td>\n   *     <td>de</td><td>{{#crossLink \"Graphics/drawEllipse\"}}{{/crossLink}} </td></tr>\n   *     <tr><td>dp</td><td>{{#crossLink \"Graphics/drawPolyStar\"}}{{/crossLink}} </td>\n   *     <td>p</td><td>{{#crossLink \"Graphics/decodePath\"}}{{/crossLink}} </td></tr>\n   * </table>\n   *\n   * Here is the above example, using the tiny API instead.\n   *\n   *      myGraphics.s(\"red\").f(\"blue\").r(20, 20, 100, 50);\n   *\n   * @class Graphics\n   * @constructor\n   **/\n\n  function Graphics() {\n    // public properties\n\n    /**\n     * Holds a reference to the last command that was created or appended. For example, you could retain a reference\n     * to a Fill command in order to dynamically update the color later by using:\n     *\n     * \t\tvar myFill = myGraphics.beginFill(\"red\").command;\n     * \t\t// update color later:\n     * \t\tmyFill.style = \"yellow\";\n     *\n     * @property command\n     * @type Object\n     **/\n    this.command = null; // private properties\n\n    /**\n     * @property _stroke\n     * @protected\n     * @type {Stroke}\n     **/\n\n    this._stroke = null;\n    /**\n     * @property _strokeStyle\n     * @protected\n     * @type {StrokeStyle}\n     **/\n\n    this._strokeStyle = null;\n    /**\n     * @property _oldStrokeStyle\n     * @protected\n     * @type {StrokeStyle}\n     **/\n\n    this._oldStrokeStyle = null;\n    /**\n     * @property _strokeDash\n     * @protected\n     * @type {StrokeDash}\n     **/\n\n    this._strokeDash = null;\n    /**\n     * @property _oldStrokeDash\n     * @protected\n     * @type {StrokeDash}\n     **/\n\n    this._oldStrokeDash = null;\n    /**\n     * @property _strokeIgnoreScale\n     * @protected\n     * @type Boolean\n     **/\n\n    this._strokeIgnoreScale = false;\n    /**\n     * @property _fill\n     * @protected\n     * @type {Fill}\n     **/\n\n    this._fill = null;\n    /**\n     * @property _instructions\n     * @protected\n     * @type {Array}\n     **/\n\n    this._instructions = [];\n    /**\n     * Indicates the last instruction index that was committed.\n     * @property _commitIndex\n     * @protected\n     * @type {Number}\n     **/\n\n    this._commitIndex = 0;\n    /**\n     * Uncommitted instructions.\n     * @property _activeInstructions\n     * @protected\n     * @type {Array}\n     **/\n\n    this._activeInstructions = [];\n    /**\n     * This indicates that there have been changes to the activeInstruction list since the last updateInstructions call.\n     * @property _dirty\n     * @protected\n     * @type {Boolean}\n     * @default false\n     **/\n\n    this._dirty = false;\n    /**\n     * Index to draw from if a store operation has happened.\n     * @property _storeIndex\n     * @protected\n     * @type {Number}\n     * @default 0\n     **/\n\n    this._storeIndex = 0; // setup:\n\n    this.clear();\n  }\n\n  var p = Graphics.prototype;\n  var G = Graphics; // shortcut\n\n  /**\n   * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n   * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n   * for details.\n   *\n   * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n   *\n   * @method initialize\n   * @protected\n   * @deprecated\n   */\n  // p.initialize = function() {}; // searchable for devs wondering where it is.\n  // static public methods:\n\n  /**\n   * Returns a CSS compatible color string based on the specified RGB numeric color values in the format\n   * \"rgba(255,255,255,1.0)\", or if alpha is null then in the format \"rgb(255,255,255)\". For example,\n   *\n   *      createjs.Graphics.getRGB(50, 100, 150, 0.5);\n   *      // Returns \"rgba(50,100,150,0.5)\"\n   *\n   * It also supports passing a single hex color value as the first param, and an optional alpha value as the second\n   * param. For example,\n   *\n   *      createjs.Graphics.getRGB(0xFF00FF, 0.2);\n   *      // Returns \"rgba(255,0,255,0.2)\"\n   *\n   * @method getRGB\n   * @static\n   * @param {Number} r The red component for the color, between 0 and 0xFF (255).\n   * @param {Number} g The green component for the color, between 0 and 0xFF (255).\n   * @param {Number} b The blue component for the color, between 0 and 0xFF (255).\n   * @param {Number} [alpha] The alpha component for the color where 0 is fully transparent and 1 is fully opaque.\n   * @return {String} A CSS compatible color string based on the specified RGB numeric color values in the format\n   * \"rgba(255,255,255,1.0)\", or if alpha is null then in the format \"rgb(255,255,255)\".\n   **/\n\n  Graphics.getRGB = function (r, g, b, alpha) {\n    if (r != null && b == null) {\n      alpha = g;\n      b = r & 0xFF;\n      g = r >> 8 & 0xFF;\n      r = r >> 16 & 0xFF;\n    }\n\n    if (alpha == null) {\n      return \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n    } else {\n      return \"rgba(\" + r + \",\" + g + \",\" + b + \",\" + alpha + \")\";\n    }\n  };\n  /**\n   * Returns a CSS compatible color string based on the specified HSL numeric color values in the format \"hsla(360,100,100,1.0)\",\n   * or if alpha is null then in the format \"hsl(360,100,100)\".\n   *\n   *      createjs.Graphics.getHSL(150, 100, 70);\n   *      // Returns \"hsl(150,100,70)\"\n   *\n   * @method getHSL\n   * @static\n   * @param {Number} hue The hue component for the color, between 0 and 360.\n   * @param {Number} saturation The saturation component for the color, between 0 and 100.\n   * @param {Number} lightness The lightness component for the color, between 0 and 100.\n   * @param {Number} [alpha] The alpha component for the color where 0 is fully transparent and 1 is fully opaque.\n   * @return {String} A CSS compatible color string based on the specified HSL numeric color values in the format\n   * \"hsla(360,100,100,1.0)\", or if alpha is null then in the format \"hsl(360,100,100)\".\n   **/\n\n\n  Graphics.getHSL = function (hue, saturation, lightness, alpha) {\n    if (alpha == null) {\n      return \"hsl(\" + hue % 360 + \",\" + saturation + \"%,\" + lightness + \"%)\";\n    } else {\n      return \"hsla(\" + hue % 360 + \",\" + saturation + \"%,\" + lightness + \"%,\" + alpha + \")\";\n    }\n  }; // static properties:\n\n  /**\n   * A reusable instance of {{#crossLink \"Graphics/BeginPath\"}}{{/crossLink}} to avoid\n   * unnecessary instantiation.\n   * @property beginCmd\n   * @type {Graphics.BeginPath}\n   * @static\n   **/\n  // defined at the bottom of this file.\n\n  /**\n   * Map of Base64 characters to values. Used by {{#crossLink \"Graphics/decodePath\"}}{{/crossLink}}.\n   * @property BASE_64\n   * @static\n   * @final\n   * @readonly\n   * @type {Object}\n   **/\n\n\n  Graphics.BASE_64 = {\n    \"A\": 0,\n    \"B\": 1,\n    \"C\": 2,\n    \"D\": 3,\n    \"E\": 4,\n    \"F\": 5,\n    \"G\": 6,\n    \"H\": 7,\n    \"I\": 8,\n    \"J\": 9,\n    \"K\": 10,\n    \"L\": 11,\n    \"M\": 12,\n    \"N\": 13,\n    \"O\": 14,\n    \"P\": 15,\n    \"Q\": 16,\n    \"R\": 17,\n    \"S\": 18,\n    \"T\": 19,\n    \"U\": 20,\n    \"V\": 21,\n    \"W\": 22,\n    \"X\": 23,\n    \"Y\": 24,\n    \"Z\": 25,\n    \"a\": 26,\n    \"b\": 27,\n    \"c\": 28,\n    \"d\": 29,\n    \"e\": 30,\n    \"f\": 31,\n    \"g\": 32,\n    \"h\": 33,\n    \"i\": 34,\n    \"j\": 35,\n    \"k\": 36,\n    \"l\": 37,\n    \"m\": 38,\n    \"n\": 39,\n    \"o\": 40,\n    \"p\": 41,\n    \"q\": 42,\n    \"r\": 43,\n    \"s\": 44,\n    \"t\": 45,\n    \"u\": 46,\n    \"v\": 47,\n    \"w\": 48,\n    \"x\": 49,\n    \"y\": 50,\n    \"z\": 51,\n    \"0\": 52,\n    \"1\": 53,\n    \"2\": 54,\n    \"3\": 55,\n    \"4\": 56,\n    \"5\": 57,\n    \"6\": 58,\n    \"7\": 59,\n    \"8\": 60,\n    \"9\": 61,\n    \"+\": 62,\n    \"/\": 63\n  };\n  /**\n   * Maps numeric values for the caps parameter of {{#crossLink \"Graphics/setStrokeStyle\"}}{{/crossLink}} to\n   * corresponding string values. This is primarily for use with the tiny API. The mappings are as follows: 0 to\n   * \"butt\", 1 to \"round\", and 2 to \"square\".\n   * For example, to set the line caps to \"square\":\n   *\n   *      myGraphics.ss(16, 2);\n   *\n   * @property STROKE_CAPS_MAP\n   * @static\n   * @final\n   * @readonly\n   * @type {Array}\n   **/\n\n  Graphics.STROKE_CAPS_MAP = [\"butt\", \"round\", \"square\"];\n  /**\n   * Maps numeric values for the joints parameter of {{#crossLink \"Graphics/setStrokeStyle\"}}{{/crossLink}} to\n   * corresponding string values. This is primarily for use with the tiny API. The mappings are as follows: 0 to\n   * \"miter\", 1 to \"round\", and 2 to \"bevel\".\n   * For example, to set the line joints to \"bevel\":\n   *\n   *      myGraphics.ss(16, 0, 2);\n   *\n   * @property STROKE_JOINTS_MAP\n   * @static\n   * @final\n   * @readonly\n   * @type {Array}\n   **/\n\n  Graphics.STROKE_JOINTS_MAP = [\"miter\", \"round\", \"bevel\"];\n  /**\n   * @property _ctx\n   * @static\n   * @protected\n   * @type {CanvasRenderingContext2D}\n   **/\n\n  var canvas = createjs.createCanvas ? createjs.createCanvas() : document.createElement(\"canvas\");\n\n  if (canvas.getContext) {\n    Graphics._ctx = canvas.getContext(\"2d\");\n    canvas.width = canvas.height = 1;\n  } // getter / setters:\n\n  /**\n   * Use the {{#crossLink \"Graphics/instructions:property\"}}{{/crossLink}} property instead.\n   * @method getInstructions\n   * @return {Array}\n   * @deprecated\n   **/\n\n\n  p.getInstructions = function () {\n    this._updateInstructions();\n\n    return this._instructions;\n  };\n  /**\n   * Returns the graphics instructions array. Each entry is a graphics command object (ex. Graphics.Fill, Graphics.Rect)\n   * Modifying the returned array directly is not recommended, and is likely to result in unexpected behaviour.\n   *\n   * This property is mainly intended for introspection of the instructions (ex. for graphics export).\n   * @property instructions\n   * @type {Array}\n   * @readonly\n   **/\n\n\n  try {\n    Object.defineProperties(p, {\n      instructions: {\n        get: p.getInstructions\n      }\n    });\n  } catch (e) {} // public methods:\n\n  /**\n   * Returns true if this Graphics instance has no drawing commands.\n   * @method isEmpty\n   * @return {Boolean} Returns true if this Graphics instance has no drawing commands.\n   **/\n\n\n  p.isEmpty = function () {\n    return !(this._instructions.length || this._activeInstructions.length);\n  };\n  /**\n   * Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.\n   * Returns true if the draw was handled (useful for overriding functionality).\n   *\n   * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n   * @method draw\n   * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n   * @param {Object} data Optional data that is passed to graphics command exec methods. When called from a Shape instance, the shape passes itself as the data parameter. This can be used by custom graphic commands to insert contextual data.\n   **/\n\n\n  p.draw = function (ctx, data) {\n    this._updateInstructions();\n\n    var instr = this._instructions;\n\n    for (var i = this._storeIndex, l = instr.length; i < l; i++) {\n      instr[i].exec(ctx, data);\n    }\n  };\n  /**\n   * Draws only the path described for this Graphics instance, skipping any non-path instructions, including fill and\n   * stroke descriptions. Used for <code>DisplayObject.mask</code> to draw the clipping path, for example.\n   *\n   * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n   * @method drawAsPath\n   * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n   **/\n\n\n  p.drawAsPath = function (ctx) {\n    this._updateInstructions();\n\n    var instr,\n        instrs = this._instructions;\n\n    for (var i = this._storeIndex, l = instrs.length; i < l; i++) {\n      // the first command is always a beginPath command.\n      if ((instr = instrs[i]).path !== false) {\n        instr.exec(ctx);\n      }\n    }\n  }; // public methods that map directly to context 2D calls:\n\n  /**\n   * Moves the drawing point to the specified position. A tiny API method \"mt\" also exists.\n   * @method moveTo\n   * @param {Number} x The x coordinate the drawing point should move to.\n   * @param {Number} y The y coordinate the drawing point should move to.\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls).\n   * @chainable\n   **/\n\n\n  p.moveTo = function (x, y) {\n    return this.append(new G.MoveTo(x, y), true);\n  };\n  /**\n   * Draws a line from the current drawing point to the specified position, which become the new current drawing\n   * point. Note that you *must* call {{#crossLink \"Graphics/moveTo\"}}{{/crossLink}} before the first `lineTo()`.\n   * A tiny API method \"lt\" also exists.\n   *\n   * For detailed information, read the\n   * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#complex-shapes-(paths)\">\n   * whatwg spec</a>.\n   * @method lineTo\n   * @param {Number} x The x coordinate the drawing point should draw to.\n   * @param {Number} y The y coordinate the drawing point should draw to.\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   **/\n\n\n  p.lineTo = function (x, y) {\n    return this.append(new G.LineTo(x, y));\n  };\n  /**\n   * Draws an arc with the specified control points and radius.  For detailed information, read the\n   * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-arcto\">\n   * whatwg spec</a>. A tiny API method \"at\" also exists.\n   * @method arcTo\n   * @param {Number} x1\n   * @param {Number} y1\n   * @param {Number} x2\n   * @param {Number} y2\n   * @param {Number} radius\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   **/\n\n\n  p.arcTo = function (x1, y1, x2, y2, radius) {\n    return this.append(new G.ArcTo(x1, y1, x2, y2, radius));\n  };\n  /**\n   * Draws an arc defined by the radius, startAngle and endAngle arguments, centered at the position (x, y). For\n   * example, to draw a full circle with a radius of 20 centered at (100, 100):\n   *\n   *      arc(100, 100, 20, 0, Math.PI*2);\n   *\n   * For detailed information, read the\n   * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-arc\">whatwg spec</a>.\n   * A tiny API method \"a\" also exists.\n   * @method arc\n   * @param {Number} x\n   * @param {Number} y\n   * @param {Number} radius\n   * @param {Number} startAngle Measured in radians.\n   * @param {Number} endAngle Measured in radians.\n   * @param {Boolean} anticlockwise\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   **/\n\n\n  p.arc = function (x, y, radius, startAngle, endAngle, anticlockwise) {\n    return this.append(new G.Arc(x, y, radius, startAngle, endAngle, anticlockwise));\n  };\n  /**\n   * Draws a quadratic curve from the current drawing point to (x, y) using the control point (cpx, cpy). For detailed\n   * information, read the <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-quadraticcurveto\">\n   * whatwg spec</a>. A tiny API method \"qt\" also exists.\n   * @method quadraticCurveTo\n   * @param {Number} cpx\n   * @param {Number} cpy\n   * @param {Number} x\n   * @param {Number} y\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   **/\n\n\n  p.quadraticCurveTo = function (cpx, cpy, x, y) {\n    return this.append(new G.QuadraticCurveTo(cpx, cpy, x, y));\n  };\n  /**\n   * Draws a bezier curve from the current drawing point to (x, y) using the control points (cp1x, cp1y) and (cp2x,\n   * cp2y). For detailed information, read the\n   * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-beziercurveto\">\n   * whatwg spec</a>. A tiny API method \"bt\" also exists.\n   * @method bezierCurveTo\n   * @param {Number} cp1x\n   * @param {Number} cp1y\n   * @param {Number} cp2x\n   * @param {Number} cp2y\n   * @param {Number} x\n   * @param {Number} y\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   **/\n\n\n  p.bezierCurveTo = function (cp1x, cp1y, cp2x, cp2y, x, y) {\n    return this.append(new G.BezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y));\n  };\n  /**\n   * Draws a rectangle at (x, y) with the specified width and height using the current fill and/or stroke.\n   * For detailed information, read the\n   * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-rect\">\n   * whatwg spec</a>. A tiny API method \"r\" also exists.\n   * @method rect\n   * @param {Number} x\n   * @param {Number} y\n   * @param {Number} w Width of the rectangle\n   * @param {Number} h Height of the rectangle\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   **/\n\n\n  p.rect = function (x, y, w, h) {\n    return this.append(new G.Rect(x, y, w, h));\n  };\n  /**\n   * Closes the current path, effectively drawing a line from the current drawing point to the first drawing point specified\n   * since the fill or stroke was last set. A tiny API method \"cp\" also exists.\n   * @method closePath\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   **/\n\n\n  p.closePath = function () {\n    return this._activeInstructions.length ? this.append(new G.ClosePath()) : this;\n  }; // public methods that roughly map to Flash graphics APIs:\n\n  /**\n   * Clears all drawing instructions, effectively resetting this Graphics instance. Any line and fill styles will need\n   * to be redefined to draw shapes following a clear call. A tiny API method \"c\" also exists.\n   * @method clear\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   **/\n\n\n  p.clear = function () {\n    this._instructions.length = this._activeInstructions.length = this._commitIndex = 0;\n    this._strokeStyle = this._oldStrokeStyle = this._stroke = this._fill = this._strokeDash = this._oldStrokeDash = null;\n    this._dirty = this._strokeIgnoreScale = false;\n    return this;\n  };\n  /**\n   * Begins a fill with the specified color. This ends the current sub-path. A tiny API method \"f\" also exists.\n   * @method beginFill\n   * @param {String} color A CSS compatible color value (ex. \"red\", \"#FF0000\", or \"rgba(255,0,0,0.5)\"). Setting to\n   * null will result in no fill.\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   **/\n\n\n  p.beginFill = function (color) {\n    return this._setFill(color ? new G.Fill(color) : null);\n  };\n  /**\n   * Begins a linear gradient fill defined by the line (x0, y0) to (x1, y1). This ends the current sub-path. For\n   * example, the following code defines a black to white vertical gradient ranging from 20px to 120px, and draws a\n   * square to display it:\n   *\n   *      myGraphics.beginLinearGradientFill([\"#000\",\"#FFF\"], [0, 1], 0, 20, 0, 120).drawRect(20, 20, 120, 120);\n   *\n   * A tiny API method \"lf\" also exists.\n   * @method beginLinearGradientFill\n   * @param {Array} colors An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define a gradient\n   * drawing from red to blue.\n   * @param {Array} ratios An array of gradient positions which correspond to the colors. For example, [0.1, 0.9] would draw\n   * the first color to 10% then interpolating to the second color at 90%.\n   * @param {Number} x0 The position of the first point defining the line that defines the gradient direction and size.\n   * @param {Number} y0 The position of the first point defining the line that defines the gradient direction and size.\n   * @param {Number} x1 The position of the second point defining the line that defines the gradient direction and size.\n   * @param {Number} y1 The position of the second point defining the line that defines the gradient direction and size.\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   **/\n\n\n  p.beginLinearGradientFill = function (colors, ratios, x0, y0, x1, y1) {\n    return this._setFill(new G.Fill().linearGradient(colors, ratios, x0, y0, x1, y1));\n  };\n  /**\n   * Begins a radial gradient fill. This ends the current sub-path. For example, the following code defines a red to\n   * blue radial gradient centered at (100, 100), with a radius of 50, and draws a circle to display it:\n   *\n   *      myGraphics.beginRadialGradientFill([\"#F00\",\"#00F\"], [0, 1], 100, 100, 0, 100, 100, 50).drawCircle(100, 100, 50);\n   *\n   * A tiny API method \"rf\" also exists.\n   * @method beginRadialGradientFill\n   * @param {Array} colors An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define\n   * a gradient drawing from red to blue.\n   * @param {Array} ratios An array of gradient positions which correspond to the colors. For example, [0.1,\n   * 0.9] would draw the first color to 10% then interpolating to the second color at 90%.\n   * @param {Number} x0 Center position of the inner circle that defines the gradient.\n   * @param {Number} y0 Center position of the inner circle that defines the gradient.\n   * @param {Number} r0 Radius of the inner circle that defines the gradient.\n   * @param {Number} x1 Center position of the outer circle that defines the gradient.\n   * @param {Number} y1 Center position of the outer circle that defines the gradient.\n   * @param {Number} r1 Radius of the outer circle that defines the gradient.\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   **/\n\n\n  p.beginRadialGradientFill = function (colors, ratios, x0, y0, r0, x1, y1, r1) {\n    return this._setFill(new G.Fill().radialGradient(colors, ratios, x0, y0, r0, x1, y1, r1));\n  };\n  /**\n   * Begins a pattern fill using the specified image. This ends the current sub-path. A tiny API method \"bf\" also\n   * exists.\n   * @method beginBitmapFill\n   * @param {HTMLImageElement | HTMLCanvasElement | HTMLVideoElement} image The Image, Canvas, or Video object to use\n   * as the pattern. Must be loaded prior to creating a bitmap fill, or the fill will be empty.\n   * @param {String} repetition Optional. Indicates whether to repeat the image in the fill area. One of \"repeat\",\n   * \"repeat-x\", \"repeat-y\", or \"no-repeat\". Defaults to \"repeat\". Note that Firefox does not support \"repeat-x\" or\n   * \"repeat-y\" (latest tests were in FF 20.0), and will default to \"repeat\".\n   * @param {Matrix2D} matrix Optional. Specifies a transformation matrix for the bitmap fill. This transformation\n   * will be applied relative to the parent transform.\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   **/\n\n\n  p.beginBitmapFill = function (image, repetition, matrix) {\n    return this._setFill(new G.Fill(null, matrix).bitmap(image, repetition));\n  };\n  /**\n   * Ends the current sub-path, and begins a new one with no fill. Functionally identical to <code>beginFill(null)</code>.\n   * A tiny API method \"ef\" also exists.\n   * @method endFill\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   **/\n\n\n  p.endFill = function () {\n    return this.beginFill();\n  };\n  /**\n   * Sets the stroke style. Like all drawing methods, this can be chained, so you can define\n   * the stroke style and color in a single line of code like so:\n   *\n   * \tmyGraphics.setStrokeStyle(8,\"round\").beginStroke(\"#F00\");\n   *\n   * A tiny API method \"ss\" also exists.\n   * @method setStrokeStyle\n   * @param {Number} thickness The width of the stroke.\n   * @param {String | Number} [caps=0] Indicates the type of caps to use at the end of lines. One of butt,\n   * round, or square. Defaults to \"butt\". Also accepts the values 0 (butt), 1 (round), and 2 (square) for use with\n   * the tiny API.\n   * @param {String | Number} [joints=0] Specifies the type of joints that should be used where two lines meet.\n   * One of bevel, round, or miter. Defaults to \"miter\". Also accepts the values 0 (miter), 1 (round), and 2 (bevel)\n   * for use with the tiny API.\n   * @param {Number} [miterLimit=10] If joints is set to \"miter\", then you can specify a miter limit ratio which\n   * controls at what point a mitered joint will be clipped.\n   * @param {Boolean} [ignoreScale=false] If true, the stroke will be drawn at the specified thickness regardless\n   * of active transformations.\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   **/\n\n\n  p.setStrokeStyle = function (thickness, caps, joints, miterLimit, ignoreScale) {\n    this._updateInstructions(true);\n\n    this._strokeStyle = this.command = new G.StrokeStyle(thickness, caps, joints, miterLimit, ignoreScale); // ignoreScale lives on Stroke, not StrokeStyle, so we do a little trickery:\n\n    if (this._stroke) {\n      this._stroke.ignoreScale = ignoreScale;\n    }\n\n    this._strokeIgnoreScale = ignoreScale;\n    return this;\n  };\n  /**\n   * Sets or clears the stroke dash pattern.\n   *\n   * \tmyGraphics.setStrokeDash([20, 10], 0);\n   *\n   * A tiny API method `sd` also exists.\n   * @method setStrokeDash\n   * @param {Array} [segments] An array specifying the dash pattern, alternating between line and gap.\n   * For example, `[20,10]` would create a pattern of 20 pixel lines with 10 pixel gaps between them.\n   * Passing null or an empty array will clear the existing stroke dash.\n   * @param {Number} [offset=0] The offset of the dash pattern. For example, you could increment this value to create a \"marching ants\" effect.\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   **/\n\n\n  p.setStrokeDash = function (segments, offset) {\n    this._updateInstructions(true);\n\n    this._strokeDash = this.command = new G.StrokeDash(segments, offset);\n    return this;\n  };\n  /**\n   * Begins a stroke with the specified color. This ends the current sub-path. A tiny API method \"s\" also exists.\n   * @method beginStroke\n   * @param {String} color A CSS compatible color value (ex. \"#FF0000\", \"red\", or \"rgba(255,0,0,0.5)\"). Setting to\n   * null will result in no stroke.\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   **/\n\n\n  p.beginStroke = function (color) {\n    return this._setStroke(color ? new G.Stroke(color) : null);\n  };\n  /**\n   * Begins a linear gradient stroke defined by the line (x0, y0) to (x1, y1). This ends the current sub-path. For\n   * example, the following code defines a black to white vertical gradient ranging from 20px to 120px, and draws a\n   * square to display it:\n   *\n   *      myGraphics.setStrokeStyle(10).\n   *          beginLinearGradientStroke([\"#000\",\"#FFF\"], [0, 1], 0, 20, 0, 120).drawRect(20, 20, 120, 120);\n   *\n   * A tiny API method \"ls\" also exists.\n   * @method beginLinearGradientStroke\n   * @param {Array} colors An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define\n   * a gradient drawing from red to blue.\n   * @param {Array} ratios An array of gradient positions which correspond to the colors. For example, [0.1,\n   * 0.9] would draw the first color to 10% then interpolating to the second color at 90%.\n   * @param {Number} x0 The position of the first point defining the line that defines the gradient direction and size.\n   * @param {Number} y0 The position of the first point defining the line that defines the gradient direction and size.\n   * @param {Number} x1 The position of the second point defining the line that defines the gradient direction and size.\n   * @param {Number} y1 The position of the second point defining the line that defines the gradient direction and size.\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   **/\n\n\n  p.beginLinearGradientStroke = function (colors, ratios, x0, y0, x1, y1) {\n    return this._setStroke(new G.Stroke().linearGradient(colors, ratios, x0, y0, x1, y1));\n  };\n  /**\n   * Begins a radial gradient stroke. This ends the current sub-path. For example, the following code defines a red to\n   * blue radial gradient centered at (100, 100), with a radius of 50, and draws a rectangle to display it:\n   *\n   *      myGraphics.setStrokeStyle(10)\n   *          .beginRadialGradientStroke([\"#F00\",\"#00F\"], [0, 1], 100, 100, 0, 100, 100, 50)\n   *          .drawRect(50, 90, 150, 110);\n   *\n   * A tiny API method \"rs\" also exists.\n   * @method beginRadialGradientStroke\n   * @param {Array} colors An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define\n   * a gradient drawing from red to blue.\n   * @param {Array} ratios An array of gradient positions which correspond to the colors. For example, [0.1,\n   * 0.9] would draw the first color to 10% then interpolating to the second color at 90%, then draw the second color\n   * to 100%.\n   * @param {Number} x0 Center position of the inner circle that defines the gradient.\n   * @param {Number} y0 Center position of the inner circle that defines the gradient.\n   * @param {Number} r0 Radius of the inner circle that defines the gradient.\n   * @param {Number} x1 Center position of the outer circle that defines the gradient.\n   * @param {Number} y1 Center position of the outer circle that defines the gradient.\n   * @param {Number} r1 Radius of the outer circle that defines the gradient.\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   **/\n\n\n  p.beginRadialGradientStroke = function (colors, ratios, x0, y0, r0, x1, y1, r1) {\n    return this._setStroke(new G.Stroke().radialGradient(colors, ratios, x0, y0, r0, x1, y1, r1));\n  };\n  /**\n   * Begins a pattern fill using the specified image. This ends the current sub-path. Note that unlike bitmap fills,\n   * strokes do not currently support a matrix parameter due to limitations in the canvas API. A tiny API method \"bs\"\n   * also exists.\n   * @method beginBitmapStroke\n   * @param {HTMLImageElement | HTMLCanvasElement | HTMLVideoElement} image The Image, Canvas, or Video object to use\n   * as the pattern. Must be loaded prior to creating a bitmap fill, or the fill will be empty.\n   * @param {String} [repetition=repeat] Optional. Indicates whether to repeat the image in the fill area. One of\n   * \"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\". Defaults to \"repeat\".\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   **/\n\n\n  p.beginBitmapStroke = function (image, repetition) {\n    // NOTE: matrix is not supported for stroke because transforms on strokes also affect the drawn stroke width.\n    return this._setStroke(new G.Stroke().bitmap(image, repetition));\n  };\n  /**\n   * Ends the current sub-path, and begins a new one with no stroke. Functionally identical to <code>beginStroke(null)</code>.\n   * A tiny API method \"es\" also exists.\n   * @method endStroke\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   **/\n\n\n  p.endStroke = function () {\n    return this.beginStroke();\n  };\n  /**\n   * Maps the familiar ActionScript <code>curveTo()</code> method to the functionally similar {{#crossLink \"Graphics/quadraticCurveTo\"}}{{/crossLink}}\n   * method.\n   * @method quadraticCurveTo\n   * @param {Number} cpx\n   * @param {Number} cpy\n   * @param {Number} x\n   * @param {Number} y\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   **/\n\n\n  p.curveTo = p.quadraticCurveTo;\n  /**\n   *\n   * Maps the familiar ActionScript <code>drawRect()</code> method to the functionally similar {{#crossLink \"Graphics/rect\"}}{{/crossLink}}\n   * method.\n   * @method drawRect\n   * @param {Number} x\n   * @param {Number} y\n   * @param {Number} w Width of the rectangle\n   * @param {Number} h Height of the rectangle\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   **/\n\n  p.drawRect = p.rect;\n  /**\n   * Draws a rounded rectangle with all corners with the specified radius.\n   * @method drawRoundRect\n   * @param {Number} x\n   * @param {Number} y\n   * @param {Number} w\n   * @param {Number} h\n   * @param {Number} radius Corner radius.\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   **/\n\n  p.drawRoundRect = function (x, y, w, h, radius) {\n    return this.drawRoundRectComplex(x, y, w, h, radius, radius, radius, radius);\n  };\n  /**\n   * Draws a rounded rectangle with different corner radii. Supports positive and negative corner radii. A tiny API\n   * method \"rc\" also exists.\n   * @method drawRoundRectComplex\n   * @param {Number} x The horizontal coordinate to draw the round rect.\n   * @param {Number} y The vertical coordinate to draw the round rect.\n   * @param {Number} w The width of the round rect.\n   * @param {Number} h The height of the round rect.\n   * @param {Number} radiusTL Top left corner radius.\n   * @param {Number} radiusTR Top right corner radius.\n   * @param {Number} radiusBR Bottom right corner radius.\n   * @param {Number} radiusBL Bottom left corner radius.\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   **/\n\n\n  p.drawRoundRectComplex = function (x, y, w, h, radiusTL, radiusTR, radiusBR, radiusBL) {\n    return this.append(new G.RoundRect(x, y, w, h, radiusTL, radiusTR, radiusBR, radiusBL));\n  };\n  /**\n   * Draws a circle with the specified radius at (x, y).\n   *\n   *      var g = new createjs.Graphics();\n   *\t    g.setStrokeStyle(1);\n   *\t    g.beginStroke(createjs.Graphics.getRGB(0,0,0));\n   *\t    g.beginFill(createjs.Graphics.getRGB(255,0,0));\n   *\t    g.drawCircle(0,0,3);\n   *\n   *\t    var s = new createjs.Shape(g);\n   *\t\ts.x = 100;\n   *\t\ts.y = 100;\n   *\n   *\t    stage.addChild(s);\n   *\t    stage.update();\n   *\n   * A tiny API method \"dc\" also exists.\n   * @method drawCircle\n   * @param {Number} x x coordinate center point of circle.\n   * @param {Number} y y coordinate center point of circle.\n   * @param {Number} radius Radius of circle.\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   **/\n\n\n  p.drawCircle = function (x, y, radius) {\n    return this.append(new G.Circle(x, y, radius));\n  };\n  /**\n   * Draws an ellipse (oval) with a specified width (w) and height (h). Similar to {{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}},\n   * except the width and height can be different. A tiny API method \"de\" also exists.\n   * @method drawEllipse\n   * @param {Number} x The left coordinate point of the ellipse. Note that this is different from {{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}}\n   * which draws from center.\n   * @param {Number} y The top coordinate point of the ellipse. Note that this is different from {{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}}\n   * which draws from the center.\n   * @param {Number} w The height (horizontal diameter) of the ellipse. The horizontal radius will be half of this\n   * number.\n   * @param {Number} h The width (vertical diameter) of the ellipse. The vertical radius will be half of this number.\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   **/\n\n\n  p.drawEllipse = function (x, y, w, h) {\n    return this.append(new G.Ellipse(x, y, w, h));\n  };\n  /**\n   * Draws a star if pointSize is greater than 0, or a regular polygon if pointSize is 0 with the specified number of\n   * points. For example, the following code will draw a familiar 5 pointed star shape centered at 100, 100 and with a\n   * radius of 50:\n   *\n   *      myGraphics.beginFill(\"#FF0\").drawPolyStar(100, 100, 50, 5, 0.6, -90);\n   *      // Note: -90 makes the first point vertical\n   *\n   * A tiny API method \"dp\" also exists.\n   *\n   * @method drawPolyStar\n   * @param {Number} x Position of the center of the shape.\n   * @param {Number} y Position of the center of the shape.\n   * @param {Number} radius The outer radius of the shape.\n   * @param {Number} sides The number of points on the star or sides on the polygon.\n   * @param {Number} pointSize The depth or \"pointy-ness\" of the star points. A pointSize of 0 will draw a regular\n   * polygon (no points), a pointSize of 1 will draw nothing because the points are infinitely pointy.\n   * @param {Number} angle The angle of the first point / corner. For example a value of 0 will draw the first point\n   * directly to the right of the center.\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   **/\n\n\n  p.drawPolyStar = function (x, y, radius, sides, pointSize, angle) {\n    return this.append(new G.PolyStar(x, y, radius, sides, pointSize, angle));\n  }; // TODO: deprecated.\n\n  /**\n   * Removed in favour of using custom command objects with {{#crossLink \"Graphics/append\"}}{{/crossLink}}.\n   * @method inject\n   * @deprecated\n   **/\n\n  /**\n   * Appends a graphics command object to the graphics queue. Command objects expose an \"exec\" method\n   * that accepts two parameters: the Context2D to operate on, and an arbitrary data object passed into\n   * {{#crossLink \"Graphics/draw\"}}{{/crossLink}}. The latter will usually be the Shape instance that called draw.\n   *\n   * This method is used internally by Graphics methods, such as drawCircle, but can also be used directly to insert\n   * built-in or custom graphics commands. For example:\n   *\n   * \t\t// attach data to our shape, so we can access it during the draw:\n   * \t\tmyShape.color = \"red\";\n   *\n   * \t\t// append a Circle command object:\n   * \t\tmyShape.graphics.append(new createjs.Graphics.Circle(50, 50, 30));\n   *\n   * \t\t// append a custom command object with an exec method that sets the fill style\n   * \t\t// based on the shape's data, and then fills the circle.\n   * \t\tmyShape.graphics.append({exec:function(ctx, shape) {\n   * \t\t\tctx.fillStyle = shape.color;\n   * \t\t\tctx.fill();\n   * \t\t}});\n   *\n   * @method append\n   * @param {Object} command A graphics command object exposing an \"exec\" method.\n   * @param {boolean} clean The clean param is primarily for internal use. A value of true indicates that a command does not generate a path that should be stroked or filled.\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   **/\n\n\n  p.append = function (command, clean) {\n    this._activeInstructions.push(command);\n\n    this.command = command;\n\n    if (!clean) {\n      this._dirty = true;\n    }\n\n    return this;\n  };\n  /**\n   * Decodes a compact encoded path string into a series of draw instructions.\n   * This format is not intended to be human readable, and is meant for use by authoring tools.\n   * The format uses a base64 character set, with each character representing 6 bits, to define a series of draw\n   * commands.\n   *\n   * Each command is comprised of a single \"header\" character followed by a variable number of alternating x and y\n   * position values. Reading the header bits from left to right (most to least significant): bits 1 to 3 specify the\n   * type of operation (0-moveTo, 1-lineTo, 2-quadraticCurveTo, 3-bezierCurveTo, 4-closePath, 5-7 unused). Bit 4\n   * indicates whether position values use 12 bits (2 characters) or 18 bits (3 characters), with a one indicating the\n   * latter. Bits 5 and 6 are currently unused.\n   *\n   * Following the header is a series of 0 (closePath), 2 (moveTo, lineTo), 4 (quadraticCurveTo), or 6 (bezierCurveTo)\n   * parameters. These parameters are alternating x/y positions represented by 2 or 3 characters (as indicated by the\n   * 4th bit in the command char). These characters consist of a 1 bit sign (1 is negative, 0 is positive), followed\n   * by an 11 (2 char) or 17 (3 char) bit integer value. All position values are in tenths of a pixel. Except in the\n   * case of move operations which are absolute, this value is a delta from the previous x or y position (as\n   * appropriate).\n   *\n   * For example, the string \"A3cAAMAu4AAA\" represents a line starting at -150,0 and ending at 150,0.\n   * <br />A - bits 000000. First 3 bits (000) indicate a moveTo operation. 4th bit (0) indicates 2 chars per\n   * parameter.\n   * <br />n0 - 110111011100. Absolute x position of -150.0px. First bit indicates a negative value, remaining bits\n   * indicate 1500 tenths of a pixel.\n   * <br />AA - 000000000000. Absolute y position of 0.\n   * <br />I - 001100. First 3 bits (001) indicate a lineTo operation. 4th bit (1) indicates 3 chars per parameter.\n   * <br />Au4 - 000000101110111000. An x delta of 300.0px, which is added to the previous x value of -150.0px to\n   * provide an absolute position of +150.0px.\n   * <br />AAA - 000000000000000000. A y delta value of 0.\n   *\n   * A tiny API method \"p\" also exists.\n   * @method decodePath\n   * @param {String} str The path string to decode.\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   **/\n\n\n  p.decodePath = function (str) {\n    var instructions = [this.moveTo, this.lineTo, this.quadraticCurveTo, this.bezierCurveTo, this.closePath];\n    var paramCount = [2, 2, 4, 6, 0];\n    var i = 0,\n        l = str.length;\n    var params = [];\n    var x = 0,\n        y = 0;\n    var base64 = Graphics.BASE_64;\n\n    while (i < l) {\n      var c = str.charAt(i);\n      var n = base64[c];\n      var fi = n >> 3; // highest order bits 1-3 code for operation.\n\n      var f = instructions[fi]; // check that we have a valid instruction & that the unused bits are empty:\n\n      if (!f || n & 3) {\n        throw \"bad path data (@\" + i + \"): \" + c;\n      }\n\n      var pl = paramCount[fi];\n\n      if (!fi) {\n        x = y = 0;\n      } // move operations reset the position.\n\n\n      params.length = 0;\n      i++;\n      var charCount = (n >> 2 & 1) + 2; // 4th header bit indicates number size for this operation.\n\n      for (var p = 0; p < pl; p++) {\n        var num = base64[str.charAt(i)];\n        var sign = num >> 5 ? -1 : 1;\n        num = (num & 31) << 6 | base64[str.charAt(i + 1)];\n\n        if (charCount == 3) {\n          num = num << 6 | base64[str.charAt(i + 2)];\n        }\n\n        num = sign * num / 10;\n\n        if (p % 2) {\n          x = num += x;\n        } else {\n          y = num += y;\n        }\n\n        params[p] = num;\n        i += charCount;\n      }\n\n      f.apply(this, params);\n    }\n\n    return this;\n  };\n  /**\n   * Stores all graphics commands so they won't be executed in future draws. Calling store() a second time adds to\n   * the existing store. This also affects `drawAsPath()`.\n   *\n   * This is useful in cases where you are creating vector graphics in an iterative manner (ex. generative art), so\n   * that only new graphics need to be drawn (which can provide huge performance benefits), but you wish to retain all\n   * of the vector instructions for later use (ex. scaling, modifying, or exporting).\n   *\n   * Note that calling store() will force the active path (if any) to be ended in a manner similar to changing\n   * the fill or stroke.\n   *\n   * For example, consider a application where the user draws lines with the mouse. As each line segment (or collection of\n   * segments) are added to a Shape, it can be rasterized using {{#crossLink \"DisplayObject/updateCache\"}}{{/crossLink}},\n   * and then stored, so that it can be redrawn at a different scale when the application is resized, or exported to SVG.\n   *\n   * \t// set up cache:\n   * \tmyShape.cache(0,0,500,500,scale);\n   *\n   * \t// when the user drags, draw a new line:\n   * \tmyShape.graphics.moveTo(oldX,oldY).lineTo(newX,newY);\n   * \t// then draw it into the existing cache:\n   * \tmyShape.updateCache(\"source-over\");\n   * \t// store the new line, so it isn't redrawn next time:\n   * \tmyShape.store();\n   *\n   * \t// then, when the window resizes, we can re-render at a different scale:\n   * \t// first, unstore all our lines:\n   * \tmyShape.unstore();\n   * \t// then cache using the new scale:\n   * \tmyShape.cache(0,0,500,500,newScale);\n   * \t// finally, store the existing commands again:\n   * \tmyShape.store();\n   *\n   * @method store\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   **/\n\n\n  p.store = function () {\n    this._updateInstructions(true);\n\n    this._storeIndex = this._instructions.length;\n    return this;\n  };\n  /**\n   * Unstores any graphics commands that were previously stored using {{#crossLink \"Graphics/store\"}}{{/crossLink}}\n   * so that they will be executed in subsequent draw calls.\n   *\n   * @method unstore\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   **/\n\n\n  p.unstore = function () {\n    this._storeIndex = 0;\n    return this;\n  };\n  /**\n   * Returns a clone of this Graphics instance. Note that the individual command objects are not cloned.\n   * @method clone\n   * @return {Graphics} A clone of the current Graphics instance.\n   **/\n\n\n  p.clone = function () {\n    var o = new Graphics();\n    o.command = this.command;\n    o._stroke = this._stroke;\n    o._strokeStyle = this._strokeStyle;\n    o._strokeDash = this._strokeDash;\n    o._strokeIgnoreScale = this._strokeIgnoreScale;\n    o._fill = this._fill;\n    o._instructions = this._instructions.slice();\n    o._commitIndex = this._commitIndex;\n    o._activeInstructions = this._activeInstructions.slice();\n    o._dirty = this._dirty;\n    o._storeIndex = this._storeIndex;\n    return o;\n  };\n  /**\n   * Returns a string representation of this object.\n   * @method toString\n   * @return {String} a string representation of the instance.\n   **/\n\n\n  p.toString = function () {\n    return \"[Graphics]\";\n  }; // tiny API:\n\n  /**\n   * Shortcut to moveTo.\n   * @method mt\n   * @param {Number} x The x coordinate the drawing point should move to.\n   * @param {Number} y The y coordinate the drawing point should move to.\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls).\n   * @chainable\n   * @protected\n   **/\n\n\n  p.mt = p.moveTo;\n  /**\n   * Shortcut to lineTo.\n   * @method lt\n   * @param {Number} x The x coordinate the drawing point should draw to.\n   * @param {Number} y The y coordinate the drawing point should draw to.\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   * @protected\n   **/\n\n  p.lt = p.lineTo;\n  /**\n   * Shortcut to arcTo.\n   * @method at\n   * @param {Number} x1\n   * @param {Number} y1\n   * @param {Number} x2\n   * @param {Number} y2\n   * @param {Number} radius\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   * @protected\n   **/\n\n  p.at = p.arcTo;\n  /**\n   * Shortcut to bezierCurveTo.\n   * @method bt\n   * @param {Number} cp1x\n   * @param {Number} cp1y\n   * @param {Number} cp2x\n   * @param {Number} cp2y\n   * @param {Number} x\n   * @param {Number} y\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   * @protected\n   **/\n\n  p.bt = p.bezierCurveTo;\n  /**\n   * Shortcut to quadraticCurveTo / curveTo.\n   * @method qt\n   * @param {Number} cpx\n   * @param {Number} cpy\n   * @param {Number} x\n   * @param {Number} y\n   * @protected\n   * @chainable\n   **/\n\n  p.qt = p.quadraticCurveTo;\n  /**\n   * Shortcut to arc.\n   * @method a\n   * @param {Number} x\n   * @param {Number} y\n   * @param {Number} radius\n   * @param {Number} startAngle Measured in radians.\n   * @param {Number} endAngle Measured in radians.\n   * @param {Boolean} anticlockwise\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @protected\n   * @chainable\n   **/\n\n  p.a = p.arc;\n  /**\n   * Shortcut to rect.\n   * @method r\n   * @param {Number} x\n   * @param {Number} y\n   * @param {Number} w Width of the rectangle\n   * @param {Number} h Height of the rectangle\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   * @protected\n   **/\n\n  p.r = p.rect;\n  /**\n   * Shortcut to closePath.\n   * @method cp\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   * @protected\n   **/\n\n  p.cp = p.closePath;\n  /**\n   * Shortcut to clear.\n   * @method c\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   * @protected\n   **/\n\n  p.c = p.clear;\n  /**\n   * Shortcut to beginFill.\n   * @method f\n   * @param {String} color A CSS compatible color value (ex. \"red\", \"#FF0000\", or \"rgba(255,0,0,0.5)\"). Setting to\n   * null will result in no fill.\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   * @protected\n   **/\n\n  p.f = p.beginFill;\n  /**\n   * Shortcut to beginLinearGradientFill.\n   * @method lf\n   * @param {Array} colors An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define a gradient\n   * drawing from red to blue.\n   * @param {Array} ratios An array of gradient positions which correspond to the colors. For example, [0.1, 0.9] would draw\n   * the first color to 10% then interpolating to the second color at 90%.\n   * @param {Number} x0 The position of the first point defining the line that defines the gradient direction and size.\n   * @param {Number} y0 The position of the first point defining the line that defines the gradient direction and size.\n   * @param {Number} x1 The position of the second point defining the line that defines the gradient direction and size.\n   * @param {Number} y1 The position of the second point defining the line that defines the gradient direction and size.\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   * @protected\n   **/\n\n  p.lf = p.beginLinearGradientFill;\n  /**\n   * Shortcut to beginRadialGradientFill.\n   * @method rf\n   * @param {Array} colors An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define\n   * a gradient drawing from red to blue.\n   * @param {Array} ratios An array of gradient positions which correspond to the colors. For example, [0.1,\n   * 0.9] would draw the first color to 10% then interpolating to the second color at 90%.\n   * @param {Number} x0 Center position of the inner circle that defines the gradient.\n   * @param {Number} y0 Center position of the inner circle that defines the gradient.\n   * @param {Number} r0 Radius of the inner circle that defines the gradient.\n   * @param {Number} x1 Center position of the outer circle that defines the gradient.\n   * @param {Number} y1 Center position of the outer circle that defines the gradient.\n   * @param {Number} r1 Radius of the outer circle that defines the gradient.\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   * @protected\n   **/\n\n  p.rf = p.beginRadialGradientFill;\n  /**\n   * Shortcut to beginBitmapFill.\n   * @method bf\n   * @param {HTMLImageElement | HTMLCanvasElement | HTMLVideoElement} image The Image, Canvas, or Video object to use\n   * as the pattern.\n   * @param {String} repetition Optional. Indicates whether to repeat the image in the fill area. One of \"repeat\",\n   * \"repeat-x\", \"repeat-y\", or \"no-repeat\". Defaults to \"repeat\". Note that Firefox does not support \"repeat-x\" or\n   * \"repeat-y\" (latest tests were in FF 20.0), and will default to \"repeat\".\n   * @param {Matrix2D} matrix Optional. Specifies a transformation matrix for the bitmap fill. This transformation\n   * will be applied relative to the parent transform.\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   * @protected\n   **/\n\n  p.bf = p.beginBitmapFill;\n  /**\n   * Shortcut to endFill.\n   * @method ef\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   * @protected\n   **/\n\n  p.ef = p.endFill;\n  /**\n   * Shortcut to setStrokeStyle.\n   * @method ss\n   * @param {Number} thickness The width of the stroke.\n   * @param {String | Number} [caps=0] Indicates the type of caps to use at the end of lines. One of butt,\n   * round, or square. Defaults to \"butt\". Also accepts the values 0 (butt), 1 (round), and 2 (square) for use with\n   * the tiny API.\n   * @param {String | Number} [joints=0] Specifies the type of joints that should be used where two lines meet.\n   * One of bevel, round, or miter. Defaults to \"miter\". Also accepts the values 0 (miter), 1 (round), and 2 (bevel)\n   * for use with the tiny API.\n   * @param {Number} [miterLimit=10] If joints is set to \"miter\", then you can specify a miter limit ratio which\n   * controls at what point a mitered joint will be clipped.\n   * @param {Boolean} [ignoreScale=false] If true, the stroke will be drawn at the specified thickness regardless\n   * of active transformations.\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   * @protected\n   **/\n\n  p.ss = p.setStrokeStyle;\n  /**\n   * Shortcut to setStrokeDash.\n   * @method sd\n   * @param {Array} [segments] An array specifying the dash pattern, alternating between line and gap.\n   * For example, [20,10] would create a pattern of 20 pixel lines with 10 pixel gaps between them.\n   * Passing null or an empty array will clear any existing dash.\n   * @param {Number} [offset=0] The offset of the dash pattern. For example, you could increment this value to create a \"marching ants\" effect.\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   * @protected\n   **/\n\n  p.sd = p.setStrokeDash;\n  /**\n   * Shortcut to beginStroke.\n   * @method s\n   * @param {String} color A CSS compatible color value (ex. \"#FF0000\", \"red\", or \"rgba(255,0,0,0.5)\"). Setting to\n   * null will result in no stroke.\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   * @protected\n   **/\n\n  p.s = p.beginStroke;\n  /**\n   * Shortcut to beginLinearGradientStroke.\n   * @method ls\n   * @param {Array} colors An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define\n   * a gradient drawing from red to blue.\n   * @param {Array} ratios An array of gradient positions which correspond to the colors. For example, [0.1,\n   * 0.9] would draw the first color to 10% then interpolating to the second color at 90%.\n   * @param {Number} x0 The position of the first point defining the line that defines the gradient direction and size.\n   * @param {Number} y0 The position of the first point defining the line that defines the gradient direction and size.\n   * @param {Number} x1 The position of the second point defining the line that defines the gradient direction and size.\n   * @param {Number} y1 The position of the second point defining the line that defines the gradient direction and size.\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   * @protected\n   **/\n\n  p.ls = p.beginLinearGradientStroke;\n  /**\n   * Shortcut to beginRadialGradientStroke.\n   * @method rs\n   * @param {Array} colors An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define\n   * a gradient drawing from red to blue.\n   * @param {Array} ratios An array of gradient positions which correspond to the colors. For example, [0.1,\n   * 0.9] would draw the first color to 10% then interpolating to the second color at 90%, then draw the second color\n   * to 100%.\n   * @param {Number} x0 Center position of the inner circle that defines the gradient.\n   * @param {Number} y0 Center position of the inner circle that defines the gradient.\n   * @param {Number} r0 Radius of the inner circle that defines the gradient.\n   * @param {Number} x1 Center position of the outer circle that defines the gradient.\n   * @param {Number} y1 Center position of the outer circle that defines the gradient.\n   * @param {Number} r1 Radius of the outer circle that defines the gradient.\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   * @protected\n   **/\n\n  p.rs = p.beginRadialGradientStroke;\n  /**\n   * Shortcut to beginBitmapStroke.\n   * @method bs\n   * @param {HTMLImageElement | HTMLCanvasElement | HTMLVideoElement} image The Image, Canvas, or Video object to use\n   * as the pattern.\n   * @param {String} [repetition=repeat] Optional. Indicates whether to repeat the image in the fill area. One of\n   * \"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\". Defaults to \"repeat\".\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   * @protected\n   **/\n\n  p.bs = p.beginBitmapStroke;\n  /**\n   * Shortcut to endStroke.\n   * @method es\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   * @protected\n   **/\n\n  p.es = p.endStroke;\n  /**\n   * Shortcut to drawRect.\n   * @method dr\n   * @param {Number} x\n   * @param {Number} y\n   * @param {Number} w Width of the rectangle\n   * @param {Number} h Height of the rectangle\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   * @protected\n   **/\n\n  p.dr = p.drawRect;\n  /**\n   * Shortcut to drawRoundRect.\n   * @method rr\n   * @param {Number} x\n   * @param {Number} y\n   * @param {Number} w\n   * @param {Number} h\n   * @param {Number} radius Corner radius.\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   * @protected\n   **/\n\n  p.rr = p.drawRoundRect;\n  /**\n   * Shortcut to drawRoundRectComplex.\n   * @method rc\n   * @param {Number} x The horizontal coordinate to draw the round rect.\n   * @param {Number} y The vertical coordinate to draw the round rect.\n   * @param {Number} w The width of the round rect.\n   * @param {Number} h The height of the round rect.\n   * @param {Number} radiusTL Top left corner radius.\n   * @param {Number} radiusTR Top right corner radius.\n   * @param {Number} radiusBR Bottom right corner radius.\n   * @param {Number} radiusBL Bottom left corner radius.\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   * @protected\n   **/\n\n  p.rc = p.drawRoundRectComplex;\n  /**\n   * Shortcut to drawCircle.\n   * @method dc\n   * @param {Number} x x coordinate center point of circle.\n   * @param {Number} y y coordinate center point of circle.\n   * @param {Number} radius Radius of circle.\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   * @protected\n   **/\n\n  p.dc = p.drawCircle;\n  /**\n   * Shortcut to drawEllipse.\n   * @method de\n   * @param {Number} x The left coordinate point of the ellipse. Note that this is different from {{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}}\n   * which draws from center.\n   * @param {Number} y The top coordinate point of the ellipse. Note that this is different from {{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}}\n   * which draws from the center.\n   * @param {Number} w The height (horizontal diameter) of the ellipse. The horizontal radius will be half of this\n   * number.\n   * @param {Number} h The width (vertical diameter) of the ellipse. The vertical radius will be half of this number.\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   * @protected\n   **/\n\n  p.de = p.drawEllipse;\n  /**\n   * Shortcut to drawPolyStar.\n   * @method dp\n   * @param {Number} x Position of the center of the shape.\n   * @param {Number} y Position of the center of the shape.\n   * @param {Number} radius The outer radius of the shape.\n   * @param {Number} sides The number of points on the star or sides on the polygon.\n   * @param {Number} pointSize The depth or \"pointy-ness\" of the star points. A pointSize of 0 will draw a regular\n   * polygon (no points), a pointSize of 1 will draw nothing because the points are infinitely pointy.\n   * @param {Number} angle The angle of the first point / corner. For example a value of 0 will draw the first point\n   * directly to the right of the center.\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   * @protected\n   **/\n\n  p.dp = p.drawPolyStar;\n  /**\n   * Shortcut to decodePath.\n   * @method p\n   * @param {String} str The path string to decode.\n   * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n   * @chainable\n   * @protected\n   **/\n\n  p.p = p.decodePath; // private methods:\n\n  /**\n   * @method _updateInstructions\n   * @param commit\n   * @protected\n   **/\n\n  p._updateInstructions = function (commit) {\n    var instr = this._instructions,\n        active = this._activeInstructions,\n        commitIndex = this._commitIndex;\n\n    if (this._dirty && active.length) {\n      instr.length = commitIndex; // remove old, uncommitted commands\n\n      instr.push(Graphics.beginCmd);\n      var l = active.length,\n          ll = instr.length;\n      instr.length = ll + l;\n\n      for (var i = 0; i < l; i++) {\n        instr[i + ll] = active[i];\n      }\n\n      if (this._fill) {\n        instr.push(this._fill);\n      }\n\n      if (this._stroke) {\n        // doesn't need to be re-applied if it hasn't changed.\n        if (this._strokeDash !== this._oldStrokeDash) {\n          this._oldStrokeDash = this._strokeDash;\n          instr.push(this._strokeDash);\n        }\n\n        if (this._strokeStyle !== this._oldStrokeStyle) {\n          this._oldStrokeStyle = this._strokeStyle;\n          instr.push(this._strokeStyle);\n        }\n\n        instr.push(this._stroke);\n      }\n\n      this._dirty = false;\n    }\n\n    if (commit) {\n      active.length = 0;\n      this._commitIndex = instr.length;\n    }\n  };\n  /**\n   * @method _setFill\n   * @param fill\n   * @protected\n   **/\n\n\n  p._setFill = function (fill) {\n    this._updateInstructions(true);\n\n    this.command = this._fill = fill;\n    return this;\n  };\n  /**\n   * @method _setStroke\n   * @param stroke\n   * @protected\n   **/\n\n\n  p._setStroke = function (stroke) {\n    this._updateInstructions(true);\n\n    if (this.command = this._stroke = stroke) {\n      stroke.ignoreScale = this._strokeIgnoreScale;\n    }\n\n    return this;\n  }; // Command Objects:\n\n  /**\n   * @namespace Graphics\n   */\n\n  /**\n   * Graphics command object. See {{#crossLink \"Graphics/lineTo\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information. See {{#crossLink \"Graphics\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n   * @class LineTo\n   * @constructor\n   * @param {Number} x\n   * @param {Number} y\n   **/\n\n  /**\n   * @property x\n   * @type Number\n   */\n\n  /**\n   * @property y\n   * @type Number\n   */\n\n  /**\n   * Execute the Graphics command in the provided Canvas context.\n   * @method exec\n   * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n   */\n\n\n  (G.LineTo = function (x, y) {\n    this.x = x;\n    this.y = y;\n  }).prototype.exec = function (ctx) {\n    ctx.lineTo(this.x, this.y);\n  };\n  /**\n   * Graphics command object. See {{#crossLink \"Graphics/moveTo\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n   * @class MoveTo\n   * @constructor\n   * @param {Number} x\n   * @param {Number} y\n   **/\n\n  /**\n   * @property x\n   * @type Number\n   */\n\n  /**\n   * @property y\n   * @type Number\n   */\n\n  /**\n   * @method exec\n   * @param {CanvasRenderingContext2D} ctx\n   */\n\n\n  (G.MoveTo = function (x, y) {\n    this.x = x;\n    this.y = y;\n  }).prototype.exec = function (ctx) {\n    ctx.moveTo(this.x, this.y);\n  };\n  /**\n   * Graphics command object. See {{#crossLink \"Graphics/arcTo\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n   * @class ArcTo\n   * @constructor\n   * @param {Number} x1\n   * @param {Number} y1\n   * @param {Number} x2\n   * @param {Number} y2\n   * @param {Number} radius\n   **/\n\n  /**\n   * @property x1\n   * @type Number\n   */\n\n  /**\n   * @property y1\n   * @type Number\n   */\n\n  /**\n   * @property x2\n   * @type Number\n   */\n\n  /**\n   * @property y2\n   * @type Number\n   */\n\n  /**\n   * @property radius\n   * @type Number\n   */\n\n  /**\n   * Execute the Graphics command in the provided Canvas context.\n   * @method exec\n   * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n   */\n\n\n  (G.ArcTo = function (x1, y1, x2, y2, radius) {\n    this.x1 = x1;\n    this.y1 = y1;\n    this.x2 = x2;\n    this.y2 = y2;\n    this.radius = radius;\n  }).prototype.exec = function (ctx) {\n    ctx.arcTo(this.x1, this.y1, this.x2, this.y2, this.radius);\n  };\n  /**\n   * Graphics command object. See {{#crossLink \"Graphics/arc\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n   * @class Arc\n   * @constructor\n   * @param {Number} x\n   * @param {Number} y\n   * @param {Number} radius\n   * @param {Number} startAngle\n   * @param {Number} endAngle\n   * @param {Number} anticlockwise\n   **/\n\n  /**\n   * @property x\n   * @type Number\n   */\n\n  /**\n   * @property y\n   * @type Number\n   */\n\n  /**\n   * @property radius\n   * @type Number\n   */\n\n  /**\n   * @property startAngle\n   * @type Number\n   */\n\n  /**\n   * @property endAngle\n   * @type Number\n   */\n\n  /**\n   * @property anticlockwise\n   * @type Number\n   */\n\n  /**\n   * Execute the Graphics command in the provided Canvas context.\n   * @method exec\n   * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n   */\n\n\n  (G.Arc = function (x, y, radius, startAngle, endAngle, anticlockwise) {\n    this.x = x;\n    this.y = y;\n    this.radius = radius;\n    this.startAngle = startAngle;\n    this.endAngle = endAngle;\n    this.anticlockwise = !!anticlockwise;\n  }).prototype.exec = function (ctx) {\n    ctx.arc(this.x, this.y, this.radius, this.startAngle, this.endAngle, this.anticlockwise);\n  };\n  /**\n   * Graphics command object. See {{#crossLink \"Graphics/quadraticCurveTo\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n   * @class QuadraticCurveTo\n   * @constructor\n   * @param {Number} cpx\n   * @param {Number} cpy\n   * @param {Number} x\n   * @param {Number} y\n   **/\n\n  /**\n   * @property cpx\n   * @type Number\n   */\n\n  /**\n   * @property cpy\n   * @type Number\n   */\n\n  /**\n   * @property x\n   * @type Number\n   */\n\n  /**\n   * @property y\n   * @type Number\n   */\n\n  /**\n   * Execute the Graphics command in the provided Canvas context.\n   * @method exec\n   * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n   */\n\n\n  (G.QuadraticCurveTo = function (cpx, cpy, x, y) {\n    this.cpx = cpx;\n    this.cpy = cpy;\n    this.x = x;\n    this.y = y;\n  }).prototype.exec = function (ctx) {\n    ctx.quadraticCurveTo(this.cpx, this.cpy, this.x, this.y);\n  };\n  /**\n   * Graphics command object. See {{#crossLink \"Graphics/bezierCurveTo\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n   * @class BezierCurveTo\n   * @constructor\n   * @param {Number} cp1x\n   * @param {Number} cp1y\n   * @param {Number} cp2x\n   * @param {Number} cp2y\n   * @param {Number} x\n   * @param {Number} y\n   **/\n\n  /**\n   * @property cp1x\n   * @type Number\n   */\n\n  /**\n   * @property cp1y\n   * @type Number\n   */\n\n  /**\n   * @property cp2x\n   * @type Number\n   */\n\n  /**\n   * @property cp2y\n   * @type Number\n   */\n\n  /**\n   * @property x\n   * @type Number\n   */\n\n  /**\n   * @property y\n   * @type Number\n   */\n\n  /**\n   * Execute the Graphics command in the provided Canvas context.\n   * @method exec\n   * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n   */\n\n\n  (G.BezierCurveTo = function (cp1x, cp1y, cp2x, cp2y, x, y) {\n    this.cp1x = cp1x;\n    this.cp1y = cp1y;\n    this.cp2x = cp2x;\n    this.cp2y = cp2y;\n    this.x = x;\n    this.y = y;\n  }).prototype.exec = function (ctx) {\n    ctx.bezierCurveTo(this.cp1x, this.cp1y, this.cp2x, this.cp2y, this.x, this.y);\n  };\n  /**\n   * Graphics command object. See {{#crossLink \"Graphics/rect\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n   * @class Rect\n   * @constructor\n   * @param {Number} x\n   * @param {Number} y\n   * @param {Number} w\n   * @param {Number} h\n   **/\n\n  /**\n   * @property x\n   * @type Number\n   */\n\n  /**\n   * @property y\n   * @type Number\n   */\n\n  /**\n   * @property w\n   * @type Number\n   */\n\n  /**\n   * @property h\n   * @type Number\n   */\n\n  /**\n   * Execute the Graphics command in the provided Canvas context.\n   * @method exec\n   * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n   */\n\n\n  (G.Rect = function (x, y, w, h) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n  }).prototype.exec = function (ctx) {\n    ctx.rect(this.x, this.y, this.w, this.h);\n  };\n  /**\n   * Graphics command object. See {{#crossLink \"Graphics/closePath\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n   * @class ClosePath\n   * @constructor\n   **/\n\n  /**\n   * Execute the Graphics command in the provided Canvas context.\n   * @method exec\n   * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n   */\n\n\n  (G.ClosePath = function () {}).prototype.exec = function (ctx) {\n    ctx.closePath();\n  };\n  /**\n   * Graphics command object to begin a new path. See {{#crossLink \"Graphics\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n   * @class BeginPath\n   * @constructor\n   **/\n\n  /**\n   * Execute the Graphics command in the provided Canvas context.\n   * @method exec\n   * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n   */\n\n\n  (G.BeginPath = function () {}).prototype.exec = function (ctx) {\n    ctx.beginPath();\n  };\n  /**\n   * Graphics command object. See {{#crossLink \"Graphics/beginFill\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n   * @class Fill\n   * @constructor\n   * @param {Object} style A valid Context2D fillStyle.\n   * @param {Matrix2D} matrix\n   **/\n\n  /**\n   * A valid Context2D fillStyle.\n   * @property style\n   * @type Object\n   */\n\n  /**\n   * @property matrix\n   * @type Matrix2D\n   */\n\n  /**\n   * Execute the Graphics command in the provided Canvas context.\n   * @method exec\n   * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n   */\n\n\n  p = (G.Fill = function (style, matrix) {\n    this.style = style;\n    this.matrix = matrix;\n  }).prototype;\n\n  p.exec = function (ctx) {\n    if (!this.style) {\n      return;\n    }\n\n    ctx.fillStyle = this.style;\n    var mtx = this.matrix;\n\n    if (mtx) {\n      ctx.save();\n      ctx.transform(mtx.a, mtx.b, mtx.c, mtx.d, mtx.tx, mtx.ty);\n    }\n\n    ctx.fill();\n\n    if (mtx) {\n      ctx.restore();\n    }\n  };\n  /**\n   * Creates a linear gradient style and assigns it to {{#crossLink \"Fill/style:property\"}}{{/crossLink}}.\n   * See {{#crossLink \"Graphics/beginLinearGradientFill\"}}{{/crossLink}} for more information.\n   * @method linearGradient\n   * @param {Array} colors\n   *\n   * @param {Array} ratios\n   * @param {Number} x0\n   * @param {Number} y0\n   * @param {Number} x1\n   * @param {Number} y1\n   * @return {Fill} Returns this Fill object for chaining or assignment.\n   */\n\n\n  p.linearGradient = function (colors, ratios, x0, y0, x1, y1) {\n    var o = this.style = Graphics._ctx.createLinearGradient(x0, y0, x1, y1);\n\n    for (var i = 0, l = colors.length; i < l; i++) {\n      o.addColorStop(ratios[i], colors[i]);\n    }\n\n    o.props = {\n      colors: colors,\n      ratios: ratios,\n      x0: x0,\n      y0: y0,\n      x1: x1,\n      y1: y1,\n      type: \"linear\"\n    };\n    return this;\n  };\n  /**\n   * Creates a radial gradient style and assigns it to {{#crossLink \"Fill/style:property\"}}{{/crossLink}}.\n   * See {{#crossLink \"Graphics/beginRadialGradientFill\"}}{{/crossLink}} for more information.\n   * @method radialGradient\n   * @param {Array} colors\n   * @param {Array} ratios\n   * @param {Number} x0\n   * @param {Number} y0\n   * @param {Number} r0\n   * @param {Number} x1\n   * @param {Number} y1\n   * @param {Number} r1\n   * @return {Fill} Returns this Fill object for chaining or assignment.\n   */\n\n\n  p.radialGradient = function (colors, ratios, x0, y0, r0, x1, y1, r1) {\n    var o = this.style = Graphics._ctx.createRadialGradient(x0, y0, r0, x1, y1, r1);\n\n    for (var i = 0, l = colors.length; i < l; i++) {\n      o.addColorStop(ratios[i], colors[i]);\n    }\n\n    o.props = {\n      colors: colors,\n      ratios: ratios,\n      x0: x0,\n      y0: y0,\n      r0: r0,\n      x1: x1,\n      y1: y1,\n      r1: r1,\n      type: \"radial\"\n    };\n    return this;\n  };\n  /**\n   * Creates a bitmap fill style and assigns it to the {{#crossLink \"Fill/style:property\"}}{{/crossLink}}.\n   * See {{#crossLink \"Graphics/beginBitmapFill\"}}{{/crossLink}} for more information.\n   * @method bitmap\n   * @param {HTMLImageElement | HTMLCanvasElement | HTMLVideoElement} image  Must be loaded prior to creating a bitmap fill, or the fill will be empty.\n   * @param {String} [repetition] One of: repeat, repeat-x, repeat-y, or no-repeat.\n   * @return {Fill} Returns this Fill object for chaining or assignment.\n   */\n\n\n  p.bitmap = function (image, repetition) {\n    if (image.naturalWidth || image.getContext || image.readyState >= 2) {\n      var o = this.style = Graphics._ctx.createPattern(image, repetition || \"\");\n\n      o.props = {\n        image: image,\n        repetition: repetition,\n        type: \"bitmap\"\n      };\n    }\n\n    return this;\n  };\n\n  p.path = false;\n  /**\n   * Graphics command object. See {{#crossLink \"Graphics/beginStroke\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n   * @class Stroke\n   * @constructor\n   * @param {Object} style A valid Context2D fillStyle.\n   * @param {Boolean} ignoreScale\n   **/\n\n  /**\n   * A valid Context2D strokeStyle.\n   * @property style\n   * @type Object\n   */\n\n  /**\n   * @property ignoreScale\n   * @type Boolean\n   */\n\n  /**\n   * Execute the Graphics command in the provided Canvas context.\n   * @method exec\n   * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n   */\n\n  p = (G.Stroke = function (style, ignoreScale) {\n    this.style = style;\n    this.ignoreScale = ignoreScale;\n  }).prototype;\n\n  p.exec = function (ctx) {\n    if (!this.style) {\n      return;\n    }\n\n    ctx.strokeStyle = this.style;\n\n    if (this.ignoreScale) {\n      ctx.save();\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\n    }\n\n    ctx.stroke();\n\n    if (this.ignoreScale) {\n      ctx.restore();\n    }\n  };\n  /**\n   * Creates a linear gradient style and assigns it to {{#crossLink \"Stroke/style:property\"}}{{/crossLink}}.\n   * See {{#crossLink \"Graphics/beginLinearGradientStroke\"}}{{/crossLink}} for more information.\n   * @method linearGradient\n   * @param {Array} colors\n   * @param {Array} ratios\n   * @param {Number} x0\n   * @param {Number} y0\n   * @param {Number} x1\n   * @param {Number} y1\n   * @return {Fill} Returns this Stroke object for chaining or assignment.\n   */\n\n\n  p.linearGradient = G.Fill.prototype.linearGradient;\n  /**\n   * Creates a radial gradient style and assigns it to {{#crossLink \"Stroke/style:property\"}}{{/crossLink}}.\n   * See {{#crossLink \"Graphics/beginRadialGradientStroke\"}}{{/crossLink}} for more information.\n   * @method radialGradient\n   * @param {Array} colors\n   * @param {Array} ratios\n   * @param {Number} x0\n   * @param {Number} y0\n   * @param {Number} r0\n   * @param {Number} x1\n   * @param {Number} y1\n   * @param {Number} r1\n   * @return {Fill} Returns this Stroke object for chaining or assignment.\n   */\n\n  p.radialGradient = G.Fill.prototype.radialGradient;\n  /**\n   * Creates a bitmap fill style and assigns it to {{#crossLink \"Stroke/style:property\"}}{{/crossLink}}.\n   * See {{#crossLink \"Graphics/beginBitmapStroke\"}}{{/crossLink}} for more information.\n   * @method bitmap\n   * @param {HTMLImageElement} image\n   * @param {String} [repetition] One of: repeat, repeat-x, repeat-y, or no-repeat.\n   * @return {Fill} Returns this Stroke object for chaining or assignment.\n   */\n\n  p.bitmap = G.Fill.prototype.bitmap;\n  p.path = false;\n  /**\n   * Graphics command object. See {{#crossLink \"Graphics/setStrokeStyle\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n   * @class StrokeStyle\n   * @constructor\n   * @param {Number} width\n   * @param {String} [caps=butt]\n   * @param {String} [joints=miter]\n   * @param {Number} [miterLimit=10]\n   * @param {Boolean} [ignoreScale=false]\n   **/\n\n  /**\n   * @property width\n   * @type Number\n   */\n\n  /**\n   * One of: butt, round, square\n   * @property caps\n   * @type String\n   */\n\n  /**\n   * One of: round, bevel, miter\n   * @property joints\n   * @type String\n   */\n\n  /**\n   * @property miterLimit\n   * @type Number\n   */\n\n  /**\n   * Execute the Graphics command in the provided Canvas context.\n   * @method exec\n   * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n   */\n\n  p = (G.StrokeStyle = function (width, caps, joints, miterLimit, ignoreScale) {\n    this.width = width;\n    this.caps = caps;\n    this.joints = joints;\n    this.miterLimit = miterLimit;\n    this.ignoreScale = ignoreScale;\n  }).prototype;\n\n  p.exec = function (ctx) {\n    ctx.lineWidth = this.width == null ? \"1\" : this.width;\n    ctx.lineCap = this.caps == null ? \"butt\" : isNaN(this.caps) ? this.caps : Graphics.STROKE_CAPS_MAP[this.caps];\n    ctx.lineJoin = this.joints == null ? \"miter\" : isNaN(this.joints) ? this.joints : Graphics.STROKE_JOINTS_MAP[this.joints];\n    ctx.miterLimit = this.miterLimit == null ? \"10\" : this.miterLimit;\n    ctx.ignoreScale = this.ignoreScale == null ? false : this.ignoreScale;\n  };\n\n  p.path = false;\n  /**\n   * Graphics command object. See {{#crossLink \"Graphics/setStrokeDash\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n   * @class StrokeDash\n   * @constructor\n   * @param {Array} [segments]\n   * @param {Number} [offset=0]\n   **/\n\n  /**\n   * @property segments\n   * @type Array\n   */\n\n  /**\n   * @property offset\n   * @type Number\n   */\n\n  /**\n   * Execute the Graphics command in the provided Canvas context.\n   * @method exec\n   * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n   */\n\n  (G.StrokeDash = function (segments, offset) {\n    this.segments = segments;\n    this.offset = offset || 0;\n  }).prototype.exec = function (ctx) {\n    if (ctx.setLineDash) {\n      // feature detection.\n      ctx.setLineDash(this.segments || G.StrokeDash.EMPTY_SEGMENTS); // instead of [] to reduce churn.\n\n      ctx.lineDashOffset = this.offset || 0;\n    }\n  };\n  /**\n   * The default value for segments (ie. no dash).\n   * @property EMPTY_SEGMENTS\n   * @static\n   * @final\n   * @readonly\n   * @protected\n   * @type {Array}\n   **/\n\n\n  G.StrokeDash.EMPTY_SEGMENTS = [];\n  /**\n   * Graphics command object. See {{#crossLink \"Graphics/drawRoundRectComplex\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n   * @class RoundRect\n   * @constructor\n   * @param {Number} x\n   * @param {Number} y\n   * @param {Number} w\n   * @param {Number} h\n   * @param {Number} radiusTL\n   * @param {Number} radiusTR\n   * @param {Number} radiusBR\n   * @param {Number} radiusBL\n   **/\n\n  /**\n   * @property x\n   * @type Number\n   */\n\n  /**\n   * @property y\n   * @type Number\n   */\n\n  /**\n   * @property w\n   * @type Number\n   */\n\n  /**\n   * @property h\n   * @type Number\n   */\n\n  /**\n   * @property radiusTL\n   * @type Number\n   */\n\n  /**\n   * @property radiusTR\n   * @type Number\n   */\n\n  /**\n   * @property radiusBR\n   * @type Number\n   */\n\n  /**\n   * @property radiusBL\n   * @type Number\n   */\n\n  /**\n   * Execute the Graphics command in the provided Canvas context.\n   * @method exec\n   * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n   */\n\n  (G.RoundRect = function (x, y, w, h, radiusTL, radiusTR, radiusBR, radiusBL) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n    this.radiusTL = radiusTL;\n    this.radiusTR = radiusTR;\n    this.radiusBR = radiusBR;\n    this.radiusBL = radiusBL;\n  }).prototype.exec = function (ctx) {\n    var max = (w < h ? w : h) / 2;\n    var mTL = 0,\n        mTR = 0,\n        mBR = 0,\n        mBL = 0;\n    var x = this.x,\n        y = this.y,\n        w = this.w,\n        h = this.h;\n    var rTL = this.radiusTL,\n        rTR = this.radiusTR,\n        rBR = this.radiusBR,\n        rBL = this.radiusBL;\n\n    if (rTL < 0) {\n      rTL *= mTL = -1;\n    }\n\n    if (rTL > max) {\n      rTL = max;\n    }\n\n    if (rTR < 0) {\n      rTR *= mTR = -1;\n    }\n\n    if (rTR > max) {\n      rTR = max;\n    }\n\n    if (rBR < 0) {\n      rBR *= mBR = -1;\n    }\n\n    if (rBR > max) {\n      rBR = max;\n    }\n\n    if (rBL < 0) {\n      rBL *= mBL = -1;\n    }\n\n    if (rBL > max) {\n      rBL = max;\n    }\n\n    ctx.moveTo(x + w - rTR, y);\n    ctx.arcTo(x + w + rTR * mTR, y - rTR * mTR, x + w, y + rTR, rTR);\n    ctx.lineTo(x + w, y + h - rBR);\n    ctx.arcTo(x + w + rBR * mBR, y + h + rBR * mBR, x + w - rBR, y + h, rBR);\n    ctx.lineTo(x + rBL, y + h);\n    ctx.arcTo(x - rBL * mBL, y + h + rBL * mBL, x, y + h - rBL, rBL);\n    ctx.lineTo(x, y + rTL);\n    ctx.arcTo(x - rTL * mTL, y - rTL * mTL, x + rTL, y, rTL);\n    ctx.closePath();\n  };\n  /**\n   * Graphics command object. See {{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n   * @class Circle\n   * @constructor\n   * @param {Number} x\n   * @param {Number} y\n   * @param {Number} radius\n   **/\n\n  /**\n   * @property x\n   * @type Number\n   */\n\n  /**\n   * @property y\n   * @type Number\n   */\n\n  /**\n   * @property radius\n   * @type Number\n   */\n\n  /**\n   * Execute the Graphics command in the provided Canvas context.\n   * @method exec\n   * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n   */\n\n\n  (G.Circle = function (x, y, radius) {\n    this.x = x;\n    this.y = y;\n    this.radius = radius;\n  }).prototype.exec = function (ctx) {\n    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);\n  };\n  /**\n   * Graphics command object. See {{#crossLink \"Graphics/drawEllipse\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n   * @class Ellipse\n   * @constructor\n   * @param {Number} x\n   * @param {Number} y\n   * @param {Number} w\n   * @param {Number} h\n   **/\n\n  /**\n   * @property x\n   * @type Number\n   */\n\n  /**\n   * @property y\n   * @type Number\n   */\n\n  /**\n   * @property w\n   * @type Number\n   */\n\n  /**\n   * @property h\n   * @type Number\n   */\n\n  /**\n   * Execute the Graphics command in the provided Canvas context.\n   * @method exec\n   * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n   */\n\n\n  (G.Ellipse = function (x, y, w, h) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n  }).prototype.exec = function (ctx) {\n    var x = this.x,\n        y = this.y;\n    var w = this.w,\n        h = this.h;\n    var k = 0.5522848;\n    var ox = w / 2 * k;\n    var oy = h / 2 * k;\n    var xe = x + w;\n    var ye = y + h;\n    var xm = x + w / 2;\n    var ym = y + h / 2;\n    ctx.moveTo(x, ym);\n    ctx.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\n    ctx.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\n    ctx.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\n    ctx.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\n  };\n  /**\n   * Graphics command object. See {{#crossLink \"Graphics/drawPolyStar\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n   * @class PolyStar\n   * @constructor\n   * @param {Number} x\n   * @param {Number} y\n   * @param {Number} radius\n   * @param {Number} sides\n   * @param {Number} pointSize\n   * @param {Number} angle\n   **/\n\n  /**\n   * @property x\n   * @type Number\n   */\n\n  /**\n   * @property y\n   * @type Number\n   */\n\n  /**\n   * @property radius\n   * @type Number\n   */\n\n  /**\n   * @property sides\n   * @type Number\n   */\n\n  /**\n   * @property pointSize\n   * @type Number\n   */\n\n  /**\n   * @property angle\n   * @type Number\n   */\n\n  /**\n   * Execute the Graphics command in the provided Canvas context.\n   * @method exec\n   * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n   */\n\n\n  (G.PolyStar = function (x, y, radius, sides, pointSize, angle) {\n    this.x = x;\n    this.y = y;\n    this.radius = radius;\n    this.sides = sides;\n    this.pointSize = pointSize;\n    this.angle = angle;\n  }).prototype.exec = function (ctx) {\n    var x = this.x,\n        y = this.y;\n    var radius = this.radius;\n    var angle = (this.angle || 0) / 180 * Math.PI;\n    var sides = this.sides;\n    var ps = 1 - (this.pointSize || 0);\n    var a = Math.PI / sides;\n    ctx.moveTo(x + Math.cos(angle) * radius, y + Math.sin(angle) * radius);\n\n    for (var i = 0; i < sides; i++) {\n      angle += a;\n\n      if (ps != 1) {\n        ctx.lineTo(x + Math.cos(angle) * radius * ps, y + Math.sin(angle) * radius * ps);\n      }\n\n      angle += a;\n      ctx.lineTo(x + Math.cos(angle) * radius, y + Math.sin(angle) * radius);\n    }\n\n    ctx.closePath();\n  }; // docced above.\n\n\n  Graphics.beginCmd = new G.BeginPath(); // so we don't have to instantiate multiple instances.\n\n  createjs.Graphics = Graphics;\n})(); //##############################################################################\n// DisplayObject.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor:\n\n  /**\n   * DisplayObject is an abstract class that should not be constructed directly. Instead construct subclasses such as\n   * {{#crossLink \"Container\"}}{{/crossLink}}, {{#crossLink \"Bitmap\"}}{{/crossLink}}, and {{#crossLink \"Shape\"}}{{/crossLink}}.\n   * DisplayObject is the base class for all display classes in the EaselJS library. It defines the core properties and\n   * methods that are shared between all display objects, such as transformation properties (x, y, scaleX, scaleY, etc),\n   * caching, and mouse handlers.\n   * @class DisplayObject\n   * @extends EventDispatcher\n   * @constructor\n   **/\n\n  function DisplayObject() {\n    this.EventDispatcher_constructor(); // public properties:\n\n    /**\n     * The alpha (transparency) for this display object. 0 is fully transparent, 1 is fully opaque.\n     * @property alpha\n     * @type {Number}\n     * @default 1\n     **/\n\n    this.alpha = 1;\n    /**\n     * If a cache is active, this returns the canvas that holds the cached version of this display object. See {{#crossLink \"cache\"}}{{/crossLink}}\n     * for more information.\n     * @property cacheCanvas\n     * @type {HTMLCanvasElement | Object}\n     * @default null\n     * @readonly\n     **/\n\n    this.cacheCanvas = null;\n    /**\n     * Returns an ID number that uniquely identifies the current cache for this display object. This can be used to\n     * determine if the cache has changed since a previous check.\n     * @property cacheID\n     * @type {Number}\n     * @default 0\n     */\n\n    this.cacheID = 0;\n    /**\n     * Unique ID for this display object. Makes display objects easier for some uses.\n     * @property id\n     * @type {Number}\n     * @default -1\n     **/\n\n    this.id = createjs.UID.get();\n    /**\n     * Indicates whether to include this object when running mouse interactions. Setting this to `false` for children\n     * of a {{#crossLink \"Container\"}}{{/crossLink}} will cause events on the Container to not fire when that child is\n     * clicked. Setting this property to `false` does not prevent the {{#crossLink \"Container/getObjectsUnderPoint\"}}{{/crossLink}}\n     * method from returning the child.\n     *\n     * <strong>Note:</strong> In EaselJS 0.7.0, the mouseEnabled property will not work properly with nested Containers. Please\n     * check out the latest NEXT version in <a href=\"https://github.com/CreateJS/EaselJS/tree/master/lib\">GitHub</a> for an updated version with this issue resolved. The fix will be\n     * provided in the next release of EaselJS.\n     * @property mouseEnabled\n     * @type {Boolean}\n     * @default true\n     **/\n\n    this.mouseEnabled = true;\n    /**\n     * If false, the tick will not run on this display object (or its children). This can provide some performance benefits.\n     * In addition to preventing the \"tick\" event from being dispatched, it will also prevent tick related updates\n     * on some display objects (ex. Sprite & MovieClip frame advancing, DOMElement visibility handling).\n     * @property tickEnabled\n     * @type Boolean\n     * @default true\n     **/\n\n    this.tickEnabled = true;\n    /**\n     * An optional name for this display object. Included in {{#crossLink \"DisplayObject/toString\"}}{{/crossLink}} . Useful for\n     * debugging.\n     * @property name\n     * @type {String}\n     * @default null\n     **/\n\n    this.name = null;\n    /**\n     * A reference to the {{#crossLink \"Container\"}}{{/crossLink}} or {{#crossLink \"Stage\"}}{{/crossLink}} object that\n     * contains this display object, or null if it has not been added\n     * to one.\n     * @property parent\n     * @final\n     * @type {Container}\n     * @default null\n     * @readonly\n     **/\n\n    this.parent = null;\n    /**\n     * The left offset for this display object's registration point. For example, to make a 100x100px Bitmap rotate\n     * around its center, you would set regX and {{#crossLink \"DisplayObject/regY:property\"}}{{/crossLink}} to 50.\n     * @property regX\n     * @type {Number}\n     * @default 0\n     **/\n\n    this.regX = 0;\n    /**\n     * The y offset for this display object's registration point. For example, to make a 100x100px Bitmap rotate around\n     * its center, you would set {{#crossLink \"DisplayObject/regX:property\"}}{{/crossLink}} and regY to 50.\n     * @property regY\n     * @type {Number}\n     * @default 0\n     **/\n\n    this.regY = 0;\n    /**\n     * The rotation in degrees for this display object.\n     * @property rotation\n     * @type {Number}\n     * @default 0\n     **/\n\n    this.rotation = 0;\n    /**\n     * The factor to stretch this display object horizontally. For example, setting scaleX to 2 will stretch the display\n     * object to twice its nominal width. To horizontally flip an object, set the scale to a negative number.\n     * @property scaleX\n     * @type {Number}\n     * @default 1\n     **/\n\n    this.scaleX = 1;\n    /**\n     * The factor to stretch this display object vertically. For example, setting scaleY to 0.5 will stretch the display\n     * object to half its nominal height. To vertically flip an object, set the scale to a negative number.\n     * @property scaleY\n     * @type {Number}\n     * @default 1\n     **/\n\n    this.scaleY = 1;\n    /**\n     * The factor to skew this display object horizontally.\n     * @property skewX\n     * @type {Number}\n     * @default 0\n     **/\n\n    this.skewX = 0;\n    /**\n     * The factor to skew this display object vertically.\n     * @property skewY\n     * @type {Number}\n     * @default 0\n     **/\n\n    this.skewY = 0;\n    /**\n     * A shadow object that defines the shadow to render on this display object. Set to `null` to remove a shadow. If\n     * null, this property is inherited from the parent container.\n     * @property shadow\n     * @type {Shadow}\n     * @default null\n     **/\n\n    this.shadow = null;\n    /**\n     * Indicates whether this display object should be rendered to the canvas and included when running the Stage\n     * {{#crossLink \"Stage/getObjectsUnderPoint\"}}{{/crossLink}} method.\n     * @property visible\n     * @type {Boolean}\n     * @default true\n     **/\n\n    this.visible = true;\n    /**\n     * The x (horizontal) position of the display object, relative to its parent.\n     * @property x\n     * @type {Number}\n     * @default 0\n     **/\n\n    this.x = 0;\n    /** The y (vertical) position of the display object, relative to its parent.\n     * @property y\n     * @type {Number}\n     * @default 0\n     **/\n\n    this.y = 0;\n    /**\n     * If set, defines the transformation for this display object, overriding all other transformation properties\n     * (x, y, rotation, scale, skew).\n     * @property transformMatrix\n     * @type {Matrix2D}\n     * @default null\n     **/\n\n    this.transformMatrix = null;\n    /**\n     * The composite operation indicates how the pixels of this display object will be composited with the elements\n     * behind it. If `null`, this property is inherited from the parent container. For more information, read the\n     * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#compositing\">\n     * whatwg spec on compositing</a>.\n     * @property compositeOperation\n     * @type {String}\n     * @default null\n     **/\n\n    this.compositeOperation = null;\n    /**\n     * Indicates whether the display object should be drawn to a whole pixel when\n     * {{#crossLink \"Stage/snapToPixelEnabled\"}}{{/crossLink}} is true. To enable/disable snapping on whole\n     * categories of display objects, set this value on the prototype (Ex. Text.prototype.snapToPixel = true).\n     * @property snapToPixel\n     * @type {Boolean}\n     * @default true\n     **/\n\n    this.snapToPixel = true;\n    /**\n     * An array of Filter objects to apply to this display object. Filters are only applied / updated when {{#crossLink \"cache\"}}{{/crossLink}}\n     * or {{#crossLink \"updateCache\"}}{{/crossLink}} is called on the display object, and only apply to the area that is\n     * cached.\n     * @property filters\n     * @type {Array}\n     * @default null\n     **/\n\n    this.filters = null;\n    /**\n     * A Shape instance that defines a vector mask (clipping path) for this display object.  The shape's transformation\n     * will be applied relative to the display object's parent coordinates (as if it were a child of the parent).\n     * @property mask\n     * @type {Shape}\n     * @default null\n     */\n\n    this.mask = null;\n    /**\n     * A display object that will be tested when checking mouse interactions or testing {{#crossLink \"Container/getObjectsUnderPoint\"}}{{/crossLink}}.\n     * The hit area will have its transformation applied relative to this display object's coordinate space (as though\n     * the hit test object were a child of this display object and relative to its regX/Y). The hitArea will be tested\n     * using only its own `alpha` value regardless of the alpha value on the target display object, or the target's\n     * ancestors (parents).\n     * \n     * If set on a {{#crossLink \"Container\"}}{{/crossLink}}, children of the Container will not receive mouse events.\n     * This is similar to setting {{#crossLink \"mouseChildren\"}}{{/crossLink}} to false.\n     *\n     * Note that hitArea is NOT currently used by the `hitTest()` method, nor is it supported for {{#crossLink \"Stage\"}}{{/crossLink}}.\n     * @property hitArea\n     * @type {DisplayObject}\n     * @default null\n     */\n\n    this.hitArea = null;\n    /**\n     * A CSS cursor (ex. \"pointer\", \"help\", \"text\", etc) that will be displayed when the user hovers over this display\n     * object. You must enable mouseover events using the {{#crossLink \"Stage/enableMouseOver\"}}{{/crossLink}} method to\n     * use this property. Setting a non-null cursor on a Container will override the cursor set on its descendants.\n     * @property cursor\n     * @type {String}\n     * @default null\n     */\n\n    this.cursor = null; // private properties:\n\n    /**\n     * @property _cacheOffsetX\n     * @protected\n     * @type {Number}\n     * @default 0\n     **/\n\n    this._cacheOffsetX = 0;\n    /**\n     * @property _cacheOffsetY\n     * @protected\n     * @type {Number}\n     * @default 0\n     **/\n\n    this._cacheOffsetY = 0;\n    /**\n     * @property _filterOffsetX\n     * @protected\n     * @type {Number}\n     * @default 0\n     **/\n\n    this._filterOffsetX = 0;\n    /**\n     * @property _filterOffsetY\n     * @protected\n     * @type {Number}\n     * @default 0\n     **/\n\n    this._filterOffsetY = 0;\n    /**\n     * @property _cacheScale\n     * @protected\n     * @type {Number}\n     * @default 1\n     **/\n\n    this._cacheScale = 1;\n    /**\n    * @property _cacheDataURLID\n    * @protected\n    * @type {Number}\n    * @default 0\n    */\n\n    this._cacheDataURLID = 0;\n    /**\n    * @property _cacheDataURL\n    * @protected\n    * @type {String}\n    * @default null\n    */\n\n    this._cacheDataURL = null;\n    /**\n     * @property _props\n     * @protected\n     * @type {DisplayObject}\n     * @default null\n     **/\n\n    this._props = new createjs.DisplayProps();\n    /**\n     * @property _rectangle\n     * @protected\n     * @type {Rectangle}\n     * @default null\n     **/\n\n    this._rectangle = new createjs.Rectangle();\n    /**\n     * @property _bounds\n     * @protected\n     * @type {Rectangle}\n     * @default null\n     **/\n\n    this._bounds = null;\n  }\n\n  var p = createjs.extend(DisplayObject, createjs.EventDispatcher); // TODO: deprecated\n  // p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n  // static properties:\n\n  /**\n   * Listing of mouse event names. Used in _hasMouseEventListener.\n   * @property _MOUSE_EVENTS\n   * @protected\n   * @static\n   * @type {Array}\n   **/\n\n  DisplayObject._MOUSE_EVENTS = [\"click\", \"dblclick\", \"mousedown\", \"mouseout\", \"mouseover\", \"pressmove\", \"pressup\", \"rollout\", \"rollover\"];\n  /**\n   * Suppresses errors generated when using features like hitTest, mouse events, and {{#crossLink \"getObjectsUnderPoint\"}}{{/crossLink}}\n   * with cross domain content.\n   * @property suppressCrossDomainErrors\n   * @static\n   * @type {Boolean}\n   * @default false\n   **/\n\n  DisplayObject.suppressCrossDomainErrors = false;\n  /**\n   * @property _snapToPixelEnabled\n   * @protected\n   * @static\n   * @type {Boolean}\n   * @default false\n   **/\n\n  DisplayObject._snapToPixelEnabled = false; // stage.snapToPixelEnabled is temporarily copied here during a draw to provide global access.\n\n  /**\n   * @property _hitTestCanvas\n   * @type {HTMLCanvasElement | Object}\n   * @static\n   * @protected\n   **/\n\n  /**\n   * @property _hitTestContext\n   * @type {CanvasRenderingContext2D}\n   * @static\n   * @protected\n   **/\n\n  var canvas = createjs.createCanvas ? createjs.createCanvas() : document.createElement(\"canvas\"); // prevent errors on load in browsers without canvas.\n\n  if (canvas.getContext) {\n    DisplayObject._hitTestCanvas = canvas;\n    DisplayObject._hitTestContext = canvas.getContext(\"2d\");\n    canvas.width = canvas.height = 1;\n  }\n  /**\n   * @property _nextCacheID\n   * @type {Number}\n   * @static\n   * @protected\n   **/\n\n\n  DisplayObject._nextCacheID = 1; // events:\n\n  /**\n   * Dispatched when the user presses their left mouse button over the display object. See the \n   * {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\n   * @event mousedown\n   * @since 0.6.0\n   */\n\n  /**\n   * Dispatched when the user presses their left mouse button and then releases it while over the display object.\n   * See the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\n   * @event click\n   * @since 0.6.0\n   */\n\n  /**\n   * Dispatched when the user double clicks their left mouse button over this display object.\n   * See the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\n   * @event dblclick\n   * @since 0.6.0\n   */\n\n  /**\n   * Dispatched when the user's mouse enters this display object. This event must be enabled using \n   * {{#crossLink \"Stage/enableMouseOver\"}}{{/crossLink}}. See also {{#crossLink \"DisplayObject/rollover:event\"}}{{/crossLink}}.\n   * See the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\n   * @event mouseover\n   * @since 0.6.0\n   */\n\n  /**\n   * Dispatched when the user's mouse leaves this display object. This event must be enabled using \n   * {{#crossLink \"Stage/enableMouseOver\"}}{{/crossLink}}. See also {{#crossLink \"DisplayObject/rollout:event\"}}{{/crossLink}}.\n   * See the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\n   * @event mouseout\n   * @since 0.6.0\n   */\n\n  /**\n   * This event is similar to {{#crossLink \"DisplayObject/mouseover:event\"}}{{/crossLink}}, with the following\n   * differences: it does not bubble, and it considers {{#crossLink \"Container\"}}{{/crossLink}} instances as an\n   * aggregate of their content.\n   * \n   * For example, myContainer contains two overlapping children: shapeA and shapeB. The user moves their mouse over\n   * shapeA and then directly on to shapeB. With a listener for {{#crossLink \"mouseover:event\"}}{{/crossLink}} on\n   * myContainer, two events would be received, each targeting a child element:<OL>\n   * <LI>when the mouse enters shapeA (target=shapeA)</LI>\n   * <LI>when the mouse enters shapeB (target=shapeB)</LI>\n   * </OL>\n   * However, with a listener for \"rollover\" instead, only a single event is received when the mouse first enters\n   * the aggregate myContainer content (target=myContainer).\n   * \n   * This event must be enabled using {{#crossLink \"Stage/enableMouseOver\"}}{{/crossLink}}.\n   * See the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\n   * @event rollover\n   * @since 0.7.0\n   */\n\n  /**\n   * This event is similar to {{#crossLink \"DisplayObject/mouseout:event\"}}{{/crossLink}}, with the following\n   * differences: it does not bubble, and it considers {{#crossLink \"Container\"}}{{/crossLink}} instances as an\n   * aggregate of their content.\n   * \n   * For example, myContainer contains two overlapping children: shapeA and shapeB. The user moves their mouse over\n   * shapeA, then directly on to shapeB, then off both. With a listener for {{#crossLink \"mouseout:event\"}}{{/crossLink}}\n   * on myContainer, two events would be received, each targeting a child element:<OL>\n   * <LI>when the mouse leaves shapeA (target=shapeA)</LI>\n   * <LI>when the mouse leaves shapeB (target=shapeB)</LI>\n   * </OL>\n   * However, with a listener for \"rollout\" instead, only a single event is received when the mouse leaves\n   * the aggregate myContainer content (target=myContainer).\n   * \n   * This event must be enabled using {{#crossLink \"Stage/enableMouseOver\"}}{{/crossLink}}.\n   * See the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\n   * @event rollout\n   * @since 0.7.0\n   */\n\n  /**\n   * After a {{#crossLink \"DisplayObject/mousedown:event\"}}{{/crossLink}} occurs on a display object, a pressmove\n   * event will be generated on that object whenever the mouse moves until the mouse press is released. This can be\n   * useful for dragging and similar operations.\n   * @event pressmove\n   * @since 0.7.0\n   */\n\n  /**\n   * After a {{#crossLink \"DisplayObject/mousedown:event\"}}{{/crossLink}} occurs on a display object, a pressup event\n   * will be generated on that object when that mouse press is released. This can be useful for dragging and similar\n   * operations.\n   * @event pressup\n   * @since 0.7.0\n   */\n\n  /**\n   * Dispatched when the display object is added to a parent container.\n   * @event added\n   */\n\n  /**\n   * Dispatched when the display object is removed from its parent container.\n   * @event removed\n   */\n\n  /**\n   * Dispatched on each display object on a stage whenever the stage updates. This occurs immediately before the\n   * rendering (draw) pass. When {{#crossLink \"Stage/update\"}}{{/crossLink}} is called, first all display objects on\n   * the stage dispatch the tick event, then all of the display objects are drawn to stage. Children will have their\n   * {{#crossLink \"tick:event\"}}{{/crossLink}} event dispatched in order of their depth prior to the event being\n   * dispatched on their parent.\n   * @event tick\n   * @param {Object} target The object that dispatched the event.\n   * @param {String} type The event type.\n   * @param {Array} params An array containing any arguments that were passed to the Stage.update() method. For\n   *      example if you called stage.update(\"hello\"), then the params would be [\"hello\"].\n   * @since 0.6.0\n   */\n  // getter / setters:\n\n  /**\n   * Use the {{#crossLink \"DisplayObject/stage:property\"}}{{/crossLink}} property instead.\n   * @method getStage\n   * @return {Stage}\n   * @deprecated\n   **/\n\n  p.getStage = function () {\n    // uses dynamic access to avoid circular dependencies;\n    var o = this,\n        _Stage = createjs[\"Stage\"];\n\n    while (o.parent) {\n      o = o.parent;\n    }\n\n    if (o instanceof _Stage) {\n      return o;\n    }\n\n    return null;\n  };\n  /**\n   * Returns the Stage instance that this display object will be rendered on, or null if it has not been added to one.\n   * @property stage\n   * @type {Stage}\n   * @readonly\n   **/\n\n\n  try {\n    Object.defineProperties(p, {\n      stage: {\n        get: p.getStage\n      }\n    });\n  } catch (e) {} // public methods:\n\n  /**\n   * Returns true or false indicating whether the display object would be visible if drawn to a canvas.\n   * This does not account for whether it would be visible within the boundaries of the stage.\n   *\n   * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n   * @method isVisible\n   * @return {Boolean} Boolean indicating whether the display object would be visible if drawn to a canvas\n   **/\n\n\n  p.isVisible = function () {\n    return !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0);\n  };\n  /**\n   * Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.\n   * Returns <code>true</code> if the draw was handled (useful for overriding functionality).\n   *\n   * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n   * @method draw\n   * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n   * @param {Boolean} [ignoreCache=false] Indicates whether the draw operation should ignore any current cache. For example,\n   * used for drawing the cache (to prevent it from simply drawing an existing cache back into itself).\n   * @return {Boolean}\n   **/\n\n\n  p.draw = function (ctx, ignoreCache) {\n    var cacheCanvas = this.cacheCanvas;\n\n    if (ignoreCache || !cacheCanvas) {\n      return false;\n    }\n\n    var scale = this._cacheScale;\n    ctx.drawImage(cacheCanvas, this._cacheOffsetX + this._filterOffsetX, this._cacheOffsetY + this._filterOffsetY, cacheCanvas.width / scale, cacheCanvas.height / scale);\n    return true;\n  };\n  /**\n   * Applies this display object's transformation, alpha, globalCompositeOperation, clipping path (mask), and shadow\n   * to the specified context. This is typically called prior to {{#crossLink \"DisplayObject/draw\"}}{{/crossLink}}.\n   * @method updateContext\n   * @param {CanvasRenderingContext2D} ctx The canvas 2D to update.\n   **/\n\n\n  p.updateContext = function (ctx) {\n    var o = this,\n        mask = o.mask,\n        mtx = o._props.matrix;\n\n    if (mask && mask.graphics && !mask.graphics.isEmpty()) {\n      mask.getMatrix(mtx);\n      ctx.transform(mtx.a, mtx.b, mtx.c, mtx.d, mtx.tx, mtx.ty);\n      mask.graphics.drawAsPath(ctx);\n      ctx.clip();\n      mtx.invert();\n      ctx.transform(mtx.a, mtx.b, mtx.c, mtx.d, mtx.tx, mtx.ty);\n    }\n\n    this.getMatrix(mtx);\n    var tx = mtx.tx,\n        ty = mtx.ty;\n\n    if (DisplayObject._snapToPixelEnabled && o.snapToPixel) {\n      tx = tx + (tx < 0 ? -0.5 : 0.5) | 0;\n      ty = ty + (ty < 0 ? -0.5 : 0.5) | 0;\n    }\n\n    ctx.transform(mtx.a, mtx.b, mtx.c, mtx.d, tx, ty);\n    ctx.globalAlpha *= o.alpha;\n\n    if (o.compositeOperation) {\n      ctx.globalCompositeOperation = o.compositeOperation;\n    }\n\n    if (o.shadow) {\n      this._applyShadow(ctx, o.shadow);\n    }\n  };\n  /**\n   * Draws the display object into a new canvas, which is then used for subsequent draws. For complex content\n   * that does not change frequently (ex. a Container with many children that do not move, or a complex vector Shape),\n   * this can provide for much faster rendering because the content does not need to be re-rendered each tick. The\n   * cached display object can be moved, rotated, faded, etc freely, however if its content changes, you must\n   * manually update the cache by calling <code>updateCache()</code> or <code>cache()</code> again. You must specify\n   * the cache area via the x, y, w, and h parameters. This defines the rectangle that will be rendered and cached\n   * using this display object's coordinates.\n   *\n   * <h4>Example</h4>\n   * For example if you defined a Shape that drew a circle at 0, 0 with a radius of 25:\n   *\n   *      var shape = new createjs.Shape();\n   *      shape.graphics.beginFill(\"#ff0000\").drawCircle(0, 0, 25);\n   *      myShape.cache(-25, -25, 50, 50);\n   *\n   * Note that filters need to be defined <em>before</em> the cache is applied. Check out the {{#crossLink \"Filter\"}}{{/crossLink}}\n   * class for more information. Some filters (ex. BlurFilter) will not work as expected in conjunction with the scale param.\n   * \n   * Usually, the resulting cacheCanvas will have the dimensions width*scale by height*scale, however some filters (ex. BlurFilter)\n   * will add padding to the canvas dimensions.\n   *\n   * @method cache\n   * @param {Number} x The x coordinate origin for the cache region.\n   * @param {Number} y The y coordinate origin for the cache region.\n   * @param {Number} width The width of the cache region.\n   * @param {Number} height The height of the cache region.\n   * @param {Number} [scale=1] The scale at which the cache will be created. For example, if you cache a vector shape using\n   * \tmyShape.cache(0,0,100,100,2) then the resulting cacheCanvas will be 200x200 px. This lets you scale and rotate\n   * \tcached elements with greater fidelity. Default is 1.\n   **/\n\n\n  p.cache = function (x, y, width, height, scale) {\n    // draw to canvas.\n    scale = scale || 1;\n\n    if (!this.cacheCanvas) {\n      this.cacheCanvas = createjs.createCanvas ? createjs.createCanvas() : document.createElement(\"canvas\");\n    }\n\n    this._cacheWidth = width;\n    this._cacheHeight = height;\n    this._cacheOffsetX = x;\n    this._cacheOffsetY = y;\n    this._cacheScale = scale;\n    this.updateCache();\n  };\n  /**\n   * Redraws the display object to its cache. Calling updateCache without an active cache will throw an error.\n   * If compositeOperation is null the current cache will be cleared prior to drawing. Otherwise the display object\n   * will be drawn over the existing cache using the specified compositeOperation.\n   *\n   * <h4>Example</h4>\n   * Clear the current graphics of a cached shape, draw some new instructions, and then update the cache. The new line\n   * will be drawn on top of the old one.\n   *\n   *      // Not shown: Creating the shape, and caching it.\n   *      shapeInstance.clear();\n   *      shapeInstance.setStrokeStyle(3).beginStroke(\"#ff0000\").moveTo(100, 100).lineTo(200,200);\n   *      shapeInstance.updateCache();\n   *\n   * @method updateCache\n   * @param {String} compositeOperation The compositeOperation to use, or null to clear the cache and redraw it.\n   * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#compositing\">\n   * whatwg spec on compositing</a>.\n   **/\n\n\n  p.updateCache = function (compositeOperation) {\n    var cacheCanvas = this.cacheCanvas;\n\n    if (!cacheCanvas) {\n      throw \"cache() must be called before updateCache()\";\n    }\n\n    var scale = this._cacheScale,\n        offX = this._cacheOffsetX * scale,\n        offY = this._cacheOffsetY * scale;\n    var w = this._cacheWidth,\n        h = this._cacheHeight,\n        ctx = cacheCanvas.getContext(\"2d\");\n\n    var fBounds = this._getFilterBounds();\n\n    offX += this._filterOffsetX = fBounds.x;\n    offY += this._filterOffsetY = fBounds.y;\n    w = Math.ceil(w * scale) + fBounds.width;\n    h = Math.ceil(h * scale) + fBounds.height;\n\n    if (w != cacheCanvas.width || h != cacheCanvas.height) {\n      // TODO: it would be nice to preserve the content if there is a compositeOperation.\n      cacheCanvas.width = w;\n      cacheCanvas.height = h;\n    } else if (!compositeOperation) {\n      ctx.clearRect(0, 0, w + 1, h + 1);\n    }\n\n    ctx.save();\n    ctx.globalCompositeOperation = compositeOperation;\n    ctx.setTransform(scale, 0, 0, scale, -offX, -offY);\n    this.draw(ctx, true); // TODO: filters and cache scale don't play well together at present.\n\n    this._applyFilters();\n\n    ctx.restore();\n    this.cacheID = DisplayObject._nextCacheID++;\n  };\n  /**\n   * Clears the current cache. See {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}} for more information.\n   * @method uncache\n   **/\n\n\n  p.uncache = function () {\n    this._cacheDataURL = this.cacheCanvas = null;\n    this.cacheID = this._cacheOffsetX = this._cacheOffsetY = this._filterOffsetX = this._filterOffsetY = 0;\n    this._cacheScale = 1;\n  };\n  /**\n   * Returns a data URL for the cache, or null if this display object is not cached.\n   * Uses cacheID to ensure a new data URL is not generated if the cache has not changed.\n   * @method getCacheDataURL\n   * @return {String} The image data url for the cache.\n   **/\n\n\n  p.getCacheDataURL = function () {\n    if (!this.cacheCanvas) {\n      return null;\n    }\n\n    if (this.cacheID != this._cacheDataURLID) {\n      this._cacheDataURL = this.cacheCanvas.toDataURL();\n    }\n\n    return this._cacheDataURL;\n  };\n  /**\n   * Transforms the specified x and y position from the coordinate space of the display object\n   * to the global (stage) coordinate space. For example, this could be used to position an HTML label\n   * over a specific point on a nested display object. Returns a Point instance with x and y properties\n   * correlating to the transformed coordinates on the stage.\n   *\n   * <h4>Example</h4>\n   *\n   *      displayObject.x = 300;\n   *      displayObject.y = 200;\n   *      stage.addChild(displayObject);\n   *      var point = displayObject.localToGlobal(100, 100);\n   *      // Results in x=400, y=300\n   *\n   * @method localToGlobal\n   * @param {Number} x The x position in the source display object to transform.\n   * @param {Number} y The y position in the source display object to transform.\n   * @param {Point | Object} [pt] An object to copy the result into. If omitted a new Point object with x/y properties will be returned. \n   * @return {Point} A Point instance with x and y properties correlating to the transformed coordinates\n   * on the stage.\n   **/\n\n\n  p.localToGlobal = function (x, y, pt) {\n    return this.getConcatenatedMatrix(this._props.matrix).transformPoint(x, y, pt || new createjs.Point());\n  };\n  /**\n   * Transforms the specified x and y position from the global (stage) coordinate space to the\n   * coordinate space of the display object. For example, this could be used to determine\n   * the current mouse position within the display object. Returns a Point instance with x and y properties\n   * correlating to the transformed position in the display object's coordinate space.\n   *\n   * <h4>Example</h4>\n   *\n   *      displayObject.x = 300;\n   *      displayObject.y = 200;\n   *      stage.addChild(displayObject);\n   *      var point = displayObject.globalToLocal(100, 100);\n   *      // Results in x=-200, y=-100\n   *\n   * @method globalToLocal\n   * @param {Number} x The x position on the stage to transform.\n   * @param {Number} y The y position on the stage to transform.\n   * @param {Point | Object} [pt] An object to copy the result into. If omitted a new Point object with x/y properties will be returned. \n   * @return {Point} A Point instance with x and y properties correlating to the transformed position in the\n   * display object's coordinate space.\n   **/\n\n\n  p.globalToLocal = function (x, y, pt) {\n    return this.getConcatenatedMatrix(this._props.matrix).invert().transformPoint(x, y, pt || new createjs.Point());\n  };\n  /**\n   * Transforms the specified x and y position from the coordinate space of this display object to the coordinate\n   * space of the target display object. Returns a Point instance with x and y properties correlating to the\n   * transformed position in the target's coordinate space. Effectively the same as using the following code with\n   * {{#crossLink \"DisplayObject/localToGlobal\"}}{{/crossLink}} and {{#crossLink \"DisplayObject/globalToLocal\"}}{{/crossLink}}.\n   *\n   *      var pt = this.localToGlobal(x, y);\n   *      pt = target.globalToLocal(pt.x, pt.y);\n   *\n   * @method localToLocal\n   * @param {Number} x The x position in the source display object to transform.\n   * @param {Number} y The y position on the source display object to transform.\n   * @param {DisplayObject} target The target display object to which the coordinates will be transformed.\n   * @param {Point | Object} [pt] An object to copy the result into. If omitted a new Point object with x/y properties will be returned. \n   * @return {Point} Returns a Point instance with x and y properties correlating to the transformed position\n   * in the target's coordinate space.\n   **/\n\n\n  p.localToLocal = function (x, y, target, pt) {\n    pt = this.localToGlobal(x, y, pt);\n    return target.globalToLocal(pt.x, pt.y, pt);\n  };\n  /**\n   * Shortcut method to quickly set the transform properties on the display object. All parameters are optional.\n   * Omitted parameters will have the default value set.\n   *\n   * <h4>Example</h4>\n   *\n   *      displayObject.setTransform(100, 100, 2, 2);\n   *\n   * @method setTransform\n   * @param {Number} [x=0] The horizontal translation (x position) in pixels\n   * @param {Number} [y=0] The vertical translation (y position) in pixels\n   * @param {Number} [scaleX=1] The horizontal scale, as a percentage of 1\n   * @param {Number} [scaleY=1] the vertical scale, as a percentage of 1\n   * @param {Number} [rotation=0] The rotation, in degrees\n   * @param {Number} [skewX=0] The horizontal skew factor\n   * @param {Number} [skewY=0] The vertical skew factor\n   * @param {Number} [regX=0] The horizontal registration point in pixels\n   * @param {Number} [regY=0] The vertical registration point in pixels\n   * @return {DisplayObject} Returns this instance. Useful for chaining commands.\n   * @chainable\n  */\n\n\n  p.setTransform = function (x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\n    this.x = x || 0;\n    this.y = y || 0;\n    this.scaleX = scaleX == null ? 1 : scaleX;\n    this.scaleY = scaleY == null ? 1 : scaleY;\n    this.rotation = rotation || 0;\n    this.skewX = skewX || 0;\n    this.skewY = skewY || 0;\n    this.regX = regX || 0;\n    this.regY = regY || 0;\n    return this;\n  };\n  /**\n   * Returns a matrix based on this object's current transform.\n   * @method getMatrix\n   * @param {Matrix2D} matrix Optional. A Matrix2D object to populate with the calculated values. If null, a new\n   * Matrix object is returned.\n   * @return {Matrix2D} A matrix representing this display object's transform.\n   **/\n\n\n  p.getMatrix = function (matrix) {\n    var o = this,\n        mtx = matrix && matrix.identity() || new createjs.Matrix2D();\n    return o.transformMatrix ? mtx.copy(o.transformMatrix) : mtx.appendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation, o.skewX, o.skewY, o.regX, o.regY);\n  };\n  /**\n   * Generates a Matrix2D object representing the combined transform of the display object and all of its\n   * parent Containers up to the highest level ancestor (usually the {{#crossLink \"Stage\"}}{{/crossLink}}). This can\n   * be used to transform positions between coordinate spaces, such as with {{#crossLink \"DisplayObject/localToGlobal\"}}{{/crossLink}}\n   * and {{#crossLink \"DisplayObject/globalToLocal\"}}{{/crossLink}}.\n   * @method getConcatenatedMatrix\n   * @param {Matrix2D} [matrix] A {{#crossLink \"Matrix2D\"}}{{/crossLink}} object to populate with the calculated values.\n   * If null, a new Matrix2D object is returned.\n   * @return {Matrix2D} The combined matrix.\n   **/\n\n\n  p.getConcatenatedMatrix = function (matrix) {\n    var o = this,\n        mtx = this.getMatrix(matrix);\n\n    while (o = o.parent) {\n      mtx.prependMatrix(o.getMatrix(o._props.matrix));\n    }\n\n    return mtx;\n  };\n  /**\n   * Generates a DisplayProps object representing the combined display properties of the  object and all of its\n   * parent Containers up to the highest level ancestor (usually the {{#crossLink \"Stage\"}}{{/crossLink}}).\n   * @method getConcatenatedDisplayProps\n   * @param {DisplayProps} [props] A {{#crossLink \"DisplayProps\"}}{{/crossLink}} object to populate with the calculated values.\n   * If null, a new DisplayProps object is returned.\n   * @return {DisplayProps} The combined display properties.\n   **/\n\n\n  p.getConcatenatedDisplayProps = function (props) {\n    props = props ? props.identity() : new createjs.DisplayProps();\n    var o = this,\n        mtx = o.getMatrix(props.matrix);\n\n    do {\n      props.prepend(o.visible, o.alpha, o.shadow, o.compositeOperation); // we do this to avoid problems with the matrix being used for both operations when o._props.matrix is passed in as the props param.\n      // this could be simplified (ie. just done as part of the prepend above) if we switched to using a pool.\n\n      if (o != this) {\n        mtx.prependMatrix(o.getMatrix(o._props.matrix));\n      }\n    } while (o = o.parent);\n\n    return props;\n  };\n  /**\n   * Tests whether the display object intersects the specified point in <em>local</em> coordinates (ie. draws a pixel\n   * with alpha > 0 at the specified position). This ignores the alpha, shadow, hitArea, mask, and compositeOperation\n   * of the display object.\n   *\n   * <h4>Example</h4>\n   *\n   * \t\tvar myShape = new createjs.Shape();\n   * \t\tmyShape.graphics.beginFill(\"red\").drawRect(100, 100, 20, 50);\n   *\n   * \t\tconsole.log(myShape.hitTest(10,10); // false\n   * \t\tconsole.log(myShape.hitTest(110, 25); // true\n   *\n   * Note that to use Stage coordinates (such as {{#crossLink \"Stage/mouseX:property\"}}{{/crossLink}}), they must\n   * first be converted to local coordinates:\n   *\n   *      stage.addEventListener(\"stagemousedown\", handleMouseDown);\n   *      function handleMouseDown(event) {\n   *      \tvar p = myShape.globalToLocal(stage.mouseX, stage.mouseY);\n   *          var hit = myShape.hitTest(p.x, p.y);\n   *      }\n   *\n   * Shape-to-shape collision is not currently supported by EaselJS.\n   *\n   * @method hitTest\n   * @param {Number} x The x position to check in the display object's local coordinates.\n   * @param {Number} y The y position to check in the display object's local coordinates.\n   * @return {Boolean} A Boolean indicating whether a visible portion of the DisplayObject intersect the specified\n   * local Point.\n  */\n\n\n  p.hitTest = function (x, y) {\n    var ctx = DisplayObject._hitTestContext;\n    ctx.setTransform(1, 0, 0, 1, -x, -y);\n    this.draw(ctx);\n\n    var hit = this._testHit(ctx);\n\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    ctx.clearRect(0, 0, 2, 2);\n    return hit;\n  };\n  /**\n   * Provides a chainable shortcut method for setting a number of properties on the instance.\n   *\n   * <h4>Example</h4>\n   *\n   *      var myGraphics = new createjs.Graphics().beginFill(\"#ff0000\").drawCircle(0, 0, 25);\n   *      var shape = stage.addChild(new createjs.Shape()).set({graphics:myGraphics, x:100, y:100, alpha:0.5});\n   *\n   * @method set\n   * @param {Object} props A generic object containing properties to copy to the DisplayObject instance.\n   * @return {DisplayObject} Returns the instance the method is called on (useful for chaining calls.)\n   * @chainable\n  */\n\n\n  p.set = function (props) {\n    for (var n in props) {\n      this[n] = props[n];\n    }\n\n    return this;\n  };\n  /**\n   * Returns a rectangle representing this object's bounds in its local coordinate system (ie. with no transformation).\n   * Objects that have been cached will return the bounds of the cache.\n   * \n   * Not all display objects can calculate their own bounds (ex. Shape). For these objects, you can use \n   * {{#crossLink \"DisplayObject/setBounds\"}}{{/crossLink}} so that they are included when calculating Container\n   * bounds.\n   * \n   * <table>\n   * \t<tr><td><b>All</b></td><td>\n   * \t\tAll display objects support setting bounds manually using setBounds(). Likewise, display objects that\n   * \t\thave been cached using cache() will return the bounds of their cache. Manual and cache bounds will override\n   * \t\tthe automatic calculations listed below.\n   * \t</td></tr>\n   * \t<tr><td><b>Bitmap</b></td><td>\n   * \t\tReturns the width and height of the sourceRect (if specified) or image, extending from (x=0,y=0).\n   * \t</td></tr>\n   * \t<tr><td><b>Sprite</b></td><td>\n   * \t\tReturns the bounds of the current frame. May have non-zero x/y if a frame registration point was specified\n   * \t\tin the spritesheet data. See also {{#crossLink \"SpriteSheet/getFrameBounds\"}}{{/crossLink}}\n   * \t</td></tr>\n   * \t<tr><td><b>Container</b></td><td>\n   * \t\tReturns the aggregate (combined) bounds of all children that return a non-null value from getBounds().\n   * \t</td></tr>\n   * \t<tr><td><b>Shape</b></td><td>\n   * \t\tDoes not currently support automatic bounds calculations. Use setBounds() to manually define bounds.\n   * \t</td></tr>\n   * \t<tr><td><b>Text</b></td><td>\n   * \t\tReturns approximate bounds. Horizontal values (x/width) are quite accurate, but vertical values (y/height) are\n   * \t\tnot, especially when using textBaseline values other than \"top\".\n   * \t</td></tr>\n   * \t<tr><td><b>BitmapText</b></td><td>\n   * \t\tReturns approximate bounds. Values will be more accurate if spritesheet frame registration points are close\n   * \t\tto (x=0,y=0).\n   * \t</td></tr>\n  * </table>\n   * \n   * Bounds can be expensive to calculate for some objects (ex. text, or containers with many children), and\n   * are recalculated each time you call getBounds(). You can prevent recalculation on static objects by setting the\n   * bounds explicitly:\n   * \n   * \tvar bounds = obj.getBounds();\n   * \tobj.setBounds(bounds.x, bounds.y, bounds.width, bounds.height);\n   * \t// getBounds will now use the set values, instead of recalculating\n   * \n   * To reduce memory impact, the returned Rectangle instance may be reused internally; clone the instance or copy its\n   * values if you need to retain it.\n   * \n   * \tvar myBounds = obj.getBounds().clone();\n   * \t// OR:\n   * \tmyRect.copy(obj.getBounds());\n   * \n   * @method getBounds\n   * @return {Rectangle} A Rectangle instance representing the bounds, or null if bounds are not available for this\n   * object.\n   **/\n\n\n  p.getBounds = function () {\n    if (this._bounds) {\n      return this._rectangle.copy(this._bounds);\n    }\n\n    var cacheCanvas = this.cacheCanvas;\n\n    if (cacheCanvas) {\n      var scale = this._cacheScale;\n      return this._rectangle.setValues(this._cacheOffsetX, this._cacheOffsetY, cacheCanvas.width / scale, cacheCanvas.height / scale);\n    }\n\n    return null;\n  };\n  /**\n   * Returns a rectangle representing this object's bounds in its parent's coordinate system (ie. with transformations applied).\n   * Objects that have been cached will return the transformed bounds of the cache.\n   * \n   * Not all display objects can calculate their own bounds (ex. Shape). For these objects, you can use \n   * {{#crossLink \"DisplayObject/setBounds\"}}{{/crossLink}} so that they are included when calculating Container\n   * bounds.\n   * \n   * To reduce memory impact, the returned Rectangle instance may be reused internally; clone the instance or copy its\n   * values if you need to retain it.\n   * \n   * Container instances calculate aggregate bounds for all children that return bounds via getBounds.\n   * @method getTransformedBounds\n   * @return {Rectangle} A Rectangle instance representing the bounds, or null if bounds are not available for this object.\n   **/\n\n\n  p.getTransformedBounds = function () {\n    return this._getBounds();\n  };\n  /**\n   * Allows you to manually specify the bounds of an object that either cannot calculate their own bounds (ex. Shape &\n   * Text) for future reference, or so the object can be included in Container bounds. Manually set bounds will always\n   * override calculated bounds.\n   * \n   * The bounds should be specified in the object's local (untransformed) coordinates. For example, a Shape instance\n   * with a 25px radius circle centered at 0,0 would have bounds of (-25, -25, 50, 50).\n   * @method setBounds\n   * @param {Number} x The x origin of the bounds. Pass null to remove the manual bounds.\n   * @param {Number} y The y origin of the bounds.\n   * @param {Number} width The width of the bounds.\n   * @param {Number} height The height of the bounds.\n   **/\n\n\n  p.setBounds = function (x, y, width, height) {\n    if (x == null) {\n      this._bounds = x;\n    }\n\n    this._bounds = (this._bounds || new createjs.Rectangle()).setValues(x, y, width, height);\n  };\n  /**\n   * Returns a clone of this DisplayObject. Some properties that are specific to this instance's current context are\n   * reverted to their defaults (for example .parent). Caches are not maintained across clones, and some elements\n   * are copied by reference (masks, individual filter instances, hit area)\n   * @method clone\n   * @return {DisplayObject} A clone of the current DisplayObject instance.\n   **/\n\n\n  p.clone = function () {\n    return this._cloneProps(new DisplayObject());\n  };\n  /**\n   * Returns a string representation of this object.\n   * @method toString\n   * @return {String} a string representation of the instance.\n   **/\n\n\n  p.toString = function () {\n    return \"[DisplayObject (name=\" + this.name + \")]\";\n  }; // private methods:\n  // separated so it can be used more easily in subclasses:\n\n  /**\n   * @method _cloneProps\n   * @param {DisplayObject} o The DisplayObject instance which will have properties from the current DisplayObject\n   * instance copied into.\n   * @return {DisplayObject} o\n   * @protected\n   **/\n\n\n  p._cloneProps = function (o) {\n    o.alpha = this.alpha;\n    o.mouseEnabled = this.mouseEnabled;\n    o.tickEnabled = this.tickEnabled;\n    o.name = this.name;\n    o.regX = this.regX;\n    o.regY = this.regY;\n    o.rotation = this.rotation;\n    o.scaleX = this.scaleX;\n    o.scaleY = this.scaleY;\n    o.shadow = this.shadow;\n    o.skewX = this.skewX;\n    o.skewY = this.skewY;\n    o.visible = this.visible;\n    o.x = this.x;\n    o.y = this.y;\n    o.compositeOperation = this.compositeOperation;\n    o.snapToPixel = this.snapToPixel;\n    o.filters = this.filters == null ? null : this.filters.slice(0);\n    o.mask = this.mask;\n    o.hitArea = this.hitArea;\n    o.cursor = this.cursor;\n    o._bounds = this._bounds;\n    return o;\n  };\n  /**\n   * @method _applyShadow\n   * @protected\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {Shadow} shadow\n   **/\n\n\n  p._applyShadow = function (ctx, shadow) {\n    shadow = shadow || Shadow.identity;\n    ctx.shadowColor = shadow.color;\n    ctx.shadowOffsetX = shadow.offsetX;\n    ctx.shadowOffsetY = shadow.offsetY;\n    ctx.shadowBlur = shadow.blur;\n  };\n  /**\n   * @method _tick\n   * @param {Object} evtObj An event object that will be dispatched to all tick listeners. This object is reused between dispatchers to reduce construction & GC costs.\n   * @protected\n   **/\n\n\n  p._tick = function (evtObj) {\n    // because tick can be really performance sensitive, check for listeners before calling dispatchEvent.\n    var ls = this._listeners;\n\n    if (ls && ls[\"tick\"]) {\n      // reset & reuse the event object to avoid construction / GC costs:\n      evtObj.target = null;\n      evtObj.propagationStopped = evtObj.immediatePropagationStopped = false;\n      this.dispatchEvent(evtObj);\n    }\n  };\n  /**\n   * @method _testHit\n   * @protected\n   * @param {CanvasRenderingContext2D} ctx\n   * @return {Boolean}\n   **/\n\n\n  p._testHit = function (ctx) {\n    try {\n      var hit = ctx.getImageData(0, 0, 1, 1).data[3] > 1;\n    } catch (e) {\n      if (!DisplayObject.suppressCrossDomainErrors) {\n        throw \"An error has occurred. This is most likely due to security restrictions on reading canvas pixel data with local or cross-domain images.\";\n      }\n    }\n\n    return hit;\n  };\n  /**\n   * @method _applyFilters\n   * @protected\n   **/\n\n\n  p._applyFilters = function () {\n    if (!this.filters || this.filters.length == 0 || !this.cacheCanvas) {\n      return;\n    }\n\n    var l = this.filters.length;\n    var ctx = this.cacheCanvas.getContext(\"2d\");\n    var w = this.cacheCanvas.width;\n    var h = this.cacheCanvas.height;\n\n    for (var i = 0; i < l; i++) {\n      this.filters[i].applyFilter(ctx, 0, 0, w, h);\n    }\n  };\n  /**\n   * @method _getFilterBounds\n   * @return {Rectangle}\n   * @protected\n   **/\n\n\n  p._getFilterBounds = function (rect) {\n    var l,\n        filters = this.filters,\n        bounds = this._rectangle.setValues(0, 0, 0, 0);\n\n    if (!filters || !(l = filters.length)) {\n      return bounds;\n    }\n\n    for (var i = 0; i < l; i++) {\n      var f = this.filters[i];\n      f.getBounds && f.getBounds(bounds);\n    }\n\n    return bounds;\n  };\n  /**\n   * @method _getBounds\n   * @param {Matrix2D} matrix\n   * @param {Boolean} ignoreTransform If true, does not apply this object's transform.\n   * @return {Rectangle}\n   * @protected\n   **/\n\n\n  p._getBounds = function (matrix, ignoreTransform) {\n    return this._transformBounds(this.getBounds(), matrix, ignoreTransform);\n  };\n  /**\n   * @method _transformBounds\n   * @param {Rectangle} bounds\n   * @param {Matrix2D} matrix\n   * @param {Boolean} ignoreTransform\n   * @return {Rectangle}\n   * @protected\n   **/\n\n\n  p._transformBounds = function (bounds, matrix, ignoreTransform) {\n    if (!bounds) {\n      return bounds;\n    }\n\n    var x = bounds.x,\n        y = bounds.y,\n        width = bounds.width,\n        height = bounds.height,\n        mtx = this._props.matrix;\n    mtx = ignoreTransform ? mtx.identity() : this.getMatrix(mtx);\n\n    if (x || y) {\n      mtx.appendTransform(0, 0, 1, 1, 0, 0, 0, -x, -y);\n    } // TODO: simplify this.\n\n\n    if (matrix) {\n      mtx.prependMatrix(matrix);\n    }\n\n    var x_a = width * mtx.a,\n        x_b = width * mtx.b;\n    var y_c = height * mtx.c,\n        y_d = height * mtx.d;\n    var tx = mtx.tx,\n        ty = mtx.ty;\n    var minX = tx,\n        maxX = tx,\n        minY = ty,\n        maxY = ty;\n\n    if ((x = x_a + tx) < minX) {\n      minX = x;\n    } else if (x > maxX) {\n      maxX = x;\n    }\n\n    if ((x = x_a + y_c + tx) < minX) {\n      minX = x;\n    } else if (x > maxX) {\n      maxX = x;\n    }\n\n    if ((x = y_c + tx) < minX) {\n      minX = x;\n    } else if (x > maxX) {\n      maxX = x;\n    }\n\n    if ((y = x_b + ty) < minY) {\n      minY = y;\n    } else if (y > maxY) {\n      maxY = y;\n    }\n\n    if ((y = x_b + y_d + ty) < minY) {\n      minY = y;\n    } else if (y > maxY) {\n      maxY = y;\n    }\n\n    if ((y = y_d + ty) < minY) {\n      minY = y;\n    } else if (y > maxY) {\n      maxY = y;\n    }\n\n    return bounds.setValues(minX, minY, maxX - minX, maxY - minY);\n  };\n  /**\n   * Indicates whether the display object has any mouse event listeners or a cursor.\n   * @method _isMouseOpaque\n   * @return {Boolean}\n   * @protected\n   **/\n\n\n  p._hasMouseEventListener = function () {\n    var evts = DisplayObject._MOUSE_EVENTS;\n\n    for (var i = 0, l = evts.length; i < l; i++) {\n      if (this.hasEventListener(evts[i])) {\n        return true;\n      }\n    }\n\n    return !!this.cursor;\n  };\n\n  createjs.DisplayObject = createjs.promote(DisplayObject, \"EventDispatcher\");\n})(); //##############################################################################\n// Container.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor:\n\n  /**\n   * A Container is a nestable display list that allows you to work with compound display elements. For  example you could\n   * group arm, leg, torso and head {{#crossLink \"Bitmap\"}}{{/crossLink}} instances together into a Person Container, and\n   * transform them as a group, while still being able to move the individual parts relative to each other. Children of\n   * containers have their <code>transform</code> and <code>alpha</code> properties concatenated with their parent\n   * Container.\n   *\n   * For example, a {{#crossLink \"Shape\"}}{{/crossLink}} with x=100 and alpha=0.5, placed in a Container with <code>x=50</code>\n   * and <code>alpha=0.7</code> will be rendered to the canvas at <code>x=150</code> and <code>alpha=0.35</code>.\n   * Containers have some overhead, so you generally shouldn't create a Container to hold a single child.\n   *\n   * <h4>Example</h4>\n   *\n   *      var container = new createjs.Container();\n   *      container.addChild(bitmapInstance, shapeInstance);\n   *      container.x = 100;\n   *\n   * @class Container\n   * @extends DisplayObject\n   * @constructor\n   **/\n\n  function Container() {\n    this.DisplayObject_constructor(); // public properties:\n\n    /**\n     * The array of children in the display list. You should usually use the child management methods such as\n     * {{#crossLink \"Container/addChild\"}}{{/crossLink}}, {{#crossLink \"Container/removeChild\"}}{{/crossLink}},\n     * {{#crossLink \"Container/swapChildren\"}}{{/crossLink}}, etc, rather than accessing this directly, but it is\n     * included for advanced uses.\n     * @property children\n     * @type Array\n     * @default null\n     **/\n\n    this.children = [];\n    /**\n     * Indicates whether the children of this container are independently enabled for mouse/pointer interaction.\n     * If false, the children will be aggregated under the container - for example, a click on a child shape would\n     * trigger a click event on the container.\n     * @property mouseChildren\n     * @type Boolean\n     * @default true\n     **/\n\n    this.mouseChildren = true;\n    /**\n     * If false, the tick will not be propagated to children of this Container. This can provide some performance benefits.\n     * In addition to preventing the \"tick\" event from being dispatched, it will also prevent tick related updates\n     * on some display objects (ex. Sprite & MovieClip frame advancing, DOMElement visibility handling).\n     * @property tickChildren\n     * @type Boolean\n     * @default true\n     **/\n\n    this.tickChildren = true;\n  }\n\n  var p = createjs.extend(Container, createjs.DisplayObject); // getter / setters:\n\n  /**\n   * Use the {{#crossLink \"Container/numChildren:property\"}}{{/crossLink}} property instead.\n   * @method getNumChildren\n   * @return {Number}\n   * @deprecated\n   **/\n\n  p.getNumChildren = function () {\n    return this.children.length;\n  };\n  /**\n   * Returns the number of children in the container.\n   * @property numChildren\n   * @type {Number}\n   * @readonly\n   **/\n\n\n  try {\n    Object.defineProperties(p, {\n      numChildren: {\n        get: p.getNumChildren\n      }\n    });\n  } catch (e) {} // public methods:\n\n  /**\n   * Constructor alias for backwards compatibility. This method will be removed in future versions.\n   * Subclasses should be updated to use {{#crossLink \"Utility Methods/extends\"}}{{/crossLink}}.\n   * @method initialize\n   * @deprecated in favour of `createjs.promote()`\n   **/\n\n\n  p.initialize = Container; // TODO: deprecated.\n\n  /**\n   * Returns true or false indicating whether the display object would be visible if drawn to a canvas.\n   * This does not account for whether it would be visible within the boundaries of the stage.\n   *\n   * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n   * @method isVisible\n   * @return {Boolean} Boolean indicating whether the display object would be visible if drawn to a canvas\n   **/\n\n  p.isVisible = function () {\n    var hasContent = this.cacheCanvas || this.children.length;\n    return !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0 && hasContent);\n  };\n  /**\n   * Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.\n   * Returns true if the draw was handled (useful for overriding functionality).\n   *\n   * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n   * @method draw\n   * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n   * @param {Boolean} [ignoreCache=false] Indicates whether the draw operation should ignore any current cache.\n   * For example, used for drawing the cache (to prevent it from simply drawing an existing cache back\n   * into itself).\n   **/\n\n\n  p.draw = function (ctx, ignoreCache) {\n    if (this.DisplayObject_draw(ctx, ignoreCache)) {\n      return true;\n    } // this ensures we don't have issues with display list changes that occur during a draw:\n\n\n    var list = this.children.slice();\n\n    for (var i = 0, l = list.length; i < l; i++) {\n      var child = list[i];\n\n      if (!child.isVisible()) {\n        continue;\n      } // draw the child:\n\n\n      ctx.save();\n      child.updateContext(ctx);\n      child.draw(ctx);\n      ctx.restore();\n    }\n\n    return true;\n  };\n  /**\n   * Adds a child to the top of the display list.\n   *\n   * <h4>Example</h4>\n   *\n   * \t\tcontainer.addChild(bitmapInstance);\n   *\n   * You can also add multiple children at once:\n   *\n   * \t\tcontainer.addChild(bitmapInstance, shapeInstance, textInstance);\n   *\n   * @method addChild\n   * @param {DisplayObject} child The display object to add.\n   * @return {DisplayObject} The child that was added, or the last child if multiple children were added.\n   **/\n\n\n  p.addChild = function (child) {\n    if (child == null) {\n      return child;\n    }\n\n    var l = arguments.length;\n\n    if (l > 1) {\n      for (var i = 0; i < l; i++) {\n        this.addChild(arguments[i]);\n      }\n\n      return arguments[l - 1];\n    }\n\n    if (child.parent) {\n      child.parent.removeChild(child);\n    }\n\n    child.parent = this;\n    this.children.push(child);\n    child.dispatchEvent(\"added\");\n    return child;\n  };\n  /**\n   * Adds a child to the display list at the specified index, bumping children at equal or greater indexes up one, and\n   * setting its parent to this Container.\n   *\n   * <h4>Example</h4>\n   *\n   *      addChildAt(child1, index);\n   *\n   * You can also add multiple children, such as:\n   *\n   *      addChildAt(child1, child2, ..., index);\n   *\n   * The index must be between 0 and numChildren. For example, to add myShape under otherShape in the display list,\n   * you could use:\n   *\n   *      container.addChildAt(myShape, container.getChildIndex(otherShape));\n   *\n   * This would also bump otherShape's index up by one. Fails silently if the index is out of range.\n   *\n   * @method addChildAt\n   * @param {DisplayObject} child The display object to add.\n   * @param {Number} index The index to add the child at.\n   * @return {DisplayObject} Returns the last child that was added, or the last child if multiple children were added.\n   **/\n\n\n  p.addChildAt = function (child, index) {\n    var l = arguments.length;\n    var indx = arguments[l - 1]; // can't use the same name as the index param or it replaces arguments[1]\n\n    if (indx < 0 || indx > this.children.length) {\n      return arguments[l - 2];\n    }\n\n    if (l > 2) {\n      for (var i = 0; i < l - 1; i++) {\n        this.addChildAt(arguments[i], indx + i);\n      }\n\n      return arguments[l - 2];\n    }\n\n    if (child.parent) {\n      child.parent.removeChild(child);\n    }\n\n    child.parent = this;\n    this.children.splice(index, 0, child);\n    child.dispatchEvent(\"added\");\n    return child;\n  };\n  /**\n   * Removes the specified child from the display list. Note that it is faster to use removeChildAt() if the index is\n   * already known.\n   *\n   * <h4>Example</h4>\n   *\n   *      container.removeChild(child);\n   *\n   * You can also remove multiple children:\n   *\n   *      removeChild(child1, child2, ...);\n   *\n   * Returns true if the child (or children) was removed, or false if it was not in the display list.\n   * @method removeChild\n   * @param {DisplayObject} child The child to remove.\n   * @return {Boolean} true if the child (or children) was removed, or false if it was not in the display list.\n   **/\n\n\n  p.removeChild = function (child) {\n    var l = arguments.length;\n\n    if (l > 1) {\n      var good = true;\n\n      for (var i = 0; i < l; i++) {\n        good = good && this.removeChild(arguments[i]);\n      }\n\n      return good;\n    }\n\n    return this.removeChildAt(createjs.indexOf(this.children, child));\n  };\n  /**\n   * Removes the child at the specified index from the display list, and sets its parent to null.\n   *\n   * <h4>Example</h4>\n   *\n   *      container.removeChildAt(2);\n   *\n   * You can also remove multiple children:\n   *\n   *      container.removeChild(2, 7, ...)\n   *\n   * Returns true if the child (or children) was removed, or false if any index was out of range.\n   * @method removeChildAt\n   * @param {Number} index The index of the child to remove.\n   * @return {Boolean} true if the child (or children) was removed, or false if any index was out of range.\n   **/\n\n\n  p.removeChildAt = function (index) {\n    var l = arguments.length;\n\n    if (l > 1) {\n      var a = [];\n\n      for (var i = 0; i < l; i++) {\n        a[i] = arguments[i];\n      }\n\n      a.sort(function (a, b) {\n        return b - a;\n      });\n      var good = true;\n\n      for (var i = 0; i < l; i++) {\n        good = good && this.removeChildAt(a[i]);\n      }\n\n      return good;\n    }\n\n    if (index < 0 || index > this.children.length - 1) {\n      return false;\n    }\n\n    var child = this.children[index];\n\n    if (child) {\n      child.parent = null;\n    }\n\n    this.children.splice(index, 1);\n    child.dispatchEvent(\"removed\");\n    return true;\n  };\n  /**\n   * Removes all children from the display list.\n   *\n   * <h4>Example</h4>\n   *\n   * \tcontainer.removeAllChildren();\n   *\n   * @method removeAllChildren\n   **/\n\n\n  p.removeAllChildren = function () {\n    var kids = this.children;\n\n    while (kids.length) {\n      this.removeChildAt(0);\n    }\n  };\n  /**\n   * Returns the child at the specified index.\n   *\n   * <h4>Example</h4>\n   *\n   *      container.getChildAt(2);\n   *\n   * @method getChildAt\n   * @param {Number} index The index of the child to return.\n   * @return {DisplayObject} The child at the specified index. Returns null if there is no child at the index.\n   **/\n\n\n  p.getChildAt = function (index) {\n    return this.children[index];\n  };\n  /**\n   * Returns the child with the specified name.\n   * @method getChildByName\n   * @param {String} name The name of the child to return.\n   * @return {DisplayObject} The child with the specified name.\n   **/\n\n\n  p.getChildByName = function (name) {\n    var kids = this.children;\n\n    for (var i = 0, l = kids.length; i < l; i++) {\n      if (kids[i].name == name) {\n        return kids[i];\n      }\n    }\n\n    return null;\n  };\n  /**\n   * Performs an array sort operation on the child list.\n   *\n   * <h4>Example: Display children with a higher y in front.</h4>\n   * \n   *      var sortFunction = function(obj1, obj2, options) {\n   *          if (obj1.y > obj2.y) { return 1; }\n   *          if (obj1.y < obj2.y) { return -1; }\n   *          return 0;\n   *      }\n   *      container.sortChildren(sortFunction);\n   *\n   * @method sortChildren\n   * @param {Function} sortFunction the function to use to sort the child list. See JavaScript's <code>Array.sort</code>\n   * documentation for details.\n   **/\n\n\n  p.sortChildren = function (sortFunction) {\n    this.children.sort(sortFunction);\n  };\n  /**\n   * Returns the index of the specified child in the display list, or -1 if it is not in the display list.\n   *\n   * <h4>Example</h4>\n   *\n   *      var index = container.getChildIndex(child);\n   *\n   * @method getChildIndex\n   * @param {DisplayObject} child The child to return the index of.\n   * @return {Number} The index of the specified child. -1 if the child is not found.\n   **/\n\n\n  p.getChildIndex = function (child) {\n    return createjs.indexOf(this.children, child);\n  };\n  /**\n   * Swaps the children at the specified indexes. Fails silently if either index is out of range.\n   * @method swapChildrenAt\n   * @param {Number} index1\n   * @param {Number} index2\n   **/\n\n\n  p.swapChildrenAt = function (index1, index2) {\n    var kids = this.children;\n    var o1 = kids[index1];\n    var o2 = kids[index2];\n\n    if (!o1 || !o2) {\n      return;\n    }\n\n    kids[index1] = o2;\n    kids[index2] = o1;\n  };\n  /**\n   * Swaps the specified children's depth in the display list. Fails silently if either child is not a child of this\n   * Container.\n   * @method swapChildren\n   * @param {DisplayObject} child1\n   * @param {DisplayObject} child2\n   **/\n\n\n  p.swapChildren = function (child1, child2) {\n    var kids = this.children;\n    var index1, index2;\n\n    for (var i = 0, l = kids.length; i < l; i++) {\n      if (kids[i] == child1) {\n        index1 = i;\n      }\n\n      if (kids[i] == child2) {\n        index2 = i;\n      }\n\n      if (index1 != null && index2 != null) {\n        break;\n      }\n    }\n\n    if (i == l) {\n      return;\n    } // TODO: throw error?\n\n\n    kids[index1] = child2;\n    kids[index2] = child1;\n  };\n  /**\n   * Changes the depth of the specified child. Fails silently if the child is not a child of this container, or the index is out of range.\n   * @param {DisplayObject} child\n   * @param {Number} index  \n   * @method setChildIndex\n   **/\n\n\n  p.setChildIndex = function (child, index) {\n    var kids = this.children,\n        l = kids.length;\n\n    if (child.parent != this || index < 0 || index >= l) {\n      return;\n    }\n\n    for (var i = 0; i < l; i++) {\n      if (kids[i] == child) {\n        break;\n      }\n    }\n\n    if (i == l || i == index) {\n      return;\n    }\n\n    kids.splice(i, 1);\n    kids.splice(index, 0, child);\n  };\n  /**\n   * Returns true if the specified display object either is this container or is a descendent (child, grandchild, etc)\n   * of this container.\n   * @method contains\n   * @param {DisplayObject} child The DisplayObject to be checked.\n   * @return {Boolean} true if the specified display object either is this container or is a descendent.\n   **/\n\n\n  p.contains = function (child) {\n    while (child) {\n      if (child == this) {\n        return true;\n      }\n\n      child = child.parent;\n    }\n\n    return false;\n  };\n  /**\n   * Tests whether the display object intersects the specified local point (ie. draws a pixel with alpha > 0 at the\n   * specified position). This ignores the alpha, shadow and compositeOperation of the display object, and all\n   * transform properties including regX/Y.\n   * @method hitTest\n   * @param {Number} x The x position to check in the display object's local coordinates.\n   * @param {Number} y The y position to check in the display object's local coordinates.\n   * @return {Boolean} A Boolean indicating whether there is a visible section of a DisplayObject that overlaps the specified\n   * coordinates.\n   **/\n\n\n  p.hitTest = function (x, y) {\n    // TODO: optimize to use the fast cache check where possible.\n    return this.getObjectUnderPoint(x, y) != null;\n  };\n  /**\n   * Returns an array of all display objects under the specified coordinates that are in this container's display\n   * list. This routine ignores any display objects with {{#crossLink \"DisplayObject/mouseEnabled:property\"}}{{/crossLink}}\n   * set to `false`. The array will be sorted in order of visual depth, with the top-most display object at index 0.\n   * This uses shape based hit detection, and can be an expensive operation to run, so it is best to use it carefully.\n   * For example, if testing for objects under the mouse, test on tick (instead of on {{#crossLink \"DisplayObject/mousemove:event\"}}{{/crossLink}}),\n   * and only if the mouse's position has changed.\n   * \n   * <ul>\n   *     <li>By default (mode=0) this method evaluates all display objects.</li>\n   *     <li>By setting the `mode` parameter to `1`, the {{#crossLink \"DisplayObject/mouseEnabled:property\"}}{{/crossLink}}\n   * \t\tand {{#crossLink \"mouseChildren:property\"}}{{/crossLink}} properties will be respected.</li>\n   * \t   <li>Setting the `mode` to `2` additionally excludes display objects that do not have active mouse event\n   * \t   \tlisteners or a {{#crossLink \"DisplayObject:cursor:property\"}}{{/crossLink}} property. That is, only objects\n   * \t   \tthat would normally intercept mouse interaction will be included. This can significantly improve performance\n   * \t   \tin some cases by reducing the number of display objects that need to be tested.</li>\n   * </li>\n   * \n   * This method accounts for both {{#crossLink \"DisplayObject/hitArea:property\"}}{{/crossLink}} and {{#crossLink \"DisplayObject/mask:property\"}}{{/crossLink}}.\n   * @method getObjectsUnderPoint\n   * @param {Number} x The x position in the container to test.\n   * @param {Number} y The y position in the container to test.\n   * @param {Number} [mode=0] The mode to use to determine which display objects to include. 0-all, 1-respect mouseEnabled/mouseChildren, 2-only mouse opaque objects.\n   * @return {Array} An Array of DisplayObjects under the specified coordinates.\n   **/\n\n\n  p.getObjectsUnderPoint = function (x, y, mode) {\n    var arr = [];\n    var pt = this.localToGlobal(x, y);\n\n    this._getObjectsUnderPoint(pt.x, pt.y, arr, mode > 0, mode == 1);\n\n    return arr;\n  };\n  /**\n   * Similar to {{#crossLink \"Container/getObjectsUnderPoint\"}}{{/crossLink}}, but returns only the top-most display\n   * object. This runs significantly faster than <code>getObjectsUnderPoint()</code>, but is still potentially an expensive\n   * operation. See {{#crossLink \"Container/getObjectsUnderPoint\"}}{{/crossLink}} for more information.\n   * @method getObjectUnderPoint\n   * @param {Number} x The x position in the container to test.\n   * @param {Number} y The y position in the container to test.\n   * @param {Number} mode The mode to use to determine which display objects to include.  0-all, 1-respect mouseEnabled/mouseChildren, 2-only mouse opaque objects.\n   * @return {DisplayObject} The top-most display object under the specified coordinates.\n   **/\n\n\n  p.getObjectUnderPoint = function (x, y, mode) {\n    var pt = this.localToGlobal(x, y);\n    return this._getObjectsUnderPoint(pt.x, pt.y, null, mode > 0, mode == 1);\n  };\n  /**\n   * Docced in superclass.\n   */\n\n\n  p.getBounds = function () {\n    return this._getBounds(null, true);\n  };\n  /**\n   * Docced in superclass.\n   */\n\n\n  p.getTransformedBounds = function () {\n    return this._getBounds();\n  };\n  /**\n   * Returns a clone of this Container. Some properties that are specific to this instance's current context are\n   * reverted to their defaults (for example .parent).\n   * @method clone\n   * @param {Boolean} [recursive=false] If true, all of the descendants of this container will be cloned recursively. If false, the\n   * properties of the container will be cloned, but the new instance will not have any children.\n   * @return {Container} A clone of the current Container instance.\n   **/\n\n\n  p.clone = function (recursive) {\n    var o = this._cloneProps(new Container());\n\n    if (recursive) {\n      this._cloneChildren(o);\n    }\n\n    return o;\n  };\n  /**\n   * Returns a string representation of this object.\n   * @method toString\n   * @return {String} a string representation of the instance.\n   **/\n\n\n  p.toString = function () {\n    return \"[Container (name=\" + this.name + \")]\";\n  }; // private methods:\n\n  /**\n   * @method _tick\n   * @param {Object} evtObj An event object that will be dispatched to all tick listeners. This object is reused between dispatchers to reduce construction & GC costs.\n   * @protected\n   **/\n\n\n  p._tick = function (evtObj) {\n    if (this.tickChildren) {\n      for (var i = this.children.length - 1; i >= 0; i--) {\n        var child = this.children[i];\n\n        if (child.tickEnabled && child._tick) {\n          child._tick(evtObj);\n        }\n      }\n    }\n\n    this.DisplayObject__tick(evtObj);\n  };\n  /**\n   * Recursively clones all children of this container, and adds them to the target container.\n   * @method cloneChildren\n   * @protected\n   * @param {Container} o The target container.\n   **/\n\n\n  p._cloneChildren = function (o) {\n    if (o.children.length) {\n      o.removeAllChildren();\n    }\n\n    var arr = o.children;\n\n    for (var i = 0, l = this.children.length; i < l; i++) {\n      var clone = this.children[i].clone(true);\n      clone.parent = o;\n      arr.push(clone);\n    }\n  };\n  /**\n   * @method _getObjectsUnderPoint\n   * @param {Number} x\n   * @param {Number} y\n   * @param {Array} arr\n   * @param {Boolean} mouse If true, it will respect mouse interaction properties like mouseEnabled, mouseChildren, and active listeners.\n   * @param {Boolean} activeListener If true, there is an active mouse event listener on a parent object.\n   * @param {Number} currentDepth Indicates the current depth of the search.\n   * @return {DisplayObject}\n   * @protected\n   **/\n\n\n  p._getObjectsUnderPoint = function (x, y, arr, mouse, activeListener, currentDepth) {\n    currentDepth = currentDepth || 0;\n\n    if (!currentDepth && !this._testMask(this, x, y)) {\n      return null;\n    }\n\n    var mtx,\n        ctx = createjs.DisplayObject._hitTestContext;\n    activeListener = activeListener || mouse && this._hasMouseEventListener(); // draw children one at a time, and check if we get a hit:\n\n    var children = this.children,\n        l = children.length;\n\n    for (var i = l - 1; i >= 0; i--) {\n      var child = children[i];\n      var hitArea = child.hitArea;\n\n      if (!child.visible || !hitArea && !child.isVisible() || mouse && !child.mouseEnabled) {\n        continue;\n      }\n\n      if (!hitArea && !this._testMask(child, x, y)) {\n        continue;\n      } // if a child container has a hitArea then we only need to check its hitArea, so we can treat it as a normal DO:\n\n\n      if (!hitArea && child instanceof Container) {\n        var result = child._getObjectsUnderPoint(x, y, arr, mouse, activeListener, currentDepth + 1);\n\n        if (!arr && result) {\n          return mouse && !this.mouseChildren ? this : result;\n        }\n      } else {\n        if (mouse && !activeListener && !child._hasMouseEventListener()) {\n          continue;\n        } // TODO: can we pass displayProps forward, to avoid having to calculate this backwards every time? It's kind of a mixed bag. When we're only hunting for DOs with event listeners, it may not make sense.\n\n\n        var props = child.getConcatenatedDisplayProps(child._props);\n        mtx = props.matrix;\n\n        if (hitArea) {\n          mtx.appendMatrix(hitArea.getMatrix(hitArea._props.matrix));\n          props.alpha = hitArea.alpha;\n        }\n\n        ctx.globalAlpha = props.alpha;\n        ctx.setTransform(mtx.a, mtx.b, mtx.c, mtx.d, mtx.tx - x, mtx.ty - y);\n        (hitArea || child).draw(ctx);\n\n        if (!this._testHit(ctx)) {\n          continue;\n        }\n\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\n        ctx.clearRect(0, 0, 2, 2);\n\n        if (arr) {\n          arr.push(child);\n        } else {\n          return mouse && !this.mouseChildren ? this : child;\n        }\n      }\n    }\n\n    return null;\n  };\n  /**\n   * @method _testMask\n   * @param {DisplayObject} target\n   * @param {Number} x\n   * @param {Number} y\n   * @return {Boolean} Indicates whether the x/y is within the masked region.\n   * @protected\n   **/\n\n\n  p._testMask = function (target, x, y) {\n    var mask = target.mask;\n\n    if (!mask || !mask.graphics || mask.graphics.isEmpty()) {\n      return true;\n    }\n\n    var mtx = this._props.matrix,\n        parent = target.parent;\n    mtx = parent ? parent.getConcatenatedMatrix(mtx) : mtx.identity();\n    mtx = mask.getMatrix(mask._props.matrix).prependMatrix(mtx);\n    var ctx = createjs.DisplayObject._hitTestContext;\n    ctx.setTransform(mtx.a, mtx.b, mtx.c, mtx.d, mtx.tx - x, mtx.ty - y); // draw the mask as a solid fill:\n\n    mask.graphics.drawAsPath(ctx);\n    ctx.fillStyle = \"#000\";\n    ctx.fill();\n\n    if (!this._testHit(ctx)) {\n      return false;\n    }\n\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    ctx.clearRect(0, 0, 2, 2);\n    return true;\n  };\n  /**\n   * @method _getBounds\n   * @param {Matrix2D} matrix\n   * @param {Boolean} ignoreTransform If true, does not apply this object's transform.\n   * @return {Rectangle}\n   * @protected\n   **/\n\n\n  p._getBounds = function (matrix, ignoreTransform) {\n    var bounds = this.DisplayObject_getBounds();\n\n    if (bounds) {\n      return this._transformBounds(bounds, matrix, ignoreTransform);\n    }\n\n    var mtx = this._props.matrix;\n    mtx = ignoreTransform ? mtx.identity() : this.getMatrix(mtx);\n\n    if (matrix) {\n      mtx.prependMatrix(matrix);\n    }\n\n    var l = this.children.length,\n        rect = null;\n\n    for (var i = 0; i < l; i++) {\n      var child = this.children[i];\n\n      if (!child.visible || !(bounds = child._getBounds(mtx))) {\n        continue;\n      }\n\n      if (rect) {\n        rect.extend(bounds.x, bounds.y, bounds.width, bounds.height);\n      } else {\n        rect = bounds.clone();\n      }\n    }\n\n    return rect;\n  };\n\n  createjs.Container = createjs.promote(Container, \"DisplayObject\");\n})(); //##############################################################################\n// Stage.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor:\n\n  /**\n   * A stage is the root level {{#crossLink \"Container\"}}{{/crossLink}} for a display list. Each time its {{#crossLink \"Stage/tick\"}}{{/crossLink}}\n   * method is called, it will render its display list to its target canvas.\n   *\n   * <h4>Example</h4>\n   * This example creates a stage, adds a child to it, then uses {{#crossLink \"Ticker\"}}{{/crossLink}} to update the child\n   * and redraw the stage using {{#crossLink \"Stage/update\"}}{{/crossLink}}.\n   *\n   *      var stage = new createjs.Stage(\"canvasElementId\");\n   *      var image = new createjs.Bitmap(\"imagePath.png\");\n   *      stage.addChild(image);\n   *      createjs.Ticker.addEventListener(\"tick\", handleTick);\n   *      function handleTick(event) {\n   *          image.x += 10;\n   *          stage.update();\n   *      }\n   *\n   * @class Stage\n   * @extends Container\n   * @constructor\n   * @param {HTMLCanvasElement | String | Object} canvas A canvas object that the Stage will render to, or the string id\n   * of a canvas object in the current document.\n   **/\n\n  function Stage(canvas) {\n    this.Container_constructor(); // public properties:\n\n    /**\n     * Indicates whether the stage should automatically clear the canvas before each render. You can set this to <code>false</code>\n     * to manually control clearing (for generative art, or when pointing multiple stages at the same canvas for\n     * example).\n     *\n     * <h4>Example</h4>\n     *\n     *      var stage = new createjs.Stage(\"canvasId\");\n     *      stage.autoClear = false;\n     *\n     * @property autoClear\n     * @type Boolean\n     * @default true\n     **/\n\n    this.autoClear = true;\n    /**\n     * The canvas the stage will render to. Multiple stages can share a single canvas, but you must disable autoClear for all but the\n     * first stage that will be ticked (or they will clear each other's render).\n     *\n     * When changing the canvas property you must disable the events on the old canvas, and enable events on the\n     * new canvas or mouse events will not work as expected. For example:\n     *\n     *      myStage.enableDOMEvents(false);\n     *      myStage.canvas = anotherCanvas;\n     *      myStage.enableDOMEvents(true);\n     *\n     * @property canvas\n     * @type HTMLCanvasElement | Object\n     **/\n\n    this.canvas = typeof canvas == \"string\" ? document.getElementById(canvas) : canvas;\n    /**\n     * The current mouse X position on the canvas. If the mouse leaves the canvas, this will indicate the most recent\n     * position over the canvas, and mouseInBounds will be set to false.\n     * @property mouseX\n     * @type Number\n     * @readonly\n     **/\n\n    this.mouseX = 0;\n    /**\n     * The current mouse Y position on the canvas. If the mouse leaves the canvas, this will indicate the most recent\n     * position over the canvas, and mouseInBounds will be set to false.\n     * @property mouseY\n     * @type Number\n     * @readonly\n     **/\n\n    this.mouseY = 0;\n    /**\n     * Specifies the area of the stage to affect when calling update. This can be use to selectively\n     * re-draw specific regions of the canvas. If null, the whole canvas area is drawn.\n     * @property drawRect\n     * @type {Rectangle}\n     */\n\n    this.drawRect = null;\n    /**\n     * Indicates whether display objects should be rendered on whole pixels. You can set the\n     * {{#crossLink \"DisplayObject/snapToPixel\"}}{{/crossLink}} property of\n     * display objects to false to enable/disable this behaviour on a per instance basis.\n     * @property snapToPixelEnabled\n     * @type Boolean\n     * @default false\n     **/\n\n    this.snapToPixelEnabled = false;\n    /**\n     * Indicates whether the mouse is currently within the bounds of the canvas.\n     * @property mouseInBounds\n     * @type Boolean\n     * @default false\n     **/\n\n    this.mouseInBounds = false;\n    /**\n     * If true, tick callbacks will be called on all display objects on the stage prior to rendering to the canvas.\n     * @property tickOnUpdate\n     * @type Boolean\n     * @default true\n     **/\n\n    this.tickOnUpdate = true;\n    /**\n     * If true, mouse move events will continue to be called when the mouse leaves the target canvas. See\n     * {{#crossLink \"Stage/mouseInBounds:property\"}}{{/crossLink}}, and {{#crossLink \"MouseEvent\"}}{{/crossLink}}\n     * x/y/rawX/rawY.\n     * @property mouseMoveOutside\n     * @type Boolean\n     * @default false\n     **/\n\n    this.mouseMoveOutside = false;\n    /**\n     * Prevents selection of other elements in the html page if the user clicks and drags, or double clicks on the canvas.\n     * This works by calling `preventDefault()` on any mousedown events (or touch equivalent) originating on the canvas.\n     * @property preventSelection\n     * @type Boolean\n     * @default true\n     **/\n\n    this.preventSelection = true;\n    /**\n     * The hitArea property is not supported for Stage.\n     * @property hitArea\n     * @type {DisplayObject}\n     * @default null\n     */\n    // private properties:\n\n    /**\n     * Holds objects with data for each active pointer id. Each object has the following properties:\n     * x, y, event, target, overTarget, overX, overY, inBounds, posEvtObj (native event that last updated position)\n     * @property _pointerData\n     * @type {Object}\n     * @private\n     */\n\n    this._pointerData = {};\n    /**\n     * Number of active pointers.\n     * @property _pointerCount\n     * @type {Object}\n     * @private\n     */\n\n    this._pointerCount = 0;\n    /**\n     * The ID of the primary pointer.\n     * @property _primaryPointerID\n     * @type {Object}\n     * @private\n     */\n\n    this._primaryPointerID = null;\n    /**\n     * @property _mouseOverIntervalID\n     * @protected\n     * @type Number\n     **/\n\n    this._mouseOverIntervalID = null;\n    /**\n     * @property _nextStage\n     * @protected\n     * @type Stage\n     **/\n\n    this._nextStage = null;\n    /**\n     * @property _prevStage\n     * @protected\n     * @type Stage\n     **/\n\n    this._prevStage = null; // initialize:\n\n    this.enableDOMEvents(true);\n  }\n\n  var p = createjs.extend(Stage, createjs.Container);\n  /**\n   * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n   * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n   * for details.\n   *\n   * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n   *\n   * @method initialize\n   * @protected\n   * @deprecated\n   */\n  // p.initialize = function() {}; // searchable for devs wondering where it is.\n  // events:\n\n  /**\n   * Dispatched when the user moves the mouse over the canvas.\n   * See the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\n   * @event stagemousemove\n   * @since 0.6.0\n   */\n\n  /**\n   * Dispatched when the user presses their left mouse button on the canvas. See the {{#crossLink \"MouseEvent\"}}{{/crossLink}}\n   * class for a listing of event properties.\n   * @event stagemousedown\n   * @since 0.6.0\n   */\n\n  /**\n   * Dispatched when the user the user presses somewhere on the stage, then releases the mouse button anywhere that the page can detect it (this varies slightly between browsers).\n   * You can use {{#crossLink \"Stage/mouseInBounds:property\"}}{{/crossLink}} to check whether the mouse is currently within the stage bounds.\n   * See the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\n   * @event stagemouseup\n   * @since 0.6.0\n   */\n\n  /**\n   * Dispatched when the mouse moves from within the canvas area (mouseInBounds == true) to outside it (mouseInBounds == false).\n   * This is currently only dispatched for mouse input (not touch). See the {{#crossLink \"MouseEvent\"}}{{/crossLink}}\n   * class for a listing of event properties.\n   * @event mouseleave\n   * @since 0.7.0\n   */\n\n  /**\n   * Dispatched when the mouse moves into the canvas area (mouseInBounds == false) from outside it (mouseInBounds == true).\n   * This is currently only dispatched for mouse input (not touch). See the {{#crossLink \"MouseEvent\"}}{{/crossLink}}\n   * class for a listing of event properties.\n   * @event mouseenter\n   * @since 0.7.0\n   */\n\n  /**\n   * Dispatched each update immediately before the tick event is propagated through the display list.\n   * You can call preventDefault on the event object to cancel propagating the tick event.\n   * @event tickstart\n   * @since 0.7.0\n   */\n\n  /**\n   * Dispatched each update immediately after the tick event is propagated through the display list. Does not fire if\n   * tickOnUpdate is false. Precedes the \"drawstart\" event.\n   * @event tickend\n   * @since 0.7.0\n   */\n\n  /**\n   * Dispatched each update immediately before the canvas is cleared and the display list is drawn to it.\n   * You can call preventDefault on the event object to cancel the draw.\n   * @event drawstart\n   * @since 0.7.0\n   */\n\n  /**\n   * Dispatched each update immediately after the display list is drawn to the canvas and the canvas context is restored.\n   * @event drawend\n   * @since 0.7.0\n   */\n  // getter / setters:\n\n  /**\n   * Specifies a target stage that will have mouse / touch interactions relayed to it after this stage handles them.\n   * This can be useful in cases where you have multiple layered canvases and want user interactions\n   * events to pass through. For example, this would relay mouse events from topStage to bottomStage:\n   *\n   *      topStage.nextStage = bottomStage;\n   *\n   * To disable relaying, set nextStage to null.\n   * \n   * MouseOver, MouseOut, RollOver, and RollOut interactions are also passed through using the mouse over settings\n   * of the top-most stage, but are only processed if the target stage has mouse over interactions enabled.\n   * Considerations when using roll over in relay targets:<OL>\n   * <LI> The top-most (first) stage must have mouse over interactions enabled (via enableMouseOver)</LI>\n   * <LI> All stages that wish to participate in mouse over interaction must enable them via enableMouseOver</LI>\n   * <LI> All relay targets will share the frequency value of the top-most stage</LI>\n   * </OL>\n   * To illustrate, in this example the targetStage would process mouse over interactions at 10hz (despite passing\n   * 30 as it's desired frequency):\n   * \ttopStage.nextStage = targetStage;\n   * \ttopStage.enableMouseOver(10);\n   * \ttargetStage.enableMouseOver(30);\n   * \n   * If the target stage's canvas is completely covered by this stage's canvas, you may also want to disable its\n   * DOM events using:\n   * \n   *\ttargetStage.enableDOMEvents(false);\n   * \n   * @property nextStage\n   * @type {Stage}\n   **/\n\n  p._get_nextStage = function () {\n    return this._nextStage;\n  };\n\n  p._set_nextStage = function (value) {\n    if (this._nextStage) {\n      this._nextStage._prevStage = null;\n    }\n\n    if (value) {\n      value._prevStage = this;\n    }\n\n    this._nextStage = value;\n  };\n\n  try {\n    Object.defineProperties(p, {\n      nextStage: {\n        get: p._get_nextStage,\n        set: p._set_nextStage\n      }\n    });\n  } catch (e) {} // TODO: use Log\n  // public methods:\n\n  /**\n   * Each time the update method is called, the stage will call {{#crossLink \"Stage/tick\"}}{{/crossLink}}\n   * unless {{#crossLink \"Stage/tickOnUpdate:property\"}}{{/crossLink}} is set to false,\n   * and then render the display list to the canvas.\n   *\n   * @method update\n   * @param {Object} [props] Props object to pass to `tick()`. Should usually be a {{#crossLink \"Ticker\"}}{{/crossLink}} event object, or similar object with a delta property.\n   **/\n\n\n  p.update = function (props) {\n    if (!this.canvas) {\n      return;\n    }\n\n    if (this.tickOnUpdate) {\n      this.tick(props);\n    }\n\n    if (this.dispatchEvent(\"drawstart\", false, true) === false) {\n      return;\n    }\n\n    createjs.DisplayObject._snapToPixelEnabled = this.snapToPixelEnabled;\n    var r = this.drawRect,\n        ctx = this.canvas.getContext(\"2d\");\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n\n    if (this.autoClear) {\n      if (r) {\n        ctx.clearRect(r.x, r.y, r.width, r.height);\n      } else {\n        ctx.clearRect(0, 0, this.canvas.width + 1, this.canvas.height + 1);\n      }\n    }\n\n    ctx.save();\n\n    if (this.drawRect) {\n      ctx.beginPath();\n      ctx.rect(r.x, r.y, r.width, r.height);\n      ctx.clip();\n    }\n\n    this.updateContext(ctx);\n    this.draw(ctx, false);\n    ctx.restore();\n    this.dispatchEvent(\"drawend\");\n  };\n  /**\n   * Propagates a tick event through the display list. This is automatically called by {{#crossLink \"Stage/update\"}}{{/crossLink}}\n   * unless {{#crossLink \"Stage/tickOnUpdate:property\"}}{{/crossLink}} is set to false.\n   *\n   * If a props object is passed to `tick()`, then all of its properties will be copied to the event object that is\n   * propagated to listeners.\n   *\n   * Some time-based features in EaselJS (for example {{#crossLink \"Sprite/framerate\"}}{{/crossLink}} require that\n   * a {{#crossLink \"Ticker/tick:event\"}}{{/crossLink}} event object (or equivalent object with a delta property) be\n   * passed as the `props` parameter to `tick()`. For example:\n   *\n   * \tTicker.on(\"tick\", handleTick);\n   * \tfunction handleTick(evtObj) {\n   * \t\t// clone the event object from Ticker, and add some custom data to it:\n   * \t\tvar evt = evtObj.clone().set({greeting:\"hello\", name:\"world\"});\n   * \t\t\n   * \t\t// pass it to stage.update():\n   * \t\tmyStage.update(evt); // subsequently calls tick() with the same param\n   * \t}\n   * \t\n   * \t// ...\n   * \tmyDisplayObject.on(\"tick\", handleDisplayObjectTick);\n   * \tfunction handleDisplayObjectTick(evt) {\n   * \t\tconsole.log(evt.delta); // the delta property from the Ticker tick event object\n   * \t\tconsole.log(evt.greeting, evt.name); // custom data: \"hello world\"\n   * \t}\n   * \n   * @method tick\n   * @param {Object} [props] An object with properties that should be copied to the event object. Should usually be a Ticker event object, or similar object with a delta property.\n   **/\n\n\n  p.tick = function (props) {\n    if (!this.tickEnabled || this.dispatchEvent(\"tickstart\", false, true) === false) {\n      return;\n    }\n\n    var evtObj = new createjs.Event(\"tick\");\n\n    if (props) {\n      for (var n in props) {\n        if (props.hasOwnProperty(n)) {\n          evtObj[n] = props[n];\n        }\n      }\n    }\n\n    this._tick(evtObj);\n\n    this.dispatchEvent(\"tickend\");\n  };\n  /**\n   * Default event handler that calls the Stage {{#crossLink \"Stage/update\"}}{{/crossLink}} method when a {{#crossLink \"DisplayObject/tick:event\"}}{{/crossLink}}\n   * event is received. This allows you to register a Stage instance as a event listener on {{#crossLink \"Ticker\"}}{{/crossLink}}\n   * directly, using:\n   *\n   *      Ticker.addEventListener(\"tick\", myStage\");\n   *\n   * Note that if you subscribe to ticks using this pattern, then the tick event object will be passed through to\n   * display object tick handlers, instead of <code>delta</code> and <code>paused</code> parameters.\n   * @property handleEvent\n   * @type Function\n   **/\n\n\n  p.handleEvent = function (evt) {\n    if (evt.type == \"tick\") {\n      this.update(evt);\n    }\n  };\n  /**\n   * Clears the target canvas. Useful if {{#crossLink \"Stage/autoClear:property\"}}{{/crossLink}} is set to `false`.\n   * @method clear\n   **/\n\n\n  p.clear = function () {\n    if (!this.canvas) {\n      return;\n    }\n\n    var ctx = this.canvas.getContext(\"2d\");\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    ctx.clearRect(0, 0, this.canvas.width + 1, this.canvas.height + 1);\n  };\n  /**\n   * Returns a data url that contains a Base64-encoded image of the contents of the stage. The returned data url can\n   * be specified as the src value of an image element.\n   * @method toDataURL\n   * @param {String} [backgroundColor] The background color to be used for the generated image. Any valid CSS color\n   * value is allowed. The default value is a transparent background.\n   * @param {String} [mimeType=\"image/png\"] The MIME type of the image format to be create. The default is \"image/png\". If an unknown MIME type\n   * is passed in, or if the browser does not support the specified MIME type, the default value will be used.\n   * @return {String} a Base64 encoded image.\n   **/\n\n\n  p.toDataURL = function (backgroundColor, mimeType) {\n    var data,\n        ctx = this.canvas.getContext('2d'),\n        w = this.canvas.width,\n        h = this.canvas.height;\n\n    if (backgroundColor) {\n      data = ctx.getImageData(0, 0, w, h);\n      var compositeOperation = ctx.globalCompositeOperation;\n      ctx.globalCompositeOperation = \"destination-over\";\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(0, 0, w, h);\n    }\n\n    var dataURL = this.canvas.toDataURL(mimeType || \"image/png\");\n\n    if (backgroundColor) {\n      ctx.putImageData(data, 0, 0);\n      ctx.globalCompositeOperation = compositeOperation;\n    }\n\n    return dataURL;\n  };\n  /**\n   * Enables or disables (by passing a frequency of 0) mouse over ({{#crossLink \"DisplayObject/mouseover:event\"}}{{/crossLink}}\n   * and {{#crossLink \"DisplayObject/mouseout:event\"}}{{/crossLink}}) and roll over events ({{#crossLink \"DisplayObject/rollover:event\"}}{{/crossLink}}\n   * and {{#crossLink \"DisplayObject/rollout:event\"}}{{/crossLink}}) for this stage's display list. These events can\n   * be expensive to generate, so they are disabled by default. The frequency of the events can be controlled\n   * independently of mouse move events via the optional `frequency` parameter.\n   *\n   * <h4>Example</h4>\n   *\n   *      var stage = new createjs.Stage(\"canvasId\");\n   *      stage.enableMouseOver(10); // 10 updates per second\n   *\n   * @method enableMouseOver\n   * @param {Number} [frequency=20] Optional param specifying the maximum number of times per second to broadcast\n   * mouse over/out events. Set to 0 to disable mouse over events completely. Maximum is 50. A lower frequency is less\n   * responsive, but uses less CPU.\n   **/\n\n\n  p.enableMouseOver = function (frequency) {\n    if (this._mouseOverIntervalID) {\n      clearInterval(this._mouseOverIntervalID);\n      this._mouseOverIntervalID = null;\n\n      if (frequency == 0) {\n        this._testMouseOver(true);\n      }\n    }\n\n    if (frequency == null) {\n      frequency = 20;\n    } else if (frequency <= 0) {\n      return;\n    }\n\n    var o = this;\n    this._mouseOverIntervalID = setInterval(function () {\n      o._testMouseOver();\n    }, 1000 / Math.min(50, frequency));\n  };\n  /**\n   * Enables or disables the event listeners that stage adds to DOM elements (window, document and canvas). It is good\n   * practice to disable events when disposing of a Stage instance, otherwise the stage will continue to receive\n   * events from the page.\n   *\n   * When changing the canvas property you must disable the events on the old canvas, and enable events on the\n   * new canvas or mouse events will not work as expected. For example:\n   *\n   *      myStage.enableDOMEvents(false);\n   *      myStage.canvas = anotherCanvas;\n   *      myStage.enableDOMEvents(true);\n   *\n   * @method enableDOMEvents\n   * @param {Boolean} [enable=true] Indicates whether to enable or disable the events. Default is true.\n   **/\n\n\n  p.enableDOMEvents = function (enable) {\n    if (enable == null) {\n      enable = true;\n    }\n\n    var n,\n        o,\n        ls = this._eventListeners;\n\n    if (!enable && ls) {\n      for (n in ls) {\n        o = ls[n];\n        o.t.removeEventListener(n, o.f, false);\n      }\n\n      this._eventListeners = null;\n    } else if (enable && !ls && this.canvas) {\n      var t = window.addEventListener ? window : document;\n\n      var _this = this;\n\n      ls = this._eventListeners = {};\n      ls[\"mouseup\"] = {\n        t: t,\n        f: function (e) {\n          _this._handleMouseUp(e);\n        }\n      };\n      ls[\"mousemove\"] = {\n        t: t,\n        f: function (e) {\n          _this._handleMouseMove(e);\n        }\n      };\n      ls[\"dblclick\"] = {\n        t: this.canvas,\n        f: function (e) {\n          _this._handleDoubleClick(e);\n        }\n      };\n      ls[\"mousedown\"] = {\n        t: this.canvas,\n        f: function (e) {\n          _this._handleMouseDown(e);\n        }\n      };\n\n      for (n in ls) {\n        o = ls[n];\n        o.t.addEventListener(n, o.f, false);\n      }\n    }\n  };\n  /**\n   * Stage instances cannot be cloned.\n   * @method clone\n   **/\n\n\n  p.clone = function () {\n    throw \"Stage cannot be cloned.\";\n  };\n  /**\n   * Returns a string representation of this object.\n   * @method toString\n   * @return {String} a string representation of the instance.\n   **/\n\n\n  p.toString = function () {\n    return \"[Stage (name=\" + this.name + \")]\";\n  }; // private methods:\n\n  /**\n   * @method _getElementRect\n   * @protected\n   * @param {HTMLElement} e\n   **/\n\n\n  p._getElementRect = function (e) {\n    var bounds;\n\n    try {\n      bounds = e.getBoundingClientRect();\n    } // this can fail on disconnected DOM elements in IE9\n    catch (err) {\n      bounds = {\n        top: e.offsetTop,\n        left: e.offsetLeft,\n        width: e.offsetWidth,\n        height: e.offsetHeight\n      };\n    }\n\n    var offX = (window.pageXOffset || document.scrollLeft || 0) - (document.clientLeft || document.body.clientLeft || 0);\n    var offY = (window.pageYOffset || document.scrollTop || 0) - (document.clientTop || document.body.clientTop || 0);\n    var styles = window.getComputedStyle ? getComputedStyle(e, null) : e.currentStyle; // IE <9 compatibility.\n\n    var padL = parseInt(styles.paddingLeft) + parseInt(styles.borderLeftWidth);\n    var padT = parseInt(styles.paddingTop) + parseInt(styles.borderTopWidth);\n    var padR = parseInt(styles.paddingRight) + parseInt(styles.borderRightWidth);\n    var padB = parseInt(styles.paddingBottom) + parseInt(styles.borderBottomWidth); // note: in some browsers bounds properties are read only.\n\n    return {\n      left: bounds.left + offX + padL,\n      right: bounds.right + offX - padR,\n      top: bounds.top + offY + padT,\n      bottom: bounds.bottom + offY - padB\n    };\n  };\n  /**\n   * @method _getPointerData\n   * @protected\n   * @param {Number} id\n   **/\n\n\n  p._getPointerData = function (id) {\n    var data = this._pointerData[id];\n\n    if (!data) {\n      data = this._pointerData[id] = {\n        x: 0,\n        y: 0\n      };\n    }\n\n    return data;\n  };\n  /**\n   * @method _handleMouseMove\n   * @protected\n   * @param {MouseEvent} e\n   **/\n\n\n  p._handleMouseMove = function (e) {\n    if (!e) {\n      e = window.event;\n    }\n\n    this._handlePointerMove(-1, e, e.pageX, e.pageY);\n  };\n  /**\n   * @method _handlePointerMove\n   * @protected\n   * @param {Number} id\n   * @param {Event} e\n   * @param {Number} pageX\n   * @param {Number} pageY\n   * @param {Stage} owner Indicates that the event has already been captured & handled by the indicated stage.\n   **/\n\n\n  p._handlePointerMove = function (id, e, pageX, pageY, owner) {\n    if (this._prevStage && owner === undefined) {\n      return;\n    } // redundant listener.\n\n\n    if (!this.canvas) {\n      return;\n    }\n\n    var nextStage = this._nextStage,\n        o = this._getPointerData(id);\n\n    var inBounds = o.inBounds;\n\n    this._updatePointerPosition(id, e, pageX, pageY);\n\n    if (inBounds || o.inBounds || this.mouseMoveOutside) {\n      if (id === -1 && o.inBounds == !inBounds) {\n        this._dispatchMouseEvent(this, inBounds ? \"mouseleave\" : \"mouseenter\", false, id, o, e);\n      }\n\n      this._dispatchMouseEvent(this, \"stagemousemove\", false, id, o, e);\n\n      this._dispatchMouseEvent(o.target, \"pressmove\", true, id, o, e);\n    }\n\n    nextStage && nextStage._handlePointerMove(id, e, pageX, pageY, null);\n  };\n  /**\n   * @method _updatePointerPosition\n   * @protected\n   * @param {Number} id\n   * @param {Event} e\n   * @param {Number} pageX\n   * @param {Number} pageY\n   **/\n\n\n  p._updatePointerPosition = function (id, e, pageX, pageY) {\n    var rect = this._getElementRect(this.canvas);\n\n    pageX -= rect.left;\n    pageY -= rect.top;\n    var w = this.canvas.width;\n    var h = this.canvas.height;\n    pageX /= (rect.right - rect.left) / w;\n    pageY /= (rect.bottom - rect.top) / h;\n\n    var o = this._getPointerData(id);\n\n    if (o.inBounds = pageX >= 0 && pageY >= 0 && pageX <= w - 1 && pageY <= h - 1) {\n      o.x = pageX;\n      o.y = pageY;\n    } else if (this.mouseMoveOutside) {\n      o.x = pageX < 0 ? 0 : pageX > w - 1 ? w - 1 : pageX;\n      o.y = pageY < 0 ? 0 : pageY > h - 1 ? h - 1 : pageY;\n    }\n\n    o.posEvtObj = e;\n    o.rawX = pageX;\n    o.rawY = pageY;\n\n    if (id === this._primaryPointerID || id === -1) {\n      this.mouseX = o.x;\n      this.mouseY = o.y;\n      this.mouseInBounds = o.inBounds;\n    }\n  };\n  /**\n   * @method _handleMouseUp\n   * @protected\n   * @param {MouseEvent} e\n   **/\n\n\n  p._handleMouseUp = function (e) {\n    this._handlePointerUp(-1, e, false);\n  };\n  /**\n   * @method _handlePointerUp\n   * @protected\n   * @param {Number} id\n   * @param {Event} e\n   * @param {Boolean} clear\n   * @param {Stage} owner Indicates that the event has already been captured & handled by the indicated stage.\n   **/\n\n\n  p._handlePointerUp = function (id, e, clear, owner) {\n    var nextStage = this._nextStage,\n        o = this._getPointerData(id);\n\n    if (this._prevStage && owner === undefined) {\n      return;\n    } // redundant listener.\n\n\n    var target = null,\n        oTarget = o.target;\n\n    if (!owner && (oTarget || nextStage)) {\n      target = this._getObjectsUnderPoint(o.x, o.y, null, true);\n    }\n\n    if (o.down) {\n      this._dispatchMouseEvent(this, \"stagemouseup\", false, id, o, e, target);\n\n      o.down = false;\n    }\n\n    if (target == oTarget) {\n      this._dispatchMouseEvent(oTarget, \"click\", true, id, o, e);\n    }\n\n    this._dispatchMouseEvent(oTarget, \"pressup\", true, id, o, e);\n\n    if (clear) {\n      if (id == this._primaryPointerID) {\n        this._primaryPointerID = null;\n      }\n\n      delete this._pointerData[id];\n    } else {\n      o.target = null;\n    }\n\n    nextStage && nextStage._handlePointerUp(id, e, clear, owner || target && this);\n  };\n  /**\n   * @method _handleMouseDown\n   * @protected\n   * @param {MouseEvent} e\n   **/\n\n\n  p._handleMouseDown = function (e) {\n    this._handlePointerDown(-1, e, e.pageX, e.pageY);\n  };\n  /**\n   * @method _handlePointerDown\n   * @protected\n   * @param {Number} id\n   * @param {Event} e\n   * @param {Number} pageX\n   * @param {Number} pageY\n   * @param {Stage} owner Indicates that the event has already been captured & handled by the indicated stage.\n   **/\n\n\n  p._handlePointerDown = function (id, e, pageX, pageY, owner) {\n    if (this.preventSelection) {\n      e.preventDefault();\n    }\n\n    if (this._primaryPointerID == null || id === -1) {\n      this._primaryPointerID = id;\n    } // mouse always takes over.\n\n\n    if (pageY != null) {\n      this._updatePointerPosition(id, e, pageX, pageY);\n    }\n\n    var target = null,\n        nextStage = this._nextStage,\n        o = this._getPointerData(id);\n\n    if (!owner) {\n      target = o.target = this._getObjectsUnderPoint(o.x, o.y, null, true);\n    }\n\n    if (o.inBounds) {\n      this._dispatchMouseEvent(this, \"stagemousedown\", false, id, o, e, target);\n\n      o.down = true;\n    }\n\n    this._dispatchMouseEvent(target, \"mousedown\", true, id, o, e);\n\n    nextStage && nextStage._handlePointerDown(id, e, pageX, pageY, owner || target && this);\n  };\n  /**\n   * @method _testMouseOver\n   * @param {Boolean} clear If true, clears the mouseover / rollover (ie. no target)\n   * @param {Stage} owner Indicates that the event has already been captured & handled by the indicated stage.\n   * @param {Stage} eventTarget The stage that the cursor is actively over.\n   * @protected\n   **/\n\n\n  p._testMouseOver = function (clear, owner, eventTarget) {\n    if (this._prevStage && owner === undefined) {\n      return;\n    } // redundant listener.\n\n\n    var nextStage = this._nextStage;\n\n    if (!this._mouseOverIntervalID) {\n      // not enabled for mouseover, but should still relay the event.\n      nextStage && nextStage._testMouseOver(clear, owner, eventTarget);\n      return;\n    }\n\n    var o = this._getPointerData(-1); // only update if the mouse position has changed. This provides a lot of optimization, but has some trade-offs.\n\n\n    if (!o || !clear && this.mouseX == this._mouseOverX && this.mouseY == this._mouseOverY && this.mouseInBounds) {\n      return;\n    }\n\n    var e = o.posEvtObj;\n    var isEventTarget = eventTarget || e && e.target == this.canvas;\n    var target = null,\n        common = -1,\n        cursor = \"\",\n        t,\n        i,\n        l;\n\n    if (!owner && (clear || this.mouseInBounds && isEventTarget)) {\n      target = this._getObjectsUnderPoint(this.mouseX, this.mouseY, null, true);\n      this._mouseOverX = this.mouseX;\n      this._mouseOverY = this.mouseY;\n    }\n\n    var oldList = this._mouseOverTarget || [];\n    var oldTarget = oldList[oldList.length - 1];\n    var list = this._mouseOverTarget = []; // generate ancestor list and check for cursor:\n\n    t = target;\n\n    while (t) {\n      list.unshift(t);\n\n      if (!cursor) {\n        cursor = t.cursor;\n      }\n\n      t = t.parent;\n    }\n\n    this.canvas.style.cursor = cursor;\n\n    if (!owner && eventTarget) {\n      eventTarget.canvas.style.cursor = cursor;\n    } // find common ancestor:\n\n\n    for (i = 0, l = list.length; i < l; i++) {\n      if (list[i] != oldList[i]) {\n        break;\n      }\n\n      common = i;\n    }\n\n    if (oldTarget != target) {\n      this._dispatchMouseEvent(oldTarget, \"mouseout\", true, -1, o, e, target);\n    }\n\n    for (i = oldList.length - 1; i > common; i--) {\n      this._dispatchMouseEvent(oldList[i], \"rollout\", false, -1, o, e, target);\n    }\n\n    for (i = list.length - 1; i > common; i--) {\n      this._dispatchMouseEvent(list[i], \"rollover\", false, -1, o, e, oldTarget);\n    }\n\n    if (oldTarget != target) {\n      this._dispatchMouseEvent(target, \"mouseover\", true, -1, o, e, oldTarget);\n    }\n\n    nextStage && nextStage._testMouseOver(clear, owner || target && this, eventTarget || isEventTarget && this);\n  };\n  /**\n   * @method _handleDoubleClick\n   * @protected\n   * @param {MouseEvent} e\n   * @param {Stage} owner Indicates that the event has already been captured & handled by the indicated stage.\n   **/\n\n\n  p._handleDoubleClick = function (e, owner) {\n    var target = null,\n        nextStage = this._nextStage,\n        o = this._getPointerData(-1);\n\n    if (!owner) {\n      target = this._getObjectsUnderPoint(o.x, o.y, null, true);\n\n      this._dispatchMouseEvent(target, \"dblclick\", true, -1, o, e);\n    }\n\n    nextStage && nextStage._handleDoubleClick(e, owner || target && this);\n  };\n  /**\n   * @method _dispatchMouseEvent\n   * @protected\n   * @param {DisplayObject} target\n   * @param {String} type\n   * @param {Boolean} bubbles\n   * @param {Number} pointerId\n   * @param {Object} o\n   * @param {MouseEvent} [nativeEvent]\n   * @param {DisplayObject} [relatedTarget]\n   **/\n\n\n  p._dispatchMouseEvent = function (target, type, bubbles, pointerId, o, nativeEvent, relatedTarget) {\n    // TODO: might be worth either reusing MouseEvent instances, or adding a willTrigger method to avoid GC.\n    if (!target || !bubbles && !target.hasEventListener(type)) {\n      return;\n    }\n    /*\n    // TODO: account for stage transformations?\n    this._mtx = this.getConcatenatedMatrix(this._mtx).invert();\n    var pt = this._mtx.transformPoint(o.x, o.y);\n    var evt = new createjs.MouseEvent(type, bubbles, false, pt.x, pt.y, nativeEvent, pointerId, pointerId==this._primaryPointerID || pointerId==-1, o.rawX, o.rawY);\n    */\n\n\n    var evt = new createjs.MouseEvent(type, bubbles, false, o.x, o.y, nativeEvent, pointerId, pointerId === this._primaryPointerID || pointerId === -1, o.rawX, o.rawY, relatedTarget);\n    target.dispatchEvent(evt);\n  };\n\n  createjs.Stage = createjs.promote(Stage, \"Container\");\n})(); //##############################################################################\n// Bitmap.js\n//##############################################################################\n\n\n(function () {\n  /**\n   * A Bitmap represents an Image, Canvas, or Video in the display list. A Bitmap can be instantiated using an existing\n   * HTML element, or a string.\n   *\n   * <h4>Example</h4>\n   *\n   *      var bitmap = new createjs.Bitmap(\"imagePath.jpg\");\n   *\n   * <strong>Notes:</strong>\n   * <ol>\n   *     <li>When a string path or image tag that is not yet loaded is used, the stage may need to be redrawn before it\n   *      will be displayed.</li>\n   *     <li>Bitmaps with an SVG source currently will not respect an alpha value other than 0 or 1. To get around this,\n   *     the Bitmap can be cached.</li>\n   *     <li>Bitmaps with an SVG source will taint the canvas with cross-origin data, which prevents interactivity. This\n   *     happens in all browsers except recent Firefox builds.</li>\n   *     <li>Images loaded cross-origin will throw cross-origin security errors when interacted with using a mouse, using\n   *     methods such as `getObjectUnderPoint`, or using filters, or caching. You can get around this by setting\n   *     `crossOrigin` flags on your images before passing them to EaselJS, eg: `img.crossOrigin=\"Anonymous\";`</li>\n   * </ol>\n   *\n   * @class Bitmap\n   * @extends DisplayObject\n   * @constructor\n   * @param {HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | String} imageOrUri The source object or URI to an image to\n   * display. This can be either an Image, Canvas, or Video object, or a string URI to an image file to load and use.\n   * If it is a URI, a new Image object will be constructed and assigned to the .image property.\n   **/\n  function Bitmap(imageOrUri) {\n    this.DisplayObject_constructor(); // public properties:\n\n    /**\n     * The image to render. This can be an Image, a Canvas, or a Video. Not all browsers (especially\n     * mobile browsers) support drawing video to a canvas.\n     * @property image\n     * @type HTMLImageElement | HTMLCanvasElement | HTMLVideoElement\n     **/\n\n    if (typeof imageOrUri == \"string\") {\n      this.image = document.createElement(\"img\");\n      this.image.src = imageOrUri;\n    } else {\n      this.image = imageOrUri;\n    }\n    /**\n     * Specifies an area of the source image to draw. If omitted, the whole image will be drawn.\n     * Note that video sources must have a width / height set to work correctly with `sourceRect`.\n     * @property sourceRect\n     * @type Rectangle\n     * @default null\n     */\n\n\n    this.sourceRect = null;\n  }\n\n  var p = createjs.extend(Bitmap, createjs.DisplayObject); // public methods:\n\n  /**\n   * Constructor alias for backwards compatibility. This method will be removed in future versions.\n   * Subclasses should be updated to use {{#crossLink \"Utility Methods/extends\"}}{{/crossLink}}.\n   * @method initialize\n   * @deprecated in favour of `createjs.promote()`\n   **/\n\n  p.initialize = Bitmap; // TODO: deprecated.\n\n  /**\n   * Returns true or false indicating whether the display object would be visible if drawn to a canvas.\n   * This does not account for whether it would be visible within the boundaries of the stage.\n   *\n   * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n   * @method isVisible\n   * @return {Boolean} Boolean indicating whether the display object would be visible if drawn to a canvas\n   **/\n\n  p.isVisible = function () {\n    var image = this.image;\n    var hasContent = this.cacheCanvas || image && (image.naturalWidth || image.getContext || image.readyState >= 2);\n    return !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0 && hasContent);\n  };\n  /**\n   * Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.\n   * Returns true if the draw was handled (useful for overriding functionality).\n   *\n   * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n   * @method draw\n   * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n   * @param {Boolean} [ignoreCache=false] Indicates whether the draw operation should ignore any current cache.\n   * For example, used for drawing the cache (to prevent it from simply drawing an existing cache back\n   * into itself).\n   * @return {Boolean}\n   **/\n\n\n  p.draw = function (ctx, ignoreCache) {\n    if (this.DisplayObject_draw(ctx, ignoreCache) || !this.image) {\n      return true;\n    }\n\n    var img = this.image,\n        rect = this.sourceRect;\n\n    if (rect) {\n      // some browsers choke on out of bound values, so we'll fix them:\n      var x1 = rect.x,\n          y1 = rect.y,\n          x2 = x1 + rect.width,\n          y2 = y1 + rect.height,\n          x = 0,\n          y = 0,\n          w = img.width,\n          h = img.height;\n\n      if (x1 < 0) {\n        x -= x1;\n        x1 = 0;\n      }\n\n      if (x2 > w) {\n        x2 = w;\n      }\n\n      if (y1 < 0) {\n        y -= y1;\n        y1 = 0;\n      }\n\n      if (y2 > h) {\n        y2 = h;\n      }\n\n      ctx.drawImage(img, x1, y1, x2 - x1, y2 - y1, x, y, x2 - x1, y2 - y1);\n    } else {\n      ctx.drawImage(img, 0, 0);\n    }\n\n    return true;\n  }; //Note, the doc sections below document using the specified APIs (from DisplayObject)  from\n  //Bitmap. This is why they have no method implementations.\n\n  /**\n   * Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.\n   * You should <b>not</b> cache Bitmap instances as it can degrade performance.\n   *\n   * <strong>However: If you want to use a filter on a Bitmap, you <em>MUST</em> cache it, or it will not work.</strong>\n   * To see the API for caching, please visit the DisplayObject {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}}\n   * method.\n   * @method cache\n   **/\n\n  /**\n   * Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.\n   * You should <b>not</b> cache Bitmap instances as it can degrade performance.\n   *\n   * <strong>However: If you want to use a filter on a Bitmap, you <em>MUST</em> cache it, or it will not work.</strong>\n   * To see the API for caching, please visit the DisplayObject {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}}\n   * method.\n   * @method updateCache\n   **/\n\n  /**\n   * Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.\n   * You should <b>not</b> cache Bitmap instances as it can degrade performance.\n   *\n   * <strong>However: If you want to use a filter on a Bitmap, you <em>MUST</em> cache it, or it will not work.</strong>\n   * To see the API for caching, please visit the DisplayObject {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}}\n   * method.\n   * @method uncache\n   **/\n\n  /**\n   * Docced in superclass.\n   */\n\n\n  p.getBounds = function () {\n    var rect = this.DisplayObject_getBounds();\n\n    if (rect) {\n      return rect;\n    }\n\n    var image = this.image,\n        o = this.sourceRect || image;\n    var hasContent = image && (image.naturalWidth || image.getContext || image.readyState >= 2);\n    return hasContent ? this._rectangle.setValues(0, 0, o.width, o.height) : null;\n  };\n  /**\n   * Returns a clone of the Bitmap instance.\n   * @method clone\n   * @return {Bitmap} a clone of the Bitmap instance.\n   **/\n\n\n  p.clone = function () {\n    var o = new Bitmap(this.image);\n\n    if (this.sourceRect) {\n      o.sourceRect = this.sourceRect.clone();\n    }\n\n    this._cloneProps(o);\n\n    return o;\n  };\n  /**\n   * Returns a string representation of this object.\n   * @method toString\n   * @return {String} a string representation of the instance.\n   **/\n\n\n  p.toString = function () {\n    return \"[Bitmap (name=\" + this.name + \")]\";\n  };\n\n  createjs.Bitmap = createjs.promote(Bitmap, \"DisplayObject\");\n})(); //##############################################################################\n// Sprite.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor:\n\n  /**\n   * Displays a frame or sequence of frames (ie. an animation) from a SpriteSheet instance. A sprite sheet is a series of\n   * images (usually animation frames) combined into a single image. For example, an animation consisting of 8 100x100\n   * images could be combined into a 400x200 sprite sheet (4 frames across by 2 high). You can display individual frames,\n   * play frames as an animation, and even sequence animations together.\n   *\n   * See the {{#crossLink \"SpriteSheet\"}}{{/crossLink}} class for more information on setting up frames and animations.\n   *\n   * <h4>Example</h4>\n   *\n   *      var instance = new createjs.Sprite(spriteSheet);\n   *      instance.gotoAndStop(\"frameName\");\n   *\n   * Until {{#crossLink \"Sprite/gotoAndStop\"}}{{/crossLink}} or {{#crossLink \"Sprite/gotoAndPlay\"}}{{/crossLink}} is called,\n   * only the first defined frame defined in the sprite sheet will be displayed.\n   *\n   * @class Sprite\n   * @extends DisplayObject\n   * @constructor\n   * @param {SpriteSheet} spriteSheet The SpriteSheet instance to play back. This includes the source image(s), frame\n   * dimensions, and frame data. See {{#crossLink \"SpriteSheet\"}}{{/crossLink}} for more information.\n   * @param {String|Number} [frameOrAnimation] The frame number or animation to play initially.\n   **/\n\n  function Sprite(spriteSheet, frameOrAnimation) {\n    this.DisplayObject_constructor(); // public properties:\n\n    /**\n     * The frame index that will be drawn when draw is called. Note that with some {{#crossLink \"SpriteSheet\"}}{{/crossLink}}\n     * definitions, this will advance non-sequentially. This will always be an integer value.\n     * @property currentFrame\n     * @type {Number}\n     * @default 0\n     * @readonly\n     **/\n\n    this.currentFrame = 0;\n    /**\n     * Returns the name of the currently playing animation.\n     * @property currentAnimation\n     * @type {String}\n     * @final\n     * @readonly\n     **/\n\n    this.currentAnimation = null;\n    /**\n     * Prevents the animation from advancing each tick automatically. For example, you could create a sprite\n     * sheet of icons, set paused to true, and display the appropriate icon by setting <code>currentFrame</code>.\n     * @property paused\n     * @type {Boolean}\n     * @default false\n     **/\n\n    this.paused = true;\n    /**\n     * The SpriteSheet instance to play back. This includes the source image, frame dimensions, and frame\n     * data. See {{#crossLink \"SpriteSheet\"}}{{/crossLink}} for more information.\n     * @property spriteSheet\n     * @type {SpriteSheet}\n     * @readonly\n     **/\n\n    this.spriteSheet = spriteSheet;\n    /**\n     * Specifies the current frame index within the currently playing animation. When playing normally, this will increase\n     * from 0 to n-1, where n is the number of frames in the current animation.\n     *\n     * This could be a non-integer value if\n     * using time-based playback (see {{#crossLink \"Sprite/framerate\"}}{{/crossLink}}, or if the animation's speed is\n     * not an integer.\n     * @property currentAnimationFrame\n     * @type {Number}\n     * @default 0\n     **/\n\n    this.currentAnimationFrame = 0;\n    /**\n     * By default Sprite instances advance one frame per tick. Specifying a framerate for the Sprite (or its related\n     * SpriteSheet) will cause it to advance based on elapsed time between ticks as appropriate to maintain the target\n     * framerate.\n     *\n     * For example, if a Sprite with a framerate of 10 is placed on a Stage being updated at 40fps, then the Sprite will\n     * advance roughly one frame every 4 ticks. This will not be exact, because the time between each tick will\n     * vary slightly between frames.\n     *\n     * This feature is dependent on the tick event object (or an object with an appropriate \"delta\" property) being\n     * passed into {{#crossLink \"Stage/update\"}}{{/crossLink}}.\n     * @property framerate\n     * @type {Number}\n     * @default 0\n     **/\n\n    this.framerate = 0; // private properties:\n\n    /**\n     * Current animation object.\n     * @property _animation\n     * @protected\n     * @type {Object}\n     * @default null\n     **/\n\n    this._animation = null;\n    /**\n     * Current frame index.\n     * @property _currentFrame\n     * @protected\n     * @type {Number}\n     * @default null\n     **/\n\n    this._currentFrame = null;\n    /**\n     * Skips the next auto advance. Used by gotoAndPlay to avoid immediately jumping to the next frame\n     * @property _skipAdvance\n     * @protected\n     * @type {Boolean}\n     * @default false\n     **/\n\n    this._skipAdvance = false;\n\n    if (frameOrAnimation != null) {\n      this.gotoAndPlay(frameOrAnimation);\n    }\n  }\n\n  var p = createjs.extend(Sprite, createjs.DisplayObject);\n  /**\n   * Constructor alias for backwards compatibility. This method will be removed in future versions.\n   * Subclasses should be updated to use {{#crossLink \"Utility Methods/extends\"}}{{/crossLink}}.\n   * @method initialize\n   * @deprecated in favour of `createjs.promote()`\n   **/\n\n  p.initialize = Sprite; // TODO: Deprecated. This is for backwards support of FlashCC spritesheet export.\n  // events:\n\n  /**\n   * Dispatched when an animation reaches its ends.\n   * @event animationend\n   * @param {Object} target The object that dispatched the event.\n   * @param {String} type The event type.\n   * @param {String} name The name of the animation that just ended.\n   * @param {String} next The name of the next animation that will be played, or null. This will be the same as name if the animation is looping.\n   * @since 0.6.0\n   */\n\n  /**\n   * Dispatched any time the current frame changes. For example, this could be due to automatic advancement on a tick,\n   * or calling gotoAndPlay() or gotoAndStop().\n   * @event change\n   * @param {Object} target The object that dispatched the event.\n   * @param {String} type The event type.\n   */\n  // public methods:\n\n  /**\n   * Returns true or false indicating whether the display object would be visible if drawn to a canvas.\n   * This does not account for whether it would be visible within the boundaries of the stage.\n   * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n   * @method isVisible\n   * @return {Boolean} Boolean indicating whether the display object would be visible if drawn to a canvas\n   **/\n\n  p.isVisible = function () {\n    var hasContent = this.cacheCanvas || this.spriteSheet.complete;\n    return !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0 && hasContent);\n  };\n  /**\n   * Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.\n   * Returns true if the draw was handled (useful for overriding functionality).\n   * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n   * @method draw\n   * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n   * @param {Boolean} ignoreCache Indicates whether the draw operation should ignore any current cache.\n   * For example, used for drawing the cache (to prevent it from simply drawing an existing cache back\n   * into itself).\n   **/\n\n\n  p.draw = function (ctx, ignoreCache) {\n    if (this.DisplayObject_draw(ctx, ignoreCache)) {\n      return true;\n    }\n\n    this._normalizeFrame();\n\n    var o = this.spriteSheet.getFrame(this._currentFrame | 0);\n\n    if (!o) {\n      return false;\n    }\n\n    var rect = o.rect;\n\n    if (rect.width && rect.height) {\n      ctx.drawImage(o.image, rect.x, rect.y, rect.width, rect.height, -o.regX, -o.regY, rect.width, rect.height);\n    }\n\n    return true;\n  }; //Note, the doc sections below document using the specified APIs (from DisplayObject)  from\n  //Bitmap. This is why they have no method implementations.\n\n  /**\n   * Because the content of a Sprite is already in a raster format, cache is unnecessary for Sprite instances.\n   * You should not cache Sprite instances as it can degrade performance.\n   * @method cache\n   **/\n\n  /**\n   * Because the content of a Sprite is already in a raster format, cache is unnecessary for Sprite instances.\n   * You should not cache Sprite instances as it can degrade performance.\n   * @method updateCache\n   **/\n\n  /**\n   * Because the content of a Sprite is already in a raster format, cache is unnecessary for Sprite instances.\n   * You should not cache Sprite instances as it can degrade performance.\n   * @method uncache\n   **/\n\n  /**\n   * Play (unpause) the current animation. The Sprite will be paused if either {{#crossLink \"Sprite/stop\"}}{{/crossLink}}\n   * or {{#crossLink \"Sprite/gotoAndStop\"}}{{/crossLink}} is called. Single frame animations will remain\n   * unchanged.\n   * @method play\n   **/\n\n\n  p.play = function () {\n    this.paused = false;\n  };\n  /**\n   * Stop playing a running animation. The Sprite will be playing if {{#crossLink \"Sprite/gotoAndPlay\"}}{{/crossLink}}\n   * is called. Note that calling {{#crossLink \"Sprite/gotoAndPlay\"}}{{/crossLink}} or {{#crossLink \"Sprite/play\"}}{{/crossLink}}\n   * will resume playback.\n   * @method stop\n   **/\n\n\n  p.stop = function () {\n    this.paused = true;\n  };\n  /**\n   * Sets paused to false and plays the specified animation name, named frame, or frame number.\n   * @method gotoAndPlay\n   * @param {String|Number} frameOrAnimation The frame number or animation name that the playhead should move to\n   * and begin playing.\n   **/\n\n\n  p.gotoAndPlay = function (frameOrAnimation) {\n    this.paused = false;\n    this._skipAdvance = true;\n\n    this._goto(frameOrAnimation);\n  };\n  /**\n   * Sets paused to true and seeks to the specified animation name, named frame, or frame number.\n   * @method gotoAndStop\n   * @param {String|Number} frameOrAnimation The frame number or animation name that the playhead should move to\n   * and stop.\n   **/\n\n\n  p.gotoAndStop = function (frameOrAnimation) {\n    this.paused = true;\n\n    this._goto(frameOrAnimation);\n  };\n  /**\n   * Advances the playhead. This occurs automatically each tick by default.\n   * @param [time] {Number} The amount of time in ms to advance by. Only applicable if framerate is set on the Sprite\n   * or its SpriteSheet.\n   * @method advance\n  */\n\n\n  p.advance = function (time) {\n    var fps = this.framerate || this.spriteSheet.framerate;\n    var t = fps && time != null ? time / (1000 / fps) : 1;\n\n    this._normalizeFrame(t);\n  };\n  /**\n   * Returns a {{#crossLink \"Rectangle\"}}{{/crossLink}} instance defining the bounds of the current frame relative to\n   * the origin. For example, a 90 x 70 frame with <code>regX=50</code> and <code>regY=40</code> would return a\n   * rectangle with [x=-50, y=-40, width=90, height=70]. This ignores transformations on the display object.\n   *\n   * Also see the SpriteSheet {{#crossLink \"SpriteSheet/getFrameBounds\"}}{{/crossLink}} method.\n   * @method getBounds\n   * @return {Rectangle} A Rectangle instance. Returns null if the frame does not exist, or the image is not fully\n   * loaded.\n   **/\n\n\n  p.getBounds = function () {\n    // TODO: should this normalizeFrame?\n    return this.DisplayObject_getBounds() || this.spriteSheet.getFrameBounds(this.currentFrame, this._rectangle);\n  };\n  /**\n   * Returns a clone of the Sprite instance. Note that the same SpriteSheet is shared between cloned\n   * instances.\n   * @method clone\n   * @return {Sprite} a clone of the Sprite instance.\n   **/\n\n\n  p.clone = function () {\n    return this._cloneProps(new Sprite(this.spriteSheet));\n  };\n  /**\n   * Returns a string representation of this object.\n   * @method toString\n   * @return {String} a string representation of the instance.\n   **/\n\n\n  p.toString = function () {\n    return \"[Sprite (name=\" + this.name + \")]\";\n  }; // private methods:\n\n  /**\n   * @method _cloneProps\n   * @param {Sprite} o\n   * @return {Sprite} o\n   * @protected\n   **/\n\n\n  p._cloneProps = function (o) {\n    this.DisplayObject__cloneProps(o);\n    o.currentFrame = this.currentFrame;\n    o.currentAnimation = this.currentAnimation;\n    o.paused = this.paused;\n    o.currentAnimationFrame = this.currentAnimationFrame;\n    o.framerate = this.framerate;\n    o._animation = this._animation;\n    o._currentFrame = this._currentFrame;\n    o._skipAdvance = this._skipAdvance;\n    return o;\n  };\n  /**\n   * Advances the <code>currentFrame</code> if paused is not true. This is called automatically when the {{#crossLink \"Stage\"}}{{/crossLink}}\n   * ticks.\n   * @param {Object} evtObj An event object that will be dispatched to all tick listeners. This object is reused between dispatchers to reduce construction & GC costs.\n   * @protected\n   * @method _tick\n   **/\n\n\n  p._tick = function (evtObj) {\n    if (!this.paused) {\n      if (!this._skipAdvance) {\n        this.advance(evtObj && evtObj.delta);\n      }\n\n      this._skipAdvance = false;\n    }\n\n    this.DisplayObject__tick(evtObj);\n  };\n  /**\n   * Normalizes the current frame, advancing animations and dispatching callbacks as appropriate.\n   * @protected\n   * @method _normalizeFrame\n   **/\n\n\n  p._normalizeFrame = function (frameDelta) {\n    frameDelta = frameDelta || 0;\n    var animation = this._animation;\n    var paused = this.paused;\n    var frame = this._currentFrame;\n    var l;\n\n    if (animation) {\n      var speed = animation.speed || 1;\n      var animFrame = this.currentAnimationFrame;\n      l = animation.frames.length;\n\n      if (animFrame + frameDelta * speed >= l) {\n        var next = animation.next;\n\n        if (this._dispatchAnimationEnd(animation, frame, paused, next, l - 1)) {\n          // something changed in the event stack, so we shouldn't make any more changes here.\n          return;\n        } else if (next) {\n          // sequence. Automatically calls _normalizeFrame again with the remaining frames.\n          return this._goto(next, frameDelta - (l - animFrame) / speed);\n        } else {\n          // end.\n          this.paused = true;\n          animFrame = animation.frames.length - 1;\n        }\n      } else {\n        animFrame += frameDelta * speed;\n      }\n\n      this.currentAnimationFrame = animFrame;\n      this._currentFrame = animation.frames[animFrame | 0];\n    } else {\n      frame = this._currentFrame += frameDelta;\n      l = this.spriteSheet.getNumFrames();\n\n      if (frame >= l && l > 0) {\n        if (!this._dispatchAnimationEnd(animation, frame, paused, l - 1)) {\n          // looped.\n          if ((this._currentFrame -= l) >= l) {\n            return this._normalizeFrame();\n          }\n        }\n      }\n    }\n\n    frame = this._currentFrame | 0;\n\n    if (this.currentFrame != frame) {\n      this.currentFrame = frame;\n      this.dispatchEvent(\"change\");\n    }\n  };\n  /**\n   * Dispatches the \"animationend\" event. Returns true if a handler changed the animation (ex. calling {{#crossLink \"Sprite/stop\"}}{{/crossLink}},\n   * {{#crossLink \"Sprite/gotoAndPlay\"}}{{/crossLink}}, etc.)\n   * @property _dispatchAnimationEnd\n   * @private\n   * @type {Function}\n   **/\n\n\n  p._dispatchAnimationEnd = function (animation, frame, paused, next, end) {\n    var name = animation ? animation.name : null;\n\n    if (this.hasEventListener(\"animationend\")) {\n      var evt = new createjs.Event(\"animationend\");\n      evt.name = name;\n      evt.next = next;\n      this.dispatchEvent(evt);\n    } // did the animation get changed in the event stack?:\n\n\n    var changed = this._animation != animation || this._currentFrame != frame; // if the animation hasn't changed, but the sprite was paused, then we want to stick to the last frame:\n\n    if (!changed && !paused && this.paused) {\n      this.currentAnimationFrame = end;\n      changed = true;\n    }\n\n    return changed;\n  };\n  /**\n   * Moves the playhead to the specified frame number or animation.\n   * @method _goto\n   * @param {String|Number} frameOrAnimation The frame number or animation that the playhead should move to.\n   * @param {Boolean} [frame] The frame of the animation to go to. Defaults to 0.\n   * @protected\n   **/\n\n\n  p._goto = function (frameOrAnimation, frame) {\n    this.currentAnimationFrame = 0;\n\n    if (isNaN(frameOrAnimation)) {\n      var data = this.spriteSheet.getAnimation(frameOrAnimation);\n\n      if (data) {\n        this._animation = data;\n        this.currentAnimation = frameOrAnimation;\n\n        this._normalizeFrame(frame);\n      }\n    } else {\n      this.currentAnimation = this._animation = null;\n      this._currentFrame = frameOrAnimation;\n\n      this._normalizeFrame();\n    }\n  };\n\n  createjs.Sprite = createjs.promote(Sprite, \"DisplayObject\");\n})(); //##############################################################################\n// Shape.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor:\n\n  /**\n   * A Shape allows you to display vector art in the display list. It composites a {{#crossLink \"Graphics\"}}{{/crossLink}}\n   * instance which exposes all of the vector drawing methods. The Graphics instance can be shared between multiple Shape\n   * instances to display the same vector graphics with different positions or transforms.\n   *\n   * If the vector art will not\n   * change between draws, you may want to use the {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}} method to reduce the\n   * rendering cost.\n   *\n   * <h4>Example</h4>\n   *\n   *      var graphics = new createjs.Graphics().beginFill(\"#ff0000\").drawRect(0, 0, 100, 100);\n   *      var shape = new createjs.Shape(graphics);\n   *\n   *      //Alternatively use can also use the graphics property of the Shape class to renderer the same as above.\n   *      var shape = new createjs.Shape();\n   *      shape.graphics.beginFill(\"#ff0000\").drawRect(0, 0, 100, 100);\n   *\n   * @class Shape\n   * @extends DisplayObject\n   * @constructor\n   * @param {Graphics} graphics Optional. The graphics instance to display. If null, a new Graphics instance will be created.\n   **/\n\n  function Shape(graphics) {\n    this.DisplayObject_constructor(); // public properties:\n\n    /**\n     * The graphics instance to display.\n     * @property graphics\n     * @type Graphics\n     **/\n\n    this.graphics = graphics ? graphics : new createjs.Graphics();\n  }\n\n  var p = createjs.extend(Shape, createjs.DisplayObject); // TODO: deprecated\n  // p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n  // public methods:\n\n  /**\n   * Returns true or false indicating whether the Shape would be visible if drawn to a canvas.\n   * This does not account for whether it would be visible within the boundaries of the stage.\n   * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n   * @method isVisible\n   * @return {Boolean} Boolean indicating whether the Shape would be visible if drawn to a canvas\n   **/\n\n  p.isVisible = function () {\n    var hasContent = this.cacheCanvas || this.graphics && !this.graphics.isEmpty();\n    return !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0 && hasContent);\n  };\n  /**\n   * Draws the Shape into the specified context ignoring its visible, alpha, shadow, and transform. Returns true if\n   * the draw was handled (useful for overriding functionality).\n   *\n   * <i>NOTE: This method is mainly for internal use, though it may be useful for advanced uses.</i>\n   * @method draw\n   * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n   * @param {Boolean} [ignoreCache=false] Indicates whether the draw operation should ignore any current cache. For example,\n   * used for drawing the cache (to prevent it from simply drawing an existing cache back into itself).\n   * @return {Boolean}\n   **/\n\n\n  p.draw = function (ctx, ignoreCache) {\n    if (this.DisplayObject_draw(ctx, ignoreCache)) {\n      return true;\n    }\n\n    this.graphics.draw(ctx, this);\n    return true;\n  };\n  /**\n   * Returns a clone of this Shape. Some properties that are specific to this instance's current context are reverted to\n   * their defaults (for example .parent).\n   * @method clone\n   * @param {Boolean} recursive If true, this Shape's {{#crossLink \"Graphics\"}}{{/crossLink}} instance will also be\n   * cloned. If false, the Graphics instance will be shared with the new Shape.\n   **/\n\n\n  p.clone = function (recursive) {\n    var g = recursive && this.graphics ? this.graphics.clone() : this.graphics;\n    return this._cloneProps(new Shape(g));\n  };\n  /**\n   * Returns a string representation of this object.\n   * @method toString\n   * @return {String} a string representation of the instance.\n   **/\n\n\n  p.toString = function () {\n    return \"[Shape (name=\" + this.name + \")]\";\n  };\n\n  createjs.Shape = createjs.promote(Shape, \"DisplayObject\");\n})(); //##############################################################################\n// Text.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor:\n\n  /**\n   * Display one or more lines of dynamic text (not user editable) in the display list. Line wrapping support (using the\n   * lineWidth) is very basic, wrapping on spaces and tabs only. Note that as an alternative to Text, you can position HTML\n   * text above or below the canvas relative to items in the display list using the {{#crossLink \"DisplayObject/localToGlobal\"}}{{/crossLink}}\n   * method, or using {{#crossLink \"DOMElement\"}}{{/crossLink}}.\n   *\n   * <b>Please note that Text does not support HTML text, and can only display one font style at a time.</b> To use\n   * multiple font styles, you will need to create multiple text instances, and position them manually.\n   *\n   * <h4>Example</h4>\n   *\n   *      var text = new createjs.Text(\"Hello World\", \"20px Arial\", \"#ff7700\");\n   *      text.x = 100;\n   *      text.textBaseline = \"alphabetic\";\n   *\n   * CreateJS Text supports web fonts (the same rules as Canvas). The font must be loaded and supported by the browser\n   * before it can be displayed.\n   *\n   * <strong>Note:</strong> Text can be expensive to generate, so cache instances where possible. Be aware that not all\n   * browsers will render Text exactly the same.\n   * @class Text\n   * @extends DisplayObject\n   * @constructor\n   * @param {String} [text] The text to display.\n   * @param {String} [font] The font style to use. Any valid value for the CSS font attribute is acceptable (ex. \"bold\n   * 36px Arial\").\n   * @param {String} [color] The color to draw the text in. Any valid value for the CSS color attribute is acceptable (ex.\n   * \"#F00\", \"red\", or \"#FF0000\").\n   **/\n\n  function Text(text, font, color) {\n    this.DisplayObject_constructor(); // public properties:\n\n    /**\n     * The text to display.\n     * @property text\n     * @type String\n     **/\n\n    this.text = text;\n    /**\n     * The font style to use. Any valid value for the CSS font attribute is acceptable (ex. \"bold 36px Arial\").\n     * @property font\n     * @type String\n     **/\n\n    this.font = font;\n    /**\n     * The color to draw the text in. Any valid value for the CSS color attribute is acceptable (ex. \"#F00\"). Default is \"#000\".\n     * It will also accept valid canvas fillStyle values.\n     * @property color\n     * @type String\n     **/\n\n    this.color = color;\n    /**\n     * The horizontal text alignment. Any of \"start\", \"end\", \"left\", \"right\", and \"center\". For detailed\n     * information view the\n     * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#text-styles\">\n     * whatwg spec</a>. Default is \"left\".\n     * @property textAlign\n     * @type String\n     **/\n\n    this.textAlign = \"left\";\n    /**\n     * The vertical alignment point on the font. Any of \"top\", \"hanging\", \"middle\", \"alphabetic\", \"ideographic\", or\n     * \"bottom\". For detailed information view the <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#text-styles\">\n     * whatwg spec</a>. Default is \"top\".\n     * @property textBaseline\n     * @type String\n    */\n\n    this.textBaseline = \"top\";\n    /**\n     * The maximum width to draw the text. If maxWidth is specified (not null), the text will be condensed or\n     * shrunk to make it fit in this width. For detailed information view the\n     * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#text-styles\">\n     * whatwg spec</a>.\n     * @property maxWidth\n     * @type Number\n    */\n\n    this.maxWidth = null;\n    /**\n     * If greater than 0, the text will be drawn as a stroke (outline) of the specified width.\n     * @property outline\n     * @type Number\n     **/\n\n    this.outline = 0;\n    /**\n     * Indicates the line height (vertical distance between baselines) for multi-line text. If null or 0,\n     * the value of getMeasuredLineHeight is used.\n     * @property lineHeight\n     * @type Number\n     **/\n\n    this.lineHeight = 0;\n    /**\n     * Indicates the maximum width for a line of text before it is wrapped to multiple lines. If null,\n     * the text will not be wrapped.\n     * @property lineWidth\n     * @type Number\n     **/\n\n    this.lineWidth = null;\n  }\n\n  var p = createjs.extend(Text, createjs.DisplayObject); // TODO: deprecated\n  // p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n  // static properties:\n\n  /**\n   * @property _workingContext\n   * @type CanvasRenderingContext2D\n   * @private\n   **/\n\n  var canvas = createjs.createCanvas ? createjs.createCanvas() : document.createElement(\"canvas\");\n\n  if (canvas.getContext) {\n    Text._workingContext = canvas.getContext(\"2d\");\n    canvas.width = canvas.height = 1;\n  } // constants:\n\n  /**\n   * Lookup table for the ratio to offset bounds x calculations based on the textAlign property.\n   * @property H_OFFSETS\n   * @type Object\n   * @protected\n   * @static\n   **/\n\n\n  Text.H_OFFSETS = {\n    start: 0,\n    left: 0,\n    center: -0.5,\n    end: -1,\n    right: -1\n  };\n  /**\n   * Lookup table for the ratio to offset bounds y calculations based on the textBaseline property.\n   * @property H_OFFSETS\n   * @type Object\n   * @protected\n   * @static\n   **/\n\n  Text.V_OFFSETS = {\n    top: 0,\n    hanging: -0.01,\n    middle: -0.4,\n    alphabetic: -0.8,\n    ideographic: -0.85,\n    bottom: -1\n  }; // public methods:\n\n  /**\n   * Returns true or false indicating whether the display object would be visible if drawn to a canvas.\n   * This does not account for whether it would be visible within the boundaries of the stage.\n   * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n   * @method isVisible\n   * @return {Boolean} Whether the display object would be visible if drawn to a canvas\n   **/\n\n  p.isVisible = function () {\n    var hasContent = this.cacheCanvas || this.text != null && this.text !== \"\";\n    return !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0 && hasContent);\n  };\n  /**\n   * Draws the Text into the specified context ignoring its visible, alpha, shadow, and transform.\n   * Returns true if the draw was handled (useful for overriding functionality).\n   * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n   * @method draw\n   * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n   * @param {Boolean} ignoreCache Indicates whether the draw operation should ignore any current cache.\n   * For example, used for drawing the cache (to prevent it from simply drawing an existing cache back\n   * into itself).\n   **/\n\n\n  p.draw = function (ctx, ignoreCache) {\n    if (this.DisplayObject_draw(ctx, ignoreCache)) {\n      return true;\n    }\n\n    var col = this.color || \"#000\";\n\n    if (this.outline) {\n      ctx.strokeStyle = col;\n      ctx.lineWidth = this.outline * 1;\n    } else {\n      ctx.fillStyle = col;\n    }\n\n    this._drawText(this._prepContext(ctx));\n\n    return true;\n  };\n  /**\n   * Returns the measured, untransformed width of the text without wrapping. Use getBounds for a more robust value.\n   * @method getMeasuredWidth\n   * @return {Number} The measured, untransformed width of the text.\n   **/\n\n\n  p.getMeasuredWidth = function () {\n    return this._getMeasuredWidth(this.text);\n  };\n  /**\n   * Returns an approximate line height of the text, ignoring the lineHeight property. This is based on the measured\n   * width of a \"M\" character multiplied by 1.2, which provides an approximate line height for most fonts.\n   * @method getMeasuredLineHeight\n   * @return {Number} an approximate line height of the text, ignoring the lineHeight property. This is\n   * based on the measured width of a \"M\" character multiplied by 1.2, which approximates em for most fonts.\n   **/\n\n\n  p.getMeasuredLineHeight = function () {\n    return this._getMeasuredWidth(\"M\") * 1.2;\n  };\n  /**\n   * Returns the approximate height of multi-line text by multiplying the number of lines against either the\n   * <code>lineHeight</code> (if specified) or {{#crossLink \"Text/getMeasuredLineHeight\"}}{{/crossLink}}. Note that\n   * this operation requires the text flowing logic to run, which has an associated CPU cost.\n   * @method getMeasuredHeight\n   * @return {Number} The approximate height of the untransformed multi-line text.\n   **/\n\n\n  p.getMeasuredHeight = function () {\n    return this._drawText(null, {}).height;\n  };\n  /**\n   * Docced in superclass.\n   */\n\n\n  p.getBounds = function () {\n    var rect = this.DisplayObject_getBounds();\n\n    if (rect) {\n      return rect;\n    }\n\n    if (this.text == null || this.text === \"\") {\n      return null;\n    }\n\n    var o = this._drawText(null, {});\n\n    var w = this.maxWidth && this.maxWidth < o.width ? this.maxWidth : o.width;\n    var x = w * Text.H_OFFSETS[this.textAlign || \"left\"];\n    var lineHeight = this.lineHeight || this.getMeasuredLineHeight();\n    var y = lineHeight * Text.V_OFFSETS[this.textBaseline || \"top\"];\n    return this._rectangle.setValues(x, y, w, o.height);\n  };\n  /**\n   * Returns an object with width, height, and lines properties. The width and height are the visual width and height\n   * of the drawn text. The lines property contains an array of strings, one for\n   * each line of text that will be drawn, accounting for line breaks and wrapping. These strings have trailing\n   * whitespace removed.\n   * @method getMetrics\n   * @return {Object} An object with width, height, and lines properties.\n   **/\n\n\n  p.getMetrics = function () {\n    var o = {\n      lines: []\n    };\n    o.lineHeight = this.lineHeight || this.getMeasuredLineHeight();\n    o.vOffset = o.lineHeight * Text.V_OFFSETS[this.textBaseline || \"top\"];\n    return this._drawText(null, o, o.lines);\n  };\n  /**\n   * Returns a clone of the Text instance.\n   * @method clone\n   * @return {Text} a clone of the Text instance.\n   **/\n\n\n  p.clone = function () {\n    return this._cloneProps(new Text(this.text, this.font, this.color));\n  };\n  /**\n   * Returns a string representation of this object.\n   * @method toString\n   * @return {String} a string representation of the instance.\n   **/\n\n\n  p.toString = function () {\n    return \"[Text (text=\" + (this.text.length > 20 ? this.text.substr(0, 17) + \"...\" : this.text) + \")]\";\n  }; // private methods:\n\n  /**\n   * @method _cloneProps\n   * @param {Text} o\n   * @protected\n   * @return {Text} o\n   **/\n\n\n  p._cloneProps = function (o) {\n    this.DisplayObject__cloneProps(o);\n    o.textAlign = this.textAlign;\n    o.textBaseline = this.textBaseline;\n    o.maxWidth = this.maxWidth;\n    o.outline = this.outline;\n    o.lineHeight = this.lineHeight;\n    o.lineWidth = this.lineWidth;\n    return o;\n  };\n  /**\n   * @method _getWorkingContext\n   * @param {CanvasRenderingContext2D} ctx\n   * @return {CanvasRenderingContext2D}\n   * @protected\n   **/\n\n\n  p._prepContext = function (ctx) {\n    ctx.font = this.font || \"10px sans-serif\";\n    ctx.textAlign = this.textAlign || \"left\";\n    ctx.textBaseline = this.textBaseline || \"top\";\n    return ctx;\n  };\n  /**\n   * Draws multiline text.\n   * @method _drawText\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {Object} o\n   * @param {Array} lines\n   * @return {Object}\n   * @protected\n   **/\n\n\n  p._drawText = function (ctx, o, lines) {\n    var paint = !!ctx;\n\n    if (!paint) {\n      ctx = Text._workingContext;\n      ctx.save();\n\n      this._prepContext(ctx);\n    }\n\n    var lineHeight = this.lineHeight || this.getMeasuredLineHeight();\n    var maxW = 0,\n        count = 0;\n    var hardLines = String(this.text).split(/(?:\\r\\n|\\r|\\n)/);\n\n    for (var i = 0, l = hardLines.length; i < l; i++) {\n      var str = hardLines[i];\n      var w = null;\n\n      if (this.lineWidth != null && (w = ctx.measureText(str).width) > this.lineWidth) {\n        // text wrapping:\n        var words = str.split(/(\\s)/);\n        str = words[0];\n        w = ctx.measureText(str).width;\n\n        for (var j = 1, jl = words.length; j < jl; j += 2) {\n          // Line needs to wrap:\n          var wordW = ctx.measureText(words[j] + words[j + 1]).width;\n\n          if (w + wordW > this.lineWidth) {\n            if (paint) {\n              this._drawTextLine(ctx, str, count * lineHeight);\n            }\n\n            if (lines) {\n              lines.push(str);\n            }\n\n            if (w > maxW) {\n              maxW = w;\n            }\n\n            str = words[j + 1];\n            w = ctx.measureText(str).width;\n            count++;\n          } else {\n            str += words[j] + words[j + 1];\n            w += wordW;\n          }\n        }\n      }\n\n      if (paint) {\n        this._drawTextLine(ctx, str, count * lineHeight);\n      }\n\n      if (lines) {\n        lines.push(str);\n      }\n\n      if (o && w == null) {\n        w = ctx.measureText(str).width;\n      }\n\n      if (w > maxW) {\n        maxW = w;\n      }\n\n      count++;\n    }\n\n    if (o) {\n      o.width = maxW;\n      o.height = count * lineHeight;\n    }\n\n    if (!paint) {\n      ctx.restore();\n    }\n\n    return o;\n  };\n  /**\n   * @method _drawTextLine\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {String} text\n   * @param {Number} y\n   * @protected\n   **/\n\n\n  p._drawTextLine = function (ctx, text, y) {\n    // Chrome 17 will fail to draw the text if the last param is included but null, so we feed it a large value instead:\n    if (this.outline) {\n      ctx.strokeText(text, 0, y, this.maxWidth || 0xFFFF);\n    } else {\n      ctx.fillText(text, 0, y, this.maxWidth || 0xFFFF);\n    }\n  };\n  /**\n   * @method _getMeasuredWidth\n   * @param {String} text\n   * @protected\n   **/\n\n\n  p._getMeasuredWidth = function (text) {\n    var ctx = Text._workingContext;\n    ctx.save();\n\n    var w = this._prepContext(ctx).measureText(text).width;\n\n    ctx.restore();\n    return w;\n  };\n\n  createjs.Text = createjs.promote(Text, \"DisplayObject\");\n})(); //##############################################################################\n// BitmapText.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor:\n\n  /**\n   * Displays text using bitmap glyphs defined in a sprite sheet. Multi-line text is supported\n   * using new line characters, but automatic wrapping is not supported. See the \n   * {{#crossLink \"BitmapText/spriteSheet:property\"}}{{/crossLink}}\n   * property for more information on defining glyphs.\n   * \n   * <strong>Important:</strong> BitmapText extends Container, but is not designed to be used as one.\n   * As such, methods like addChild and removeChild are disabled.\n   * @class BitmapText\n   * @extends DisplayObject\n   * @param {String} [text=\"\"] The text to display.\n   * @param {SpriteSheet} [spriteSheet=null] The spritesheet that defines the character glyphs.\n   * @constructor\n   **/\n\n  function BitmapText(text, spriteSheet) {\n    this.Container_constructor(); // public properties:\n\n    /**\n     * The text to display.\n     * @property text\n     * @type String\n     * @default \"\"\n     **/\n\n    this.text = text || \"\";\n    /**\n     * A SpriteSheet instance that defines the glyphs for this bitmap text. Each glyph/character\n     * should have a single frame animation defined in the sprite sheet named the same as\n     * corresponding character. For example, the following animation definition:\n     *\n     * \t\t\"A\": {frames: [0]}\n     *\n     * would indicate that the frame at index 0 of the spritesheet should be drawn for the \"A\" character. The short form\n     * is also acceptable:\n     * \n     * \t\t\"A\": 0\n     *\n     * Note that if a character in the text is not found in the sprite sheet, it will also\n     * try to use the alternate case (upper or lower).\n     *\n     * See SpriteSheet for more information on defining sprite sheet data.\n     * @property spriteSheet\n     * @type SpriteSheet\n     * @default null\n     **/\n\n    this.spriteSheet = spriteSheet;\n    /**\n     * The height of each line of text. If 0, then it will use a line height calculated\n     * by checking for the height of the \"1\", \"T\", or \"L\" character (in that order). If\n     * those characters are not defined, it will use the height of the first frame of the\n     * sprite sheet.\n     * @property lineHeight\n     * @type Number\n     * @default 0\n     **/\n\n    this.lineHeight = 0;\n    /**\n     * This spacing (in pixels) will be added after each character in the output.\n     * @property letterSpacing\n     * @type Number\n     * @default 0\n     **/\n\n    this.letterSpacing = 0;\n    /**\n     * If a space character is not defined in the sprite sheet, then empty pixels equal to\n     * spaceWidth will be inserted instead. If 0, then it will use a value calculated\n     * by checking for the width of the \"1\", \"l\", \"E\", or \"A\" character (in that order). If\n     * those characters are not defined, it will use the width of the first frame of the\n     * sprite sheet.\n     * @property spaceWidth\n     * @type Number\n     * @default 0\n     **/\n\n    this.spaceWidth = 0; // private properties:\n\n    /**\n    * @property _oldProps\n    * @type Object\n    * @protected\n    **/\n\n    this._oldProps = {\n      text: 0,\n      spriteSheet: 0,\n      lineHeight: 0,\n      letterSpacing: 0,\n      spaceWidth: 0\n    };\n  }\n\n  var p = createjs.extend(BitmapText, createjs.Container);\n  /**\n   * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n   * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n   * for details.\n   *\n   * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n   *\n   * @method initialize\n   * @protected\n   * @deprecated\n   */\n  // p.initialize = function() {}; // searchable for devs wondering where it is.\n  // static properties:\n\n  /**\n   * BitmapText uses Sprite instances to draw text. To reduce the creation and destruction of instances (and thus garbage collection), it maintains\n   * an internal object pool of sprite instances to reuse. Increasing this value can cause more sprites to be\n   * retained, slightly increasing memory use, but reducing instantiation.\n   * @property maxPoolSize\n   * @type Number\n   * @static\n   * @default 100\n   **/\n\n  BitmapText.maxPoolSize = 100;\n  /**\n   * Sprite object pool.\n   * @type {Array}\n   * @static\n   * @private\n   */\n\n  BitmapText._spritePool = []; // public methods:\n\n  /**\n   * Docced in superclass.\n   **/\n\n  p.draw = function (ctx, ignoreCache) {\n    if (this.DisplayObject_draw(ctx, ignoreCache)) {\n      return;\n    }\n\n    this._updateText();\n\n    this.Container_draw(ctx, ignoreCache);\n  };\n  /**\n   * Docced in superclass.\n   **/\n\n\n  p.getBounds = function () {\n    this._updateText();\n\n    return this.Container_getBounds();\n  };\n  /**\n   * Returns true or false indicating whether the display object would be visible if drawn to a canvas.\n   * This does not account for whether it would be visible within the boundaries of the stage.\n   * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n   * @method isVisible\n   * @return {Boolean} Boolean indicating whether the display object would be visible if drawn to a canvas\n   **/\n\n\n  p.isVisible = function () {\n    var hasContent = this.cacheCanvas || this.spriteSheet && this.spriteSheet.complete && this.text;\n    return !!(this.visible && this.alpha > 0 && this.scaleX !== 0 && this.scaleY !== 0 && hasContent);\n  };\n\n  p.clone = function () {\n    return this._cloneProps(new BitmapText(this.text, this.spriteSheet));\n  };\n  /**\n   * <strong>Disabled in BitmapText.</strong>\n   * @method addChild\n   **/\n\n  /**\n   * <strong>Disabled in BitmapText.</strong>\n   * @method addChildAt\n   **/\n\n  /**\n   * <strong>Disabled in BitmapText.</strong>\n   * @method removeChild\n   **/\n\n  /**\n   * <strong>Disabled in BitmapText.</strong>\n   * @method removeChildAt\n   **/\n\n  /**\n   * <strong>Disabled in BitmapText.</strong>\n   * @method removeAllChildren\n   **/\n\n\n  p.addChild = p.addChildAt = p.removeChild = p.removeChildAt = p.removeAllChildren = function () {}; // private methods:\n\n  /**\n  * @method _cloneProps\n  * @param {BitmapText} o\n  * @return {BitmapText} o\n  * @protected\n  **/\n\n\n  p._cloneProps = function (o) {\n    this.Container__cloneProps(o);\n    o.lineHeight = this.lineHeight;\n    o.letterSpacing = this.letterSpacing;\n    o.spaceWidth = this.spaceWidth;\n    return o;\n  };\n  /**\n   * @method _getFrameIndex\n   * @param {String} character\n   * @param {SpriteSheet} spriteSheet\n   * @return {Number}\n   * @protected\n   **/\n\n\n  p._getFrameIndex = function (character, spriteSheet) {\n    var c,\n        o = spriteSheet.getAnimation(character);\n\n    if (!o) {\n      character != (c = character.toUpperCase()) || character != (c = character.toLowerCase()) || (c = null);\n\n      if (c) {\n        o = spriteSheet.getAnimation(c);\n      }\n    }\n\n    return o && o.frames[0];\n  };\n  /**\n   * @method _getFrame\n   * @param {String} character\n   * @param {SpriteSheet} spriteSheet\n   * @return {Object}\n   * @protected\n   **/\n\n\n  p._getFrame = function (character, spriteSheet) {\n    var index = this._getFrameIndex(character, spriteSheet);\n\n    return index == null ? index : spriteSheet.getFrame(index);\n  };\n  /**\n   * @method _getLineHeight\n   * @param {SpriteSheet} ss\n   * @return {Number}\n   * @protected\n   **/\n\n\n  p._getLineHeight = function (ss) {\n    var frame = this._getFrame(\"1\", ss) || this._getFrame(\"T\", ss) || this._getFrame(\"L\", ss) || ss.getFrame(0);\n    return frame ? frame.rect.height : 1;\n  };\n  /**\n   * @method _getSpaceWidth\n   * @param {SpriteSheet} ss\n   * @return {Number}\n   * @protected\n   **/\n\n\n  p._getSpaceWidth = function (ss) {\n    var frame = this._getFrame(\"1\", ss) || this._getFrame(\"l\", ss) || this._getFrame(\"e\", ss) || this._getFrame(\"a\", ss) || ss.getFrame(0);\n    return frame ? frame.rect.width : 1;\n  };\n  /**\n   * @method _drawText\n   * @protected\n   **/\n\n\n  p._updateText = function () {\n    var x = 0,\n        y = 0,\n        o = this._oldProps,\n        change = false,\n        spaceW = this.spaceWidth,\n        lineH = this.lineHeight,\n        ss = this.spriteSheet;\n    var pool = BitmapText._spritePool,\n        kids = this.children,\n        childIndex = 0,\n        numKids = kids.length,\n        sprite;\n\n    for (var n in o) {\n      if (o[n] != this[n]) {\n        o[n] = this[n];\n        change = true;\n      }\n    }\n\n    if (!change) {\n      return;\n    }\n\n    var hasSpace = !!this._getFrame(\" \", ss);\n\n    if (!hasSpace && !spaceW) {\n      spaceW = this._getSpaceWidth(ss);\n    }\n\n    if (!lineH) {\n      lineH = this._getLineHeight(ss);\n    }\n\n    for (var i = 0, l = this.text.length; i < l; i++) {\n      var character = this.text.charAt(i);\n\n      if (character == \" \" && !hasSpace) {\n        x += spaceW;\n        continue;\n      } else if (character == \"\\n\" || character == \"\\r\") {\n        if (character == \"\\r\" && this.text.charAt(i + 1) == \"\\n\") {\n          i++;\n        } // crlf\n\n\n        x = 0;\n        y += lineH;\n        continue;\n      }\n\n      var index = this._getFrameIndex(character, ss);\n\n      if (index == null) {\n        continue;\n      }\n\n      if (childIndex < numKids) {\n        sprite = kids[childIndex];\n      } else {\n        kids.push(sprite = pool.length ? pool.pop() : new createjs.Sprite());\n        sprite.parent = this;\n        numKids++;\n      }\n\n      sprite.spriteSheet = ss;\n      sprite.gotoAndStop(index);\n      sprite.x = x;\n      sprite.y = y;\n      childIndex++;\n      x += sprite.getBounds().width + this.letterSpacing;\n    }\n\n    while (numKids > childIndex) {\n      // faster than removeChild.\n      pool.push(sprite = kids.pop());\n      sprite.parent = null;\n      numKids--;\n    }\n\n    if (pool.length > BitmapText.maxPoolSize) {\n      pool.length = BitmapText.maxPoolSize;\n    }\n  };\n\n  createjs.BitmapText = createjs.promote(BitmapText, \"Container\");\n})(); //##############################################################################\n// MovieClip.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor:\n\n  /**\n   * The MovieClip class associates a TweenJS Timeline with an EaselJS {{#crossLink \"Container\"}}{{/crossLink}}. It allows\n   * you to create objects which encapsulate timeline animations, state changes, and synched actions. Due to the\n   * complexities inherent in correctly setting up a MovieClip, it is largely intended for tool output and is not included\n   * in the main EaselJS library.\n   *\n   * Currently MovieClip only works properly if it is tick based (as opposed to time based) though some concessions have\n   * been made to support time-based timelines in the future.\n   *\n   * <h4>Example</h4>\n   * This example animates two shapes back and forth. The grey shape starts on the left, but we jump to a mid-point in\n   * the animation using {{#crossLink \"MovieClip/gotoAndPlay\"}}{{/crossLink}}.\n   *\n   *      var stage = new createjs.Stage(\"canvas\");\n   *      createjs.Ticker.addEventListener(\"tick\", stage);\n   *\n   *      var mc = new createjs.MovieClip(null, 0, true, {start:20});\n   *      stage.addChild(mc);\n   *\n   *      var child1 = new createjs.Shape(\n   *          new createjs.Graphics().beginFill(\"#999999\")\n   *              .drawCircle(30,30,30));\n   *      var child2 = new createjs.Shape(\n   *          new createjs.Graphics().beginFill(\"#5a9cfb\")\n   *              .drawCircle(30,30,30));\n   *\n   *      mc.timeline.addTween(\n   *          createjs.Tween.get(child1)\n   *              .to({x:0}).to({x:60}, 50).to({x:0}, 50));\n   *      mc.timeline.addTween(\n   *          createjs.Tween.get(child2)\n   *              .to({x:60}).to({x:0}, 50).to({x:60}, 50));\n   *\n   *      mc.gotoAndPlay(\"start\");\n   *\n   * It is recommended to use <code>tween.to()</code> to animate and set properties (use no duration to have it set\n   * immediately), and the <code>tween.wait()</code> method to create delays between animations. Note that using the\n   * <code>tween.set()</code> method to affect properties will likely not provide the desired result.\n   *\n   * @class MovieClip\n   * @main MovieClip\n   * @extends Container\n   * @constructor\n   * @param {String} [mode=independent] Initial value for the mode property. One of {{#crossLink \"MovieClip/INDEPENDENT:property\"}}{{/crossLink}},\n   * {{#crossLink \"MovieClip/SINGLE_FRAME:property\"}}{{/crossLink}}, or {{#crossLink \"MovieClip/SYNCHED:property\"}}{{/crossLink}}.\n   * The default is {{#crossLink \"MovieClip/INDEPENDENT:property\"}}{{/crossLink}}.\n   * @param {Number} [startPosition=0] Initial value for the {{#crossLink \"MovieClip/startPosition:property\"}}{{/crossLink}}\n   * property.\n   * @param {Boolean} [loop=true] Initial value for the {{#crossLink \"MovieClip/loop:property\"}}{{/crossLink}}\n   * property. The default is `true`.\n   * @param {Object} [labels=null] A hash of labels to pass to the {{#crossLink \"MovieClip/timeline:property\"}}{{/crossLink}}\n   * instance associated with this MovieClip. Labels only need to be passed if they need to be used.\n   **/\n\n  function MovieClip(mode, startPosition, loop, labels) {\n    this.Container_constructor();\n    !MovieClip.inited && MovieClip.init(); // static init\n    // public properties:\n\n    /**\n     * Controls how this MovieClip advances its time. Must be one of 0 (INDEPENDENT), 1 (SINGLE_FRAME), or 2 (SYNCHED).\n     * See each constant for a description of the behaviour.\n     * @property mode\n     * @type String\n     * @default null\n     **/\n\n    this.mode = mode || MovieClip.INDEPENDENT;\n    /**\n     * Specifies what the first frame to play in this movieclip, or the only frame to display if mode is SINGLE_FRAME.\n     * @property startPosition\n     * @type Number\n     * @default 0\n     */\n\n    this.startPosition = startPosition || 0;\n    /**\n     * Indicates whether this MovieClip should loop when it reaches the end of its timeline.\n     * @property loop\n     * @type Boolean\n     * @default true\n     */\n\n    this.loop = loop;\n    /**\n     * The current frame of the movieclip.\n     * @property currentFrame\n     * @type Number\n     * @default 0\n     * @readonly\n     */\n\n    this.currentFrame = 0;\n    /**\n     * The TweenJS Timeline that is associated with this MovieClip. This is created automatically when the MovieClip\n     * instance is initialized. Animations are created by adding <a href=\"http://tweenjs.com\">TweenJS</a> Tween\n     * instances to the timeline.\n     *\n     * <h4>Example</h4>\n     *\n     *      var tween = createjs.Tween.get(target).to({x:0}).to({x:100}, 30);\n     *      var mc = new createjs.MovieClip();\n     *      mc.timeline.addTween(tween);\n     *\n     * Elements can be added and removed from the timeline by toggling an \"_off\" property\n     * using the <code>tweenInstance.to()</code> method. Note that using <code>Tween.set</code> is not recommended to\n     * create MovieClip animations. The following example will toggle the target off on frame 0, and then back on for\n     * frame 1. You can use the \"visible\" property to achieve the same effect.\n     *\n     *      var tween = createjs.Tween.get(target).to({_off:false})\n     *          .wait(1).to({_off:true})\n     *          .wait(1).to({_off:false});\n     *\n     * @property timeline\n     * @type Timeline\n     * @default null\n     */\n\n    this.timeline = new createjs.Timeline(null, labels, {\n      paused: true,\n      position: startPosition,\n      useTicks: true\n    });\n    /**\n     * If true, the MovieClip's position will not advance when ticked.\n     * @property paused\n     * @type Boolean\n     * @default false\n     */\n\n    this.paused = false;\n    /**\n     * If true, actions in this MovieClip's tweens will be run when the playhead advances.\n     * @property actionsEnabled\n     * @type Boolean\n     * @default true\n     */\n\n    this.actionsEnabled = true;\n    /**\n     * If true, the MovieClip will automatically be reset to its first frame whenever the timeline adds\n     * it back onto the display list. This only applies to MovieClip instances with mode=INDEPENDENT.\n     * <br><br>\n     * For example, if you had a character animation with a \"body\" child MovieClip instance\n     * with different costumes on each frame, you could set body.autoReset = false, so that\n     * you can manually change the frame it is on, without worrying that it will be reset\n     * automatically.\n     * @property autoReset\n     * @type Boolean\n     * @default true\n     */\n\n    this.autoReset = true;\n    /**\n     * An array of bounds for each frame in the MovieClip. This is mainly intended for tool output.\n     * @property frameBounds\n     * @type Array\n     * @default null\n     */\n\n    this.frameBounds = this.frameBounds || null; // TODO: Deprecated. This is for backwards support of FlashCC\n\n    /**\n     * By default MovieClip instances advance one frame per tick. Specifying a framerate for the MovieClip\n     * will cause it to advance based on elapsed time between ticks as appropriate to maintain the target\n     * framerate.\n     *\n     * For example, if a MovieClip with a framerate of 10 is placed on a Stage being updated at 40fps, then the MovieClip will\n     * advance roughly one frame every 4 ticks. This will not be exact, because the time between each tick will\n     * vary slightly between frames.\n     *\n     * This feature is dependent on the tick event object (or an object with an appropriate \"delta\" property) being\n     * passed into {{#crossLink \"Stage/update\"}}{{/crossLink}}.\n     * @property framerate\n     * @type {Number}\n     * @default null\n     **/\n\n    this.framerate = null; // private properties:\n\n    /**\n     * @property _synchOffset\n     * @type Number\n     * @default 0\n     * @private\n     */\n\n    this._synchOffset = 0;\n    /**\n     * @property _prevPos\n     * @type Number\n     * @default -1\n     * @private\n     */\n\n    this._prevPos = -1; // TODO: evaluate using a ._reset Boolean prop instead of -1.\n\n    /**\n     * @property _prevPosition\n     * @type Number\n     * @default 0\n     * @private\n     */\n\n    this._prevPosition = 0;\n    /**\n     * The time remaining from the previous tick, only applicable when .framerate is set.\n     * @property _t\n     * @type Number\n     * @private\n     */\n\n    this._t = 0;\n    /**\n     * List of display objects that are actively being managed by the MovieClip.\n     * @property _managed\n     * @type Object\n     * @private\n     */\n\n    this._managed = {};\n  }\n\n  var p = createjs.extend(MovieClip, createjs.Container); // constants:\n\n  /**\n   * The MovieClip will advance independently of its parent, even if its parent is paused.\n   * This is the default mode.\n   * @property INDEPENDENT\n   * @static\n   * @type String\n   * @default \"independent\"\n   * @readonly\n   **/\n\n  MovieClip.INDEPENDENT = \"independent\";\n  /**\n   * The MovieClip will only display a single frame (as determined by the startPosition property).\n   * @property SINGLE_FRAME\n   * @static\n   * @type String\n   * @default \"single\"\n   * @readonly\n   **/\n\n  MovieClip.SINGLE_FRAME = \"single\";\n  /**\n   * The MovieClip will be advanced only when its parent advances and will be synched to the position of\n   * the parent MovieClip.\n   * @property SYNCHED\n   * @static\n   * @type String\n   * @default \"synched\"\n   * @readonly\n   **/\n\n  MovieClip.SYNCHED = \"synched\"; // static properties:\n\n  MovieClip.inited = false; // static methods:\n\n  MovieClip.init = function () {\n    if (MovieClip.inited) {\n      return;\n    } // plugins introduce some overhead to Tween, so we only install this if an MC is instantiated.\n\n\n    MovieClipPlugin.install();\n    MovieClip.inited = true;\n  }; // getter / setters:\n\n  /**\n   * Use the {{#crossLink \"MovieClip/labels:property\"}}{{/crossLink}} property instead.\n   * @method getLabels\n   * @return {Array}\n   * @deprecated\n   **/\n\n\n  p.getLabels = function () {\n    return this.timeline.getLabels();\n  };\n  /**\n   * Use the {{#crossLink \"MovieClip/currentLabel:property\"}}{{/crossLink}} property instead.\n   * @method getCurrentLabel\n   * @return {String}\n   * @deprecated\n   **/\n\n\n  p.getCurrentLabel = function () {\n    this._updateTimeline();\n\n    return this.timeline.getCurrentLabel();\n  };\n  /**\n   * Use the {{#crossLink \"MovieClip/duration:property\"}}{{/crossLink}} property instead.\n   * @method getDuration\n   * @return {Number}\n   * @protected\n   **/\n\n\n  p.getDuration = function () {\n    return this.timeline.duration;\n  };\n  /**\n   * Returns an array of objects with label and position (aka frame) properties, sorted by position.\n   * Shortcut to TweenJS: Timeline.getLabels();\n   * @property labels\n   * @type {Array}\n   * @readonly\n   **/\n\n  /**\n   * Returns the name of the label on or immediately before the current frame. See TweenJS: Timeline.getCurrentLabel()\n   * for more information.\n   * @property currentLabel\n   * @type {String}\n   * @readonly\n   **/\n\n  /**\n   * Returns the duration of this MovieClip in seconds or ticks. Identical to {{#crossLink \"MovieClip/duration:property\"}}{{/crossLink}}\n   * and provided for Flash API compatibility.\n   * @property totalFrames\n   * @type {Number}\n   * @readonly\n   **/\n\n  /**\n   * Returns the duration of this MovieClip in seconds or ticks.\n   * @property duration\n   * @type {Number}\n   * @readonly\n   **/\n\n\n  try {\n    Object.defineProperties(p, {\n      labels: {\n        get: p.getLabels\n      },\n      currentLabel: {\n        get: p.getCurrentLabel\n      },\n      totalFrames: {\n        get: p.getDuration\n      },\n      duration: {\n        get: p.getDuration\n      }\n    });\n  } catch (e) {} // public methods:\n\n  /**\n   * Constructor alias for backwards compatibility. This method will be removed in future versions.\n   * Subclasses should be updated to use {{#crossLink \"Utility Methods/extends\"}}{{/crossLink}}.\n   * @method initialize\n   * @deprecated in favour of `createjs.promote()`\n   **/\n\n\n  p.initialize = MovieClip; // TODO: Deprecated. This is for backwards support of FlashCC\n\n  /**\n   * Returns true or false indicating whether the display object would be visible if drawn to a canvas.\n   * This does not account for whether it would be visible within the boundaries of the stage.\n   * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n   * @method isVisible\n   * @return {Boolean} Boolean indicating whether the display object would be visible if drawn to a canvas\n   **/\n\n  p.isVisible = function () {\n    // children are placed in draw, so we can't determine if we have content.\n    return !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0);\n  };\n  /**\n   * Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.\n   * Returns true if the draw was handled (useful for overriding functionality).\n   * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n   * @method draw\n   * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n   * @param {Boolean} ignoreCache Indicates whether the draw operation should ignore any current cache.\n   * For example, used for drawing the cache (to prevent it from simply drawing an existing cache back\n   * into itself).\n   **/\n\n\n  p.draw = function (ctx, ignoreCache) {\n    // draw to cache first:\n    if (this.DisplayObject_draw(ctx, ignoreCache)) {\n      return true;\n    }\n\n    this._updateTimeline();\n\n    this.Container_draw(ctx, ignoreCache);\n    return true;\n  };\n  /**\n   * Sets paused to false.\n   * @method play\n   **/\n\n\n  p.play = function () {\n    this.paused = false;\n  };\n  /**\n   * Sets paused to true.\n   * @method stop\n   **/\n\n\n  p.stop = function () {\n    this.paused = true;\n  };\n  /**\n   * Advances this movie clip to the specified position or label and sets paused to false.\n   * @method gotoAndPlay\n   * @param {String|Number} positionOrLabel The animation name or frame number to go to.\n   **/\n\n\n  p.gotoAndPlay = function (positionOrLabel) {\n    this.paused = false;\n\n    this._goto(positionOrLabel);\n  };\n  /**\n   * Advances this movie clip to the specified position or label and sets paused to true.\n   * @method gotoAndStop\n   * @param {String|Number} positionOrLabel The animation or frame name to go to.\n   **/\n\n\n  p.gotoAndStop = function (positionOrLabel) {\n    this.paused = true;\n\n    this._goto(positionOrLabel);\n  };\n  /**\n   * Advances the playhead. This occurs automatically each tick by default.\n   * @param [time] {Number} The amount of time in ms to advance by. Only applicable if framerate is set.\n   * @method advance\n  */\n\n\n  p.advance = function (time) {\n    // TODO: should we worry at all about clips who change their own modes via frame scripts?\n    var independent = MovieClip.INDEPENDENT;\n\n    if (this.mode != independent) {\n      return;\n    }\n\n    var o = this,\n        fps = o.framerate;\n\n    while ((o = o.parent) && fps == null) {\n      if (o.mode == independent) {\n        fps = o._framerate;\n      }\n    }\n\n    this._framerate = fps;\n    var t = fps != null && fps != -1 && time != null ? time / (1000 / fps) + this._t : 1;\n    var frames = t | 0;\n    this._t = t - frames; // leftover time\n\n    while (!this.paused && frames--) {\n      this._prevPosition = this._prevPos < 0 ? 0 : this._prevPosition + 1;\n\n      this._updateTimeline();\n    }\n  };\n  /**\n   * MovieClip instances cannot be cloned.\n   * @method clone\n   **/\n\n\n  p.clone = function () {\n    // TODO: add support for this? Need to clone the Timeline & retarget tweens - pretty complex.\n    throw \"MovieClip cannot be cloned.\";\n  };\n  /**\n   * Returns a string representation of this object.\n   * @method toString\n   * @return {String} a string representation of the instance.\n   **/\n\n\n  p.toString = function () {\n    return \"[MovieClip (name=\" + this.name + \")]\";\n  }; // private methods:\n\n  /**\n   * @method _tick\n   * @param {Object} evtObj An event object that will be dispatched to all tick listeners. This object is reused between dispatchers to reduce construction & GC costs.\n   * function.\n   * @protected\n   **/\n\n\n  p._tick = function (evtObj) {\n    this.advance(evtObj && evtObj.delta);\n    this.Container__tick(evtObj);\n  };\n  /**\n   * @method _goto\n   * @param {String|Number} positionOrLabel The animation name or frame number to go to.\n   * @protected\n   **/\n\n\n  p._goto = function (positionOrLabel) {\n    var pos = this.timeline.resolve(positionOrLabel);\n\n    if (pos == null) {\n      return;\n    } // prevent _updateTimeline from overwriting the new position because of a reset:\n\n\n    if (this._prevPos == -1) {\n      this._prevPos = NaN;\n    }\n\n    this._prevPosition = pos;\n    this._t = 0;\n\n    this._updateTimeline();\n  };\n  /**\n   * @method _reset\n   * @private\n   **/\n\n\n  p._reset = function () {\n    this._prevPos = -1;\n    this._t = this.currentFrame = 0;\n    this.paused = false;\n  };\n  /**\n   * @method _updateTimeline\n   * @protected\n   **/\n\n\n  p._updateTimeline = function () {\n    var tl = this.timeline;\n    var synched = this.mode != MovieClip.INDEPENDENT;\n    tl.loop = this.loop == null ? true : this.loop;\n    var pos = synched ? this.startPosition + (this.mode == MovieClip.SINGLE_FRAME ? 0 : this._synchOffset) : this._prevPos < 0 ? 0 : this._prevPosition;\n    var mode = synched || !this.actionsEnabled ? createjs.Tween.NONE : null; // pre-assign currentFrame so it is available to frame scripts:\n\n    this.currentFrame = tl._calcPosition(pos); // update timeline position, ignoring actions if this is a graphic.\n\n    tl.setPosition(pos, mode);\n    this._prevPosition = tl._prevPosition;\n\n    if (this._prevPos == tl._prevPos) {\n      return;\n    }\n\n    this.currentFrame = this._prevPos = tl._prevPos;\n\n    for (var n in this._managed) {\n      this._managed[n] = 1;\n    }\n\n    var tweens = tl._tweens;\n\n    for (var i = 0, l = tweens.length; i < l; i++) {\n      var tween = tweens[i];\n      var target = tween._target;\n\n      if (target == this || tween.passive) {\n        continue;\n      } // TODO: this assumes actions tween has this as the target. Valid?\n\n\n      var offset = tween._stepPosition;\n\n      if (target instanceof createjs.DisplayObject) {\n        // motion tween.\n        this._addManagedChild(target, offset);\n      } else {\n        // state tween.\n        this._setState(target.state, offset);\n      }\n    }\n\n    var kids = this.children;\n\n    for (i = kids.length - 1; i >= 0; i--) {\n      var id = kids[i].id;\n\n      if (this._managed[id] == 1) {\n        this.removeChildAt(i);\n        delete this._managed[id];\n      }\n    }\n  };\n  /**\n   * @method _setState\n   * @param {Array} state\n   * @param {Number} offset\n   * @protected\n   **/\n\n\n  p._setState = function (state, offset) {\n    if (!state) {\n      return;\n    }\n\n    for (var i = state.length - 1; i >= 0; i--) {\n      var o = state[i];\n      var target = o.t;\n      var props = o.p;\n\n      for (var n in props) {\n        target[n] = props[n];\n      }\n\n      this._addManagedChild(target, offset);\n    }\n  };\n  /**\n   * Adds a child to the timeline, and sets it up as a managed child.\n   * @method _addManagedChild\n   * @param {MovieClip} child The child MovieClip to manage\n   * @param {Number} offset\n   * @private\n   **/\n\n\n  p._addManagedChild = function (child, offset) {\n    if (child._off) {\n      return;\n    }\n\n    this.addChildAt(child, 0);\n\n    if (child instanceof MovieClip) {\n      child._synchOffset = offset; // TODO: this does not precisely match Flash. Flash loses track of the clip if it is renamed or removed from the timeline, which causes it to reset.\n\n      if (child.mode == MovieClip.INDEPENDENT && child.autoReset && !this._managed[child.id]) {\n        child._reset();\n      }\n    }\n\n    this._managed[child.id] = 2;\n  };\n  /**\n   * @method _getBounds\n   * @param {Matrix2D} matrix\n   * @param {Boolean} ignoreTransform\n   * @return {Rectangle}\n   * @protected\n   **/\n\n\n  p._getBounds = function (matrix, ignoreTransform) {\n    var bounds = this.DisplayObject_getBounds();\n\n    if (!bounds) {\n      this._updateTimeline();\n\n      if (this.frameBounds) {\n        bounds = this._rectangle.copy(this.frameBounds[this.currentFrame]);\n      }\n    }\n\n    if (bounds) {\n      return this._transformBounds(bounds, matrix, ignoreTransform);\n    }\n\n    return this.Container__getBounds(matrix, ignoreTransform);\n  };\n\n  createjs.MovieClip = createjs.promote(MovieClip, \"Container\"); // MovieClipPlugin for TweenJS:\n\n  /**\n   * This plugin works with <a href=\"http://tweenjs.com\" target=\"_blank\">TweenJS</a> to prevent the startPosition\n   * property from tweening.\n   * @private\n   * @class MovieClipPlugin\n   * @constructor\n   **/\n\n  function MovieClipPlugin() {\n    throw \"MovieClipPlugin cannot be instantiated.\";\n  }\n  /**\n   * @method priority\n   * @private\n   **/\n\n\n  MovieClipPlugin.priority = 100; // very high priority, should run first\n\n  /**\n   * @method install\n   * @private\n   **/\n\n  MovieClipPlugin.install = function () {\n    createjs.Tween.installPlugin(MovieClipPlugin, [\"startPosition\"]);\n  };\n  /**\n   * @method init\n   * @param {Tween} tween\n   * @param {String} prop\n   * @param {String|Number|Boolean} value\n   * @private\n   **/\n\n\n  MovieClipPlugin.init = function (tween, prop, value) {\n    return value;\n  };\n  /**\n   * @method step\n   * @private\n   **/\n\n\n  MovieClipPlugin.step = function () {// unused.\n  };\n  /**\n   * @method tween\n   * @param {Tween} tween\n   * @param {String} prop\n   * @param {String | Number | Boolean} value\n   * @param {Array} startValues\n   * @param {Array} endValues\n   * @param {Number} ratio\n   * @param {Object} wait\n   * @param {Object} end\n   * @return {*}\n   */\n\n\n  MovieClipPlugin.tween = function (tween, prop, value, startValues, endValues, ratio, wait, end) {\n    if (!(tween.target instanceof MovieClip)) {\n      return value;\n    }\n\n    return ratio == 1 ? endValues[prop] : startValues[prop];\n  };\n})(); //##############################################################################\n// SpriteSheetUtils.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor:\n\n  /**\n   * The SpriteSheetUtils class is a collection of static methods for working with {{#crossLink \"SpriteSheet\"}}{{/crossLink}}s.\n   * A sprite sheet is a series of images (usually animation frames) combined into a single image on a regular grid. For\n   * example, an animation consisting of 8 100x100 images could be combined into a 400x200 sprite sheet (4 frames across\n   * by 2 high). The SpriteSheetUtils class uses a static interface and should not be instantiated.\n   * @class SpriteSheetUtils\n   * @static\n   **/\n\n  function SpriteSheetUtils() {\n    throw \"SpriteSheetUtils cannot be instantiated\";\n  } // private static properties:\n\n  /**\n   * @property _workingCanvas\n   * @static\n   * @type HTMLCanvasElement | Object\n   * @protected\n  */\n\n  /**\n   * @property _workingContext\n   * @static\n   * @type CanvasRenderingContext2D\n   * @protected\n  */\n\n\n  var canvas = createjs.createCanvas ? createjs.createCanvas() : document.createElement(\"canvas\");\n\n  if (canvas.getContext) {\n    SpriteSheetUtils._workingCanvas = canvas;\n    SpriteSheetUtils._workingContext = canvas.getContext(\"2d\");\n    canvas.width = canvas.height = 1;\n  } // public static methods:\n\n  /**\n   * <b>This is an experimental method, and may be buggy. Please report issues.</b><br/><br/>\n   * Extends the existing sprite sheet by flipping the original frames horizontally, vertically, or both,\n   * and adding appropriate animation & frame data. The flipped animations will have a suffix added to their names\n   * (_h, _v, _hv as appropriate). Make sure the sprite sheet images are fully loaded before using this method.\n   * <br/><br/>\n   * For example:<br/>\n   * SpriteSheetUtils.addFlippedFrames(mySpriteSheet, true, true);\n   * The above would add frames that are flipped horizontally AND frames that are flipped vertically.\n   * <br/><br/>\n   * Note that you can also flip any display object by setting its scaleX or scaleY to a negative value. On some\n   * browsers (especially those without hardware accelerated canvas) this can result in slightly degraded performance,\n   * which is why addFlippedFrames is available.\n   * @method addFlippedFrames\n   * @static\n   * @param {SpriteSheet} spriteSheet\n   * @param {Boolean} horizontal If true, horizontally flipped frames will be added.\n   * @param {Boolean} vertical If true, vertically flipped frames will be added.\n   * @param {Boolean} both If true, frames that are flipped both horizontally and vertically will be added.\n   * @deprecated Modern browsers perform better when flipping via a transform (ex. scaleX=-1) rendering this obsolete.\n   **/\n\n\n  SpriteSheetUtils.addFlippedFrames = function (spriteSheet, horizontal, vertical, both) {\n    if (!horizontal && !vertical && !both) {\n      return;\n    }\n\n    var count = 0;\n\n    if (horizontal) {\n      SpriteSheetUtils._flip(spriteSheet, ++count, true, false);\n    }\n\n    if (vertical) {\n      SpriteSheetUtils._flip(spriteSheet, ++count, false, true);\n    }\n\n    if (both) {\n      SpriteSheetUtils._flip(spriteSheet, ++count, true, true);\n    }\n  };\n  /**\n   * Returns a single frame of the specified sprite sheet as a new PNG image. An example of when this may be useful is\n   * to use a spritesheet frame as the source for a bitmap fill.\n   *\n   * <strong>WARNING:</strong> In almost all cases it is better to display a single frame using a {{#crossLink \"Sprite\"}}{{/crossLink}}\n   * with a {{#crossLink \"Sprite/gotoAndStop\"}}{{/crossLink}} call than it is to slice out a frame using this\n   * method and display it with a Bitmap instance. You can also crop an image using the {{#crossLink \"Bitmap/sourceRect\"}}{{/crossLink}}\n   * property of {{#crossLink \"Bitmap\"}}{{/crossLink}}.\n   *\n   * The extractFrame method may cause cross-domain warnings since it accesses pixels directly on the canvas.\n   * @method extractFrame\n   * @static\n   * @param {SpriteSheet} spriteSheet The SpriteSheet instance to extract a frame from.\n   * @param {Number|String} frameOrAnimation The frame number or animation name to extract. If an animation\n   * name is specified, only the first frame of the animation will be extracted.\n   * @return {HTMLImageElement} a single frame of the specified sprite sheet as a new PNG image.\n  */\n\n\n  SpriteSheetUtils.extractFrame = function (spriteSheet, frameOrAnimation) {\n    if (isNaN(frameOrAnimation)) {\n      frameOrAnimation = spriteSheet.getAnimation(frameOrAnimation).frames[0];\n    }\n\n    var data = spriteSheet.getFrame(frameOrAnimation);\n\n    if (!data) {\n      return null;\n    }\n\n    var r = data.rect;\n    var canvas = SpriteSheetUtils._workingCanvas;\n    canvas.width = r.width;\n    canvas.height = r.height;\n\n    SpriteSheetUtils._workingContext.drawImage(data.image, r.x, r.y, r.width, r.height, 0, 0, r.width, r.height);\n\n    var img = document.createElement(\"img\");\n    img.src = canvas.toDataURL(\"image/png\");\n    return img;\n  };\n  /**\n   * Merges the rgb channels of one image with the alpha channel of another. This can be used to combine a compressed\n   * JPEG image containing color data with a PNG32 monochromatic image containing alpha data. With certain types of\n   * images (those with detail that lend itself to JPEG compression) this can provide significant file size savings\n   * versus a single RGBA PNG32. This method is very fast (generally on the order of 1-2 ms to run).\n   * @method mergeAlpha\n   * @static\n   * @param {HTMLImageElement} rbgImage The image (or canvas) containing the RGB channels to use.\n   * @param {HTMLImageElement} alphaImage The image (or canvas) containing the alpha channel to use.\n   * @param {HTMLCanvasElement} canvas Optional. If specified, this canvas will be used and returned. If not, a new canvas will be created.\n   * @return {HTMLCanvasElement} A canvas with the combined image data. This can be used as a source for Bitmap or SpriteSheet.\n   * @deprecated Tools such as ImageAlpha generally provide better results. This will be moved to sandbox in the future.\n  */\n\n\n  SpriteSheetUtils.mergeAlpha = function (rgbImage, alphaImage, canvas) {\n    if (!canvas) {\n      canvas = createjs.createCanvas ? createjs.createCanvas() : document.createElement(\"canvas\");\n    }\n\n    canvas.width = Math.max(alphaImage.width, rgbImage.width);\n    canvas.height = Math.max(alphaImage.height, rgbImage.height);\n    var ctx = canvas.getContext(\"2d\");\n    ctx.save();\n    ctx.drawImage(rgbImage, 0, 0);\n    ctx.globalCompositeOperation = \"destination-in\";\n    ctx.drawImage(alphaImage, 0, 0);\n    ctx.restore();\n    return canvas;\n  }; // private static methods:\n\n\n  SpriteSheetUtils._flip = function (spriteSheet, count, h, v) {\n    var imgs = spriteSheet._images;\n    var canvas = SpriteSheetUtils._workingCanvas;\n    var ctx = SpriteSheetUtils._workingContext;\n    var il = imgs.length / count;\n\n    for (var i = 0; i < il; i++) {\n      var src = imgs[i];\n      src.__tmp = i; // a bit hacky, but faster than doing indexOf below.\n\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\n      ctx.clearRect(0, 0, canvas.width + 1, canvas.height + 1);\n      canvas.width = src.width;\n      canvas.height = src.height;\n      ctx.setTransform(h ? -1 : 1, 0, 0, v ? -1 : 1, h ? src.width : 0, v ? src.height : 0);\n      ctx.drawImage(src, 0, 0);\n      var img = document.createElement(\"img\");\n      img.src = canvas.toDataURL(\"image/png\"); // work around a strange bug in Safari:\n\n      img.width = src.width;\n      img.height = src.height;\n      imgs.push(img);\n    }\n\n    var frames = spriteSheet._frames;\n    var fl = frames.length / count;\n\n    for (i = 0; i < fl; i++) {\n      src = frames[i];\n      var rect = src.rect.clone();\n      img = imgs[src.image.__tmp + il * count];\n      var frame = {\n        image: img,\n        rect: rect,\n        regX: src.regX,\n        regY: src.regY\n      };\n\n      if (h) {\n        rect.x = img.width - rect.x - rect.width; // update rect\n\n        frame.regX = rect.width - src.regX; // update registration point\n      }\n\n      if (v) {\n        rect.y = img.height - rect.y - rect.height; // update rect\n\n        frame.regY = rect.height - src.regY; // update registration point\n      }\n\n      frames.push(frame);\n    }\n\n    var sfx = \"_\" + (h ? \"h\" : \"\") + (v ? \"v\" : \"\");\n    var names = spriteSheet._animations;\n    var data = spriteSheet._data;\n    var al = names.length / count;\n\n    for (i = 0; i < al; i++) {\n      var name = names[i];\n      src = data[name];\n      var anim = {\n        name: name + sfx,\n        speed: src.speed,\n        next: src.next,\n        frames: []\n      };\n\n      if (src.next) {\n        anim.next += sfx;\n      }\n\n      frames = src.frames;\n\n      for (var j = 0, l = frames.length; j < l; j++) {\n        anim.frames.push(frames[j] + fl * count);\n      }\n\n      data[anim.name] = anim;\n      names.push(anim.name);\n    }\n  };\n\n  createjs.SpriteSheetUtils = SpriteSheetUtils;\n})(); //##############################################################################\n// SpriteSheetBuilder.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor:\n\n  /**\n   * The SpriteSheetBuilder allows you to generate {{#crossLink \"SpriteSheet\"}}{{/crossLink}} instances at run time\n   * from any display object. This can allow you to maintain your assets as vector graphics (for low file size), and\n   * render them at run time as SpriteSheets for better performance.\n   *\n   * SpriteSheets can be built either synchronously, or asynchronously, so that large SpriteSheets can be generated\n   * without locking the UI.\n   *\n   * Note that the \"images\" used in the generated SpriteSheet are actually canvas elements, and that they will be\n   * sized to the nearest power of 2 up to the value of {{#crossLink \"SpriteSheetBuilder/maxWidth:property\"}}{{/crossLink}}\n   * or {{#crossLink \"SpriteSheetBuilder/maxHeight:property\"}}{{/crossLink}}.\n   * @class SpriteSheetBuilder\n   * @param {Number} [framerate=0] The {{#crossLink \"SpriteSheet/framerate:property\"}}{{/crossLink}} of\n   * {{#crossLink \"SpriteSheet\"}}{{/crossLink}} instances that are created.\n   * @extends EventDispatcher\n   * @constructor\n   **/\n\n  function SpriteSheetBuilder(framerate) {\n    this.EventDispatcher_constructor(); // public properties:\n\n    /**\n     * The maximum width for the images (not individual frames) in the generated SpriteSheet. It is recommended to\n     * use a power of 2 for this value (ex. 1024, 2048, 4096). If the frames cannot all fit within the max\n     * dimensions, then additional images will be created as needed.\n     * @property maxWidth\n     * @type Number\n     * @default 2048\n    */\n\n    this.maxWidth = 2048;\n    /**\n     * The maximum height for the images (not individual frames) in the generated SpriteSheet. It is recommended to\n     * use a power of 2 for this value (ex. 1024, 2048, 4096). If the frames cannot all fit within the max\n     * dimensions, then additional images will be created as needed.\n     * @property maxHeight\n     * @type Number\n     * @default 2048\n     **/\n\n    this.maxHeight = 2048;\n    /**\n     * The SpriteSheet that was generated. This will be null before a build is completed successfully.\n     * @property spriteSheet\n     * @type SpriteSheet\n     **/\n\n    this.spriteSheet = null;\n    /**\n     * The scale to apply when drawing all frames to the SpriteSheet. This is multiplied against any scale specified\n     * in the addFrame call. This can be used, for example, to generate a SpriteSheet at run time that is tailored\n     * to the a specific device resolution (ex. tablet vs mobile).\n     * @property scale\n     * @type Number\n     * @default 1\n     **/\n\n    this.scale = 1;\n    /**\n    * The padding to use between frames. This is helpful to preserve antialiasing on drawn vector content.\n    * @property padding\n    * @type Number\n    * @default 1\n    **/\n\n    this.padding = 1;\n    /**\n     * A number from 0.01 to 0.99 that indicates what percentage of time the builder can use. This can be\n     * thought of as the number of seconds per second the builder will use. For example, with a timeSlice value of 0.3,\n     * the builder will run 20 times per second, using approximately 15ms per build (30% of available time, or 0.3s per second).\n     * Defaults to 0.3.\n     * @property timeSlice\n     * @type Number\n     * @default 0.3\n     **/\n\n    this.timeSlice = 0.3;\n    /**\n     * A value between 0 and 1 that indicates the progress of a build, or -1 if a build has not\n     * been initiated.\n     * @property progress\n     * @type Number\n     * @default -1\n     * @readonly\n     */\n\n    this.progress = -1;\n    /**\n     * A {{#crossLink \"SpriteSheet/framerate:property\"}}{{/crossLink}} value that will be passed to new {{#crossLink \"SpriteSheet\"}}{{/crossLink}} instances that are\n     * created. If no framerate is specified (or it is 0), then SpriteSheets will use the {{#crossLink \"Ticker\"}}{{/crossLink}}\n     * framerate.\n     * @property framerate\n     * @type Number\n     * @default 0\n     */\n\n    this.framerate = framerate || 0; // private properties:\n\n    /**\n     * @property _frames\n     * @protected\n     * @type Array\n     **/\n\n    this._frames = [];\n    /**\n     * @property _animations\n     * @protected\n     * @type Array\n     **/\n\n    this._animations = {};\n    /**\n     * @property _data\n     * @protected\n     * @type Array\n     **/\n\n    this._data = null;\n    /**\n     * @property _nextFrameIndex\n     * @protected\n     * @type Number\n     **/\n\n    this._nextFrameIndex = 0;\n    /**\n     * @property _index\n     * @protected\n     * @type Number\n     **/\n\n    this._index = 0;\n    /**\n     * @property _timerID\n     * @protected\n     * @type Number\n     **/\n\n    this._timerID = null;\n    /**\n     * @property _scale\n     * @protected\n     * @type Number\n     **/\n\n    this._scale = 1;\n  }\n\n  var p = createjs.extend(SpriteSheetBuilder, createjs.EventDispatcher);\n  /**\n   * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n   * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n   * for details.\n   *\n   * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n   *\n   * @method initialize\n   * @protected\n   * @deprecated\n   */\n  // p.initialize = function() {}; // searchable for devs wondering where it is.\n  // constants:\n\n  SpriteSheetBuilder.ERR_DIMENSIONS = \"frame dimensions exceed max spritesheet dimensions\";\n  SpriteSheetBuilder.ERR_RUNNING = \"a build is already running\"; // events:\n\n  /**\n   * Dispatched when a build completes.\n   * @event complete\n   * @param {Object} target The object that dispatched the event.\n   * @param {String} type The event type.\n   * @since 0.6.0\n   */\n\n  /**\n   * Dispatched when an asynchronous build has progress.\n   * @event progress\n   * @param {Object} target The object that dispatched the event.\n   * @param {String} type The event type.\n   * @param {Number} progress The current progress value (0-1).\n   * @since 0.6.0\n   */\n  // public methods:\n\n  /**\n   * Adds a frame to the {{#crossLink \"SpriteSheet\"}}{{/crossLink}}. Note that the frame will not be drawn until you\n   * call {{#crossLink \"SpriteSheetBuilder/build\"}}{{/crossLink}} method. The optional setup params allow you to have\n   * a function run immediately before the draw occurs. For example, this allows you to add a single source multiple\n   * times, but manipulate it or its children to change it to generate different frames.\n   *\n   * Note that the source's transformations (x, y, scale, rotate, alpha) will be ignored, except for regX/Y. To apply\n   * transforms to a source object and have them captured in the SpriteSheet, simply place it into a {{#crossLink \"Container\"}}{{/crossLink}}\n   * and pass in the Container as the source.\n   * @method addFrame\n   * @param {DisplayObject} source The source {{#crossLink \"DisplayObject\"}}{{/crossLink}}  to draw as the frame.\n   * @param {Rectangle} [sourceRect] A {{#crossLink \"Rectangle\"}}{{/crossLink}} defining the portion of the\n   * source to draw to the frame. If not specified, it will look for a `getBounds` method, bounds property, or\n   * `nominalBounds` property on the source to use. If one is not found, the frame will be skipped.\n   * @param {Number} [scale=1] Optional. The scale to draw this frame at. Default is 1.\n   * @param {Function} [setupFunction] A function to call immediately before drawing this frame. It will be called with two parameters: the source, and setupData.\n   * @param {Object} [setupData] Arbitrary setup data to pass to setupFunction as the second parameter.\n   * @return {Number} The index of the frame that was just added, or null if a sourceRect could not be determined.\n   **/\n\n  p.addFrame = function (source, sourceRect, scale, setupFunction, setupData) {\n    if (this._data) {\n      throw SpriteSheetBuilder.ERR_RUNNING;\n    }\n\n    var rect = sourceRect || source.bounds || source.nominalBounds;\n\n    if (!rect && source.getBounds) {\n      rect = source.getBounds();\n    }\n\n    if (!rect) {\n      return null;\n    }\n\n    scale = scale || 1;\n    return this._frames.push({\n      source: source,\n      sourceRect: rect,\n      scale: scale,\n      funct: setupFunction,\n      data: setupData,\n      index: this._frames.length,\n      height: rect.height * scale\n    }) - 1;\n  };\n  /**\n   * Adds an animation that will be included in the created {{#crossLink \"SpriteSheet\"}}{{/crossLink}}.\n   * @method addAnimation\n   * @param {String} name The name for the animation.\n   * @param {Array} frames An array of frame indexes that comprise the animation. Ex. [3,6,5] would describe an animation\n   * that played frame indexes 3, 6, and 5 in that order.\n   * @param {String} [next] Specifies the name of the animation to continue to after this animation ends. You can\n   * also pass false to have the animation stop when it ends. By default it will loop to the start of the same animation.\n   * @param {Number} [speed] Specifies a frame advance speed for this animation. For example, a value of 0.5 would\n   * cause the animation to advance every second tick. Note that earlier versions used `frequency` instead, which had\n   * the opposite effect.\n   **/\n\n\n  p.addAnimation = function (name, frames, next, speed) {\n    if (this._data) {\n      throw SpriteSheetBuilder.ERR_RUNNING;\n    }\n\n    this._animations[name] = {\n      frames: frames,\n      next: next,\n      speed: speed\n    };\n  };\n  /**\n   * This will take a {{#crossLink \"MovieClip\"}}{{/crossLink}} instance, and add its frames and labels to this\n   * builder. Labels will be added as an animation running from the label index to the next label. For example, if\n   * there is a label named \"foo\" at frame 0 and a label named \"bar\" at frame 10, in a MovieClip with 15 frames, it\n   * will add an animation named \"foo\" that runs from frame index 0 to 9, and an animation named \"bar\" that runs from\n   * frame index 10 to 14.\n   *\n   * Note that this will iterate through the full MovieClip with {{#crossLink \"MovieClip/actionsEnabled:property\"}}{{/crossLink}}\n   * set to `false`, ending on the last frame.\n   * @method addMovieClip\n   * @param {MovieClip} source The source MovieClip instance to add to the SpriteSheet.\n   * @param {Rectangle} [sourceRect] A {{#crossLink \"Rectangle\"}}{{/crossLink}} defining the portion of the source to\n   * draw to the frame. If not specified, it will look for a {{#crossLink \"DisplayObject/getBounds\"}}{{/crossLink}}\n   * method, `frameBounds` Array, `bounds` property, or `nominalBounds` property on the source to use. If one is not\n   * found, the MovieClip will be skipped.\n   * @param {Number} [scale=1] The scale to draw the movie clip at.\n   * @param {Function} [setupFunction] A function to call immediately before drawing each frame. It will be called\n   * with three parameters: the source, setupData, and the frame index.\n   * @param {Object} [setupData] Arbitrary setup data to pass to setupFunction as the second parameter.\n   * @param {Function} [labelFunction] This method will be called for each MovieClip label that is added with four\n   * parameters: the label name, the source MovieClip instance, the starting frame index (in the movieclip timeline)\n   * and the end index. It must return a new name for the label/animation, or `false` to exclude the label.\n   **/\n\n\n  p.addMovieClip = function (source, sourceRect, scale, setupFunction, setupData, labelFunction) {\n    if (this._data) {\n      throw SpriteSheetBuilder.ERR_RUNNING;\n    }\n\n    var rects = source.frameBounds;\n    var rect = sourceRect || source.bounds || source.nominalBounds;\n\n    if (!rect && source.getBounds) {\n      rect = source.getBounds();\n    }\n\n    if (!rect && !rects) {\n      return;\n    }\n\n    var i,\n        l,\n        baseFrameIndex = this._frames.length;\n    var duration = source.timeline.duration;\n\n    for (i = 0; i < duration; i++) {\n      var r = rects && rects[i] ? rects[i] : rect;\n      this.addFrame(source, r, scale, this._setupMovieClipFrame, {\n        i: i,\n        f: setupFunction,\n        d: setupData\n      });\n    }\n\n    var labels = source.timeline._labels;\n    var lbls = [];\n\n    for (var n in labels) {\n      lbls.push({\n        index: labels[n],\n        label: n\n      });\n    }\n\n    if (lbls.length) {\n      lbls.sort(function (a, b) {\n        return a.index - b.index;\n      });\n\n      for (i = 0, l = lbls.length; i < l; i++) {\n        var label = lbls[i].label;\n        var start = baseFrameIndex + lbls[i].index;\n        var end = baseFrameIndex + (i == l - 1 ? duration : lbls[i + 1].index);\n        var frames = [];\n\n        for (var j = start; j < end; j++) {\n          frames.push(j);\n        }\n\n        if (labelFunction) {\n          label = labelFunction(label, source, start, end);\n\n          if (!label) {\n            continue;\n          }\n        }\n\n        this.addAnimation(label, frames, true); // for now, this loops all animations.\n      }\n    }\n  };\n  /**\n   * Builds a {{#crossLink \"SpriteSheet\"}}{{/crossLink}} instance based on the current frames.\n   * @method build\n   * @return {SpriteSheet} The created SpriteSheet instance, or null if a build is already running or an error\n   * occurred.\n   **/\n\n\n  p.build = function () {\n    if (this._data) {\n      throw SpriteSheetBuilder.ERR_RUNNING;\n    }\n\n    this._startBuild();\n\n    while (this._drawNext()) {}\n\n    this._endBuild();\n\n    return this.spriteSheet;\n  };\n  /**\n   * Asynchronously builds a {{#crossLink \"SpriteSheet\"}}{{/crossLink}} instance based on the current frames. It will\n   * run 20 times per second, using an amount of time defined by `timeSlice`. When it is complete it will call the\n   * specified callback.\n   * @method buildAsync\n   * @param {Number} [timeSlice] Sets the timeSlice property on this instance.\n   **/\n\n\n  p.buildAsync = function (timeSlice) {\n    if (this._data) {\n      throw SpriteSheetBuilder.ERR_RUNNING;\n    }\n\n    this.timeSlice = timeSlice;\n\n    this._startBuild();\n\n    var _this = this;\n\n    this._timerID = setTimeout(function () {\n      _this._run();\n    }, 50 - Math.max(0.01, Math.min(0.99, this.timeSlice || 0.3)) * 50);\n  };\n  /**\n   * Stops the current asynchronous build.\n   * @method stopAsync\n   **/\n\n\n  p.stopAsync = function () {\n    clearTimeout(this._timerID);\n    this._data = null;\n  };\n  /**\n   * SpriteSheetBuilder instances cannot be cloned.\n   * @method clone\n   **/\n\n\n  p.clone = function () {\n    throw \"SpriteSheetBuilder cannot be cloned.\";\n  };\n  /**\n   * Returns a string representation of this object.\n   * @method toString\n   * @return {String} a string representation of the instance.\n   **/\n\n\n  p.toString = function () {\n    return \"[SpriteSheetBuilder]\";\n  }; // private methods:\n\n  /**\n   * @method _startBuild\n   * @protected\n   **/\n\n\n  p._startBuild = function () {\n    var pad = this.padding || 0;\n    this.progress = 0;\n    this.spriteSheet = null;\n    this._index = 0;\n    this._scale = this.scale;\n    var dataFrames = [];\n    this._data = {\n      images: [],\n      frames: dataFrames,\n      framerate: this.framerate,\n      animations: this._animations // TODO: should we \"clone\" _animations in case someone adds more animations after a build?\n\n    };\n\n    var frames = this._frames.slice();\n\n    frames.sort(function (a, b) {\n      return a.height <= b.height ? -1 : 1;\n    });\n\n    if (frames[frames.length - 1].height + pad * 2 > this.maxHeight) {\n      throw SpriteSheetBuilder.ERR_DIMENSIONS;\n    }\n\n    var y = 0,\n        x = 0;\n    var img = 0;\n\n    while (frames.length) {\n      var o = this._fillRow(frames, y, img, dataFrames, pad);\n\n      if (o.w > x) {\n        x = o.w;\n      }\n\n      y += o.h;\n\n      if (!o.h || !frames.length) {\n        var canvas = createjs.createCanvas ? createjs.createCanvas() : document.createElement(\"canvas\");\n        canvas.width = this._getSize(x, this.maxWidth);\n        canvas.height = this._getSize(y, this.maxHeight);\n        this._data.images[img] = canvas;\n\n        if (!o.h) {\n          x = y = 0;\n          img++;\n        }\n      }\n    }\n  };\n  /**\n   * @method _setupMovieClipFrame\n   * @protected\n   * @return {Number} The width & height of the row.\n   **/\n\n\n  p._setupMovieClipFrame = function (source, data) {\n    var ae = source.actionsEnabled;\n    source.actionsEnabled = false;\n    source.gotoAndStop(data.i);\n    source.actionsEnabled = ae;\n    data.f && data.f(source, data.d, data.i);\n  };\n  /**\n   * @method _getSize\n   * @protected\n   * @return {Number} The width & height of the row.\n   **/\n\n\n  p._getSize = function (size, max) {\n    var pow = 4;\n\n    while (Math.pow(2, ++pow) < size) {}\n\n    return Math.min(max, Math.pow(2, pow));\n  };\n  /**\n   * @method _fillRow\n   * @param {Array} frames\n   * @param {Number} y\n   * @param {HTMLImageElement} img\n   * @param {Object} dataFrames\n   * @param {Number} pad\n   * @protected\n   * @return {Number} The width & height of the row.\n   **/\n\n\n  p._fillRow = function (frames, y, img, dataFrames, pad) {\n    var w = this.maxWidth;\n    var maxH = this.maxHeight;\n    y += pad;\n    var h = maxH - y;\n    var x = pad;\n    var height = 0;\n\n    for (var i = frames.length - 1; i >= 0; i--) {\n      var frame = frames[i];\n      var sc = this._scale * frame.scale;\n      var rect = frame.sourceRect;\n      var source = frame.source;\n      var rx = Math.floor(sc * rect.x - pad);\n      var ry = Math.floor(sc * rect.y - pad);\n      var rh = Math.ceil(sc * rect.height + pad * 2);\n      var rw = Math.ceil(sc * rect.width + pad * 2);\n\n      if (rw > w) {\n        throw SpriteSheetBuilder.ERR_DIMENSIONS;\n      }\n\n      if (rh > h || x + rw > w) {\n        continue;\n      }\n\n      frame.img = img;\n      frame.rect = new createjs.Rectangle(x, y, rw, rh);\n      height = height || rh;\n      frames.splice(i, 1);\n      dataFrames[frame.index] = [x, y, rw, rh, img, Math.round(-rx + sc * source.regX - pad), Math.round(-ry + sc * source.regY - pad)];\n      x += rw;\n    }\n\n    return {\n      w: x,\n      h: height\n    };\n  };\n  /**\n   * @method _endBuild\n   * @protected\n   **/\n\n\n  p._endBuild = function () {\n    this.spriteSheet = new createjs.SpriteSheet(this._data);\n    this._data = null;\n    this.progress = 1;\n    this.dispatchEvent(\"complete\");\n  };\n  /**\n   * @method _run\n   * @protected\n   **/\n\n\n  p._run = function () {\n    var ts = Math.max(0.01, Math.min(0.99, this.timeSlice || 0.3)) * 50;\n    var t = new Date().getTime() + ts;\n    var complete = false;\n\n    while (t > new Date().getTime()) {\n      if (!this._drawNext()) {\n        complete = true;\n        break;\n      }\n    }\n\n    if (complete) {\n      this._endBuild();\n    } else {\n      var _this = this;\n\n      this._timerID = setTimeout(function () {\n        _this._run();\n      }, 50 - ts);\n    }\n\n    var p = this.progress = this._index / this._frames.length;\n\n    if (this.hasEventListener(\"progress\")) {\n      var evt = new createjs.Event(\"progress\");\n      evt.progress = p;\n      this.dispatchEvent(evt);\n    }\n  };\n  /**\n   * @method _drawNext\n   * @protected\n   * @return Boolean Returns false if this is the last draw.\n   **/\n\n\n  p._drawNext = function () {\n    var frame = this._frames[this._index];\n    var sc = frame.scale * this._scale;\n    var rect = frame.rect;\n    var sourceRect = frame.sourceRect;\n    var canvas = this._data.images[frame.img];\n    var ctx = canvas.getContext(\"2d\");\n    frame.funct && frame.funct(frame.source, frame.data);\n    ctx.save();\n    ctx.beginPath();\n    ctx.rect(rect.x, rect.y, rect.width, rect.height);\n    ctx.clip();\n    ctx.translate(Math.ceil(rect.x - sourceRect.x * sc), Math.ceil(rect.y - sourceRect.y * sc));\n    ctx.scale(sc, sc);\n    frame.source.draw(ctx); // display object will draw itself.\n\n    ctx.restore();\n    return ++this._index < this._frames.length;\n  };\n\n  createjs.SpriteSheetBuilder = createjs.promote(SpriteSheetBuilder, \"EventDispatcher\");\n})(); //##############################################################################\n// DOMElement.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor:\n\n  /**\n   * <b>This class is still experimental, and more advanced use is likely to be buggy. Please report bugs.</b>\n   *\n   * A DOMElement allows you to associate a HTMLElement with the display list. It will be transformed\n   * within the DOM as though it is child of the {{#crossLink \"Container\"}}{{/crossLink}} it is added to. However, it is\n   * not rendered to canvas, and as such will retain whatever z-index it has relative to the canvas (ie. it will be\n   * drawn in front of or behind the canvas).\n   *\n   * The position of a DOMElement is relative to their parent node in the DOM. It is recommended that\n   * the DOM Object be added to a div that also contains the canvas so that they share the same position\n   * on the page.\n   *\n   * DOMElement is useful for positioning HTML elements over top of canvas content, and for elements\n   * that you want to display outside the bounds of the canvas. For example, a tooltip with rich HTML\n   * content.\n   *\n   * <h4>Mouse Interaction</h4>\n   *\n   * DOMElement instances are not full EaselJS display objects, and do not participate in EaselJS mouse\n   * events or support methods like hitTest. To get mouse events from a DOMElement, you must instead add handlers to\n   * the htmlElement (note, this does not support EventDispatcher)\n   *\n   *      var domElement = new createjs.DOMElement(htmlElement);\n   *      domElement.htmlElement.onclick = function() {\n   *          console.log(\"clicked\");\n   *      }\n   *\n   * @class DOMElement\n   * @extends DisplayObject\n   * @constructor\n   * @param {HTMLElement} htmlElement A reference or id for the DOM element to manage.\n   */\n\n  function DOMElement(htmlElement) {\n    this.DisplayObject_constructor();\n\n    if (typeof htmlElement == \"string\") {\n      htmlElement = document.getElementById(htmlElement);\n    }\n\n    this.mouseEnabled = false;\n    var style = htmlElement.style;\n    style.position = \"absolute\";\n    style.transformOrigin = style.WebkitTransformOrigin = style.msTransformOrigin = style.MozTransformOrigin = style.OTransformOrigin = \"0% 0%\"; // public properties:\n\n    /**\n     * The DOM object to manage.\n     * @property htmlElement\n     * @type HTMLElement\n     */\n\n    this.htmlElement = htmlElement; // private properties:\n\n    /**\n     * @property _oldMtx\n     * @type Matrix2D\n     * @protected\n     */\n\n    this._oldProps = null;\n  }\n\n  var p = createjs.extend(DOMElement, createjs.DisplayObject); // TODO: deprecated\n  // p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n  // public methods:\n\n  /**\n   * Returns true or false indicating whether the display object would be visible if drawn to a canvas.\n   * This does not account for whether it would be visible within the boundaries of the stage.\n   * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n   * @method isVisible\n   * @return {Boolean} Boolean indicating whether the display object would be visible if drawn to a canvas\n   */\n\n  p.isVisible = function () {\n    return this.htmlElement != null;\n  };\n  /**\n   * Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.\n   * Returns true if the draw was handled (useful for overriding functionality).\n   * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n   * @method draw\n   * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n   * @param {Boolean} ignoreCache Indicates whether the draw operation should ignore any current cache.\n   * For example, used for drawing the cache (to prevent it from simply drawing an existing cache back\n   * into itself).\n   * @return {Boolean}\n   */\n\n\n  p.draw = function (ctx, ignoreCache) {\n    // this relies on the _tick method because draw isn't called if the parent is not visible.\n    // the actual update happens in _handleDrawEnd\n    return true;\n  };\n  /**\n   * Not applicable to DOMElement.\n   * @method cache\n   */\n\n\n  p.cache = function () {};\n  /**\n   * Not applicable to DOMElement.\n   * @method uncache\n   */\n\n\n  p.uncache = function () {};\n  /**\n   * Not applicable to DOMElement.\n   * @method updateCache\n   */\n\n\n  p.updateCache = function () {};\n  /**\n   * Not applicable to DOMElement.\n   * @method hitTest\n   */\n\n\n  p.hitTest = function () {};\n  /**\n   * Not applicable to DOMElement.\n   * @method localToGlobal\n   */\n\n\n  p.localToGlobal = function () {};\n  /**\n   * Not applicable to DOMElement.\n   * @method globalToLocal\n   */\n\n\n  p.globalToLocal = function () {};\n  /**\n   * Not applicable to DOMElement.\n   * @method localToLocal\n   */\n\n\n  p.localToLocal = function () {};\n  /**\n   * DOMElement cannot be cloned. Throws an error.\n   * @method clone\n   */\n\n\n  p.clone = function () {\n    throw \"DOMElement cannot be cloned.\";\n  };\n  /**\n   * Returns a string representation of this object.\n   * @method toString\n   * @return {String} a string representation of the instance.\n   */\n\n\n  p.toString = function () {\n    return \"[DOMElement (name=\" + this.name + \")]\";\n  };\n  /**\n      * Interaction events should be added to `htmlElement`, and not the DOMElement instance, since DOMElement instances\n   * are not full EaselJS display objects and do not participate in EaselJS mouse events.\n   * @event click\n   */\n\n  /**\n  * Interaction events should be added to `htmlElement`, and not the DOMElement instance, since DOMElement instances\n  * are not full EaselJS display objects and do not participate in EaselJS mouse events.\n  * @event dblClick\n  */\n\n  /**\n   * Interaction events should be added to `htmlElement`, and not the DOMElement instance, since DOMElement instances\n  * are not full EaselJS display objects and do not participate in EaselJS mouse events.\n  * @event mousedown\n  */\n\n  /**\n   * The HTMLElement can listen for the mouseover event, not the DOMElement instance.\n   * Since DOMElement instances are not full EaselJS display objects and do not participate in EaselJS mouse events.\n   * @event mouseover\n  */\n\n  /**\n   * Not applicable to DOMElement.\n  * @event tick\n  */\n  // private methods:\n\n  /**\n   * @method _tick\n   * @param {Object} evtObj An event object that will be dispatched to all tick listeners. This object is reused between dispatchers to reduce construction & GC costs.\n   * function.\n   * @protected\n   */\n\n\n  p._tick = function (evtObj) {\n    var stage = this.getStage();\n    stage && stage.on(\"drawend\", this._handleDrawEnd, this, true);\n    this.DisplayObject__tick(evtObj);\n  };\n  /**\n   * @method _handleDrawEnd\n   * @param {Event} evt\n   * @protected\n   */\n\n\n  p._handleDrawEnd = function (evt) {\n    var o = this.htmlElement;\n\n    if (!o) {\n      return;\n    }\n\n    var style = o.style;\n    var props = this.getConcatenatedDisplayProps(this._props),\n        mtx = props.matrix;\n    var visibility = props.visible ? \"visible\" : \"hidden\";\n\n    if (visibility != style.visibility) {\n      style.visibility = visibility;\n    }\n\n    if (!props.visible) {\n      return;\n    }\n\n    var oldProps = this._oldProps,\n        oldMtx = oldProps && oldProps.matrix;\n    var n = 10000; // precision\n\n    if (!oldMtx || !oldMtx.equals(mtx)) {\n      var str = \"matrix(\" + (mtx.a * n | 0) / n + \",\" + (mtx.b * n | 0) / n + \",\" + (mtx.c * n | 0) / n + \",\" + (mtx.d * n | 0) / n + \",\" + (mtx.tx + 0.5 | 0);\n      style.transform = style.WebkitTransform = style.OTransform = style.msTransform = str + \",\" + (mtx.ty + 0.5 | 0) + \")\";\n      style.MozTransform = str + \"px,\" + (mtx.ty + 0.5 | 0) + \"px)\";\n\n      if (!oldProps) {\n        oldProps = this._oldProps = new createjs.DisplayProps(true, NaN);\n      }\n\n      oldProps.matrix.copy(mtx);\n    }\n\n    if (oldProps.alpha != props.alpha) {\n      style.opacity = \"\" + (props.alpha * n | 0) / n;\n      oldProps.alpha = props.alpha;\n    }\n  };\n\n  createjs.DOMElement = createjs.promote(DOMElement, \"DisplayObject\");\n})(); //##############################################################################\n// Filter.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor:\n\n  /**\n   * Base class that all filters should inherit from. Filters need to be applied to objects that have been cached using\n   * the {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}} method. If an object changes, please cache it again, or use\n   * {{#crossLink \"DisplayObject/updateCache\"}}{{/crossLink}}. Note that the filters must be applied before caching.\n   *\n   * <h4>Example</h4>\n   *\n   *      myInstance.filters = [\n   *          new createjs.ColorFilter(0, 0, 0, 1, 255, 0, 0),\n   *          new createjs.BlurFilter(5, 5, 10)\n   *      ];\n   *      myInstance.cache(0,0, 100, 100);\n   *\n   * Note that each filter can implement a {{#crossLink \"Filter/getBounds\"}}{{/crossLink}} method, which returns the\n   * margins that need to be applied in order to fully display the filter. For example, the {{#crossLink \"BlurFilter\"}}{{/crossLink}}\n   * will cause an object to feather outwards, resulting in a margin around the shape.\n   *\n   * <h4>EaselJS Filters</h4>\n   * EaselJS comes with a number of pre-built filters:\n   * <ul><li>{{#crossLink \"AlphaMapFilter\"}}{{/crossLink}} : Map a greyscale image to the alpha channel of a display object</li>\n   *      <li>{{#crossLink \"AlphaMaskFilter\"}}{{/crossLink}}: Map an image's alpha channel to the alpha channel of a display object</li>\n   *      <li>{{#crossLink \"BlurFilter\"}}{{/crossLink}}: Apply vertical and horizontal blur to a display object</li>\n   *      <li>{{#crossLink \"ColorFilter\"}}{{/crossLink}}: Color transform a display object</li>\n   *      <li>{{#crossLink \"ColorMatrixFilter\"}}{{/crossLink}}: Transform an image using a {{#crossLink \"ColorMatrix\"}}{{/crossLink}}</li>\n   * </ul>\n   *\n   * @class Filter\n   * @constructor\n   **/\n\n  function Filter() {}\n\n  var p = Filter.prototype;\n  /**\n   * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n   * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n   * for details.\n   *\n   * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n   *\n   * @method initialize\n   * @protected\n   * @deprecated\n   */\n  // p.initialize = function() {}; // searchable for devs wondering where it is.\n  // public methods:\n\n  /**\n   * Provides padding values for this filter. That is, how much the filter will extend the visual bounds of an object it is applied to.\n   * @method getBounds\n   * @param {Rectangle} [rect] If specified, the provided Rectangle instance will be expanded by the padding amounts and returned.\n   * @return {Rectangle} If a `rect` param was provided, it is returned. If not, either a new rectangle with the padding values, or null if no padding is required for this filter.\n   **/\n\n  p.getBounds = function (rect) {\n    return rect;\n  };\n  /**\n   * Applies the filter to the specified context.\n   * @method applyFilter\n   * @param {CanvasRenderingContext2D} ctx The 2D context to use as the source.\n   * @param {Number} x The x position to use for the source rect.\n   * @param {Number} y The y position to use for the source rect.\n   * @param {Number} width The width to use for the source rect.\n   * @param {Number} height The height to use for the source rect.\n   * @param {CanvasRenderingContext2D} [targetCtx] The 2D context to draw the result to. Defaults to the context passed to ctx.\n   * @param {Number} [targetX] The x position to draw the result to. Defaults to the value passed to x.\n   * @param {Number} [targetY] The y position to draw the result to. Defaults to the value passed to y.\n   * @return {Boolean} If the filter was applied successfully.\n   **/\n\n\n  p.applyFilter = function (ctx, x, y, width, height, targetCtx, targetX, targetY) {\n    // this is the default behaviour because most filters access pixel data. It is overridden when not needed.\n    targetCtx = targetCtx || ctx;\n\n    if (targetX == null) {\n      targetX = x;\n    }\n\n    if (targetY == null) {\n      targetY = y;\n    }\n\n    try {\n      var imageData = ctx.getImageData(x, y, width, height);\n    } catch (e) {\n      return false;\n    }\n\n    if (this._applyFilter(imageData)) {\n      targetCtx.putImageData(imageData, targetX, targetY);\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * Returns a string representation of this object.\n   * @method toString\n   * @return {String} a string representation of the instance.\n   **/\n\n\n  p.toString = function () {\n    return \"[Filter]\";\n  };\n  /**\n   * Returns a clone of this Filter instance.\n   * @method clone\n   * @return {Filter} A clone of the current Filter instance.\n   **/\n\n\n  p.clone = function () {\n    return new Filter();\n  }; // private methods:\n\n  /**\n   * @method _applyFilter\n   * @param {ImageData} imageData Target ImageData instance.\n   * @return {Boolean}\n   **/\n\n\n  p._applyFilter = function (imageData) {\n    return true;\n  };\n\n  createjs.Filter = Filter;\n})(); //##############################################################################\n// BlurFilter.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor:\n\n  /**\n   * Applies a box blur to DisplayObjects. Note that this filter is fairly CPU intensive, particularly if the quality is\n   * set higher than 1.\n   *\n   * <h4>Example</h4>\n   * This example creates a red circle, and then applies a 5 pixel blur to it. It uses the {{#crossLink \"Filter/getBounds\"}}{{/crossLink}}\n   * method to account for the spread that the blur causes.\n   *\n   *      var shape = new createjs.Shape().set({x:100,y:100});\n   *      shape.graphics.beginFill(\"#ff0000\").drawCircle(0,0,50);\n   *\n   *      var blurFilter = new createjs.BlurFilter(5, 5, 1);\n   *      shape.filters = [blurFilter];\n   *      var bounds = blurFilter.getBounds();\n   *\n   *      shape.cache(-50+bounds.x, -50+bounds.y, 100+bounds.width, 100+bounds.height);\n   *\n   * See {{#crossLink \"Filter\"}}{{/crossLink}} for an more information on applying filters.\n   * @class BlurFilter\n   * @extends Filter\n   * @constructor\n   * @param {Number} [blurX=0] The horizontal blur radius in pixels.\n   * @param {Number} [blurY=0] The vertical blur radius in pixels.\n   * @param {Number} [quality=1] The number of blur iterations.\n   **/\n\n  function BlurFilter(blurX, blurY, quality) {\n    if (isNaN(blurX) || blurX < 0) blurX = 0;\n    if (isNaN(blurY) || blurY < 0) blurY = 0;\n    if (isNaN(quality) || quality < 1) quality = 1; // public properties:\n\n    /**\n     * Horizontal blur radius in pixels\n     * @property blurX\n     * @default 0\n     * @type Number\n     **/\n\n    this.blurX = blurX | 0;\n    /**\n     * Vertical blur radius in pixels\n     * @property blurY\n     * @default 0\n     * @type Number\n     **/\n\n    this.blurY = blurY | 0;\n    /**\n     * Number of blur iterations. For example, a value of 1 will produce a rough blur. A value of 2 will produce a\n     * smoother blur, but take twice as long to run.\n     * @property quality\n     * @default 1\n     * @type Number\n     **/\n\n    this.quality = quality | 0;\n  }\n\n  var p = createjs.extend(BlurFilter, createjs.Filter); // TODO: deprecated\n  // p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n  // constants:\n\n  /**\n   * Array of multiply values for blur calculations.\n   * @property MUL_TABLE\n   * @type Array\n   * @protected\n   * @static\n   **/\n\n  BlurFilter.MUL_TABLE = [1, 171, 205, 293, 57, 373, 79, 137, 241, 27, 391, 357, 41, 19, 283, 265, 497, 469, 443, 421, 25, 191, 365, 349, 335, 161, 155, 149, 9, 278, 269, 261, 505, 245, 475, 231, 449, 437, 213, 415, 405, 395, 193, 377, 369, 361, 353, 345, 169, 331, 325, 319, 313, 307, 301, 37, 145, 285, 281, 69, 271, 267, 263, 259, 509, 501, 493, 243, 479, 118, 465, 459, 113, 446, 55, 435, 429, 423, 209, 413, 51, 403, 199, 393, 97, 3, 379, 375, 371, 367, 363, 359, 355, 351, 347, 43, 85, 337, 333, 165, 327, 323, 5, 317, 157, 311, 77, 305, 303, 75, 297, 294, 73, 289, 287, 71, 141, 279, 277, 275, 68, 135, 67, 133, 33, 262, 260, 129, 511, 507, 503, 499, 495, 491, 61, 121, 481, 477, 237, 235, 467, 232, 115, 457, 227, 451, 7, 445, 221, 439, 218, 433, 215, 427, 425, 211, 419, 417, 207, 411, 409, 203, 202, 401, 399, 396, 197, 49, 389, 387, 385, 383, 95, 189, 47, 187, 93, 185, 23, 183, 91, 181, 45, 179, 89, 177, 11, 175, 87, 173, 345, 343, 341, 339, 337, 21, 167, 83, 331, 329, 327, 163, 81, 323, 321, 319, 159, 79, 315, 313, 39, 155, 309, 307, 153, 305, 303, 151, 75, 299, 149, 37, 295, 147, 73, 291, 145, 289, 287, 143, 285, 71, 141, 281, 35, 279, 139, 69, 275, 137, 273, 17, 271, 135, 269, 267, 133, 265, 33, 263, 131, 261, 130, 259, 129, 257, 1];\n  /**\n   * Array of shift values for blur calculations.\n   * @property SHG_TABLE\n   * @type Array\n   * @protected\n   * @static\n   **/\n\n  BlurFilter.SHG_TABLE = [0, 9, 10, 11, 9, 12, 10, 11, 12, 9, 13, 13, 10, 9, 13, 13, 14, 14, 14, 14, 10, 13, 14, 14, 14, 13, 13, 13, 9, 14, 14, 14, 15, 14, 15, 14, 15, 15, 14, 15, 15, 15, 14, 15, 15, 15, 15, 15, 14, 15, 15, 15, 15, 15, 15, 12, 14, 15, 15, 13, 15, 15, 15, 15, 16, 16, 16, 15, 16, 14, 16, 16, 14, 16, 13, 16, 16, 16, 15, 16, 13, 16, 15, 16, 14, 9, 16, 16, 16, 16, 16, 16, 16, 16, 16, 13, 14, 16, 16, 15, 16, 16, 10, 16, 15, 16, 14, 16, 16, 14, 16, 16, 14, 16, 16, 14, 15, 16, 16, 16, 14, 15, 14, 15, 13, 16, 16, 15, 17, 17, 17, 17, 17, 17, 14, 15, 17, 17, 16, 16, 17, 16, 15, 17, 16, 17, 11, 17, 16, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 16, 17, 17, 17, 16, 14, 17, 17, 17, 17, 15, 16, 14, 16, 15, 16, 13, 16, 15, 16, 14, 16, 15, 16, 12, 16, 15, 16, 17, 17, 17, 17, 17, 13, 16, 15, 17, 17, 17, 16, 15, 17, 17, 17, 16, 15, 17, 17, 14, 16, 17, 17, 16, 17, 17, 16, 15, 17, 16, 14, 17, 16, 15, 17, 16, 17, 17, 16, 17, 15, 16, 17, 14, 17, 16, 15, 17, 16, 17, 13, 17, 16, 17, 17, 16, 17, 14, 17, 16, 17, 16, 17, 16, 17, 9]; // public methods:\n\n  /** docced in super class **/\n\n  p.getBounds = function (rect) {\n    var x = this.blurX | 0,\n        y = this.blurY | 0;\n\n    if (x <= 0 && y <= 0) {\n      return rect;\n    }\n\n    var q = Math.pow(this.quality, 0.2);\n    return (rect || new createjs.Rectangle()).pad(x * q + 1, y * q + 1, x * q + 1, y * q + 1);\n  };\n  /** docced in super class **/\n\n\n  p.clone = function () {\n    return new BlurFilter(this.blurX, this.blurY, this.quality);\n  };\n  /** docced in super class **/\n\n\n  p.toString = function () {\n    return \"[BlurFilter]\";\n  }; // private methods:\n\n  /** docced in super class **/\n\n\n  p._applyFilter = function (imageData) {\n    var radiusX = this.blurX >> 1;\n    if (isNaN(radiusX) || radiusX < 0) return false;\n    var radiusY = this.blurY >> 1;\n    if (isNaN(radiusY) || radiusY < 0) return false;\n    if (radiusX == 0 && radiusY == 0) return false;\n    var iterations = this.quality;\n    if (isNaN(iterations) || iterations < 1) iterations = 1;\n    iterations |= 0;\n    if (iterations > 3) iterations = 3;\n    if (iterations < 1) iterations = 1;\n    var px = imageData.data;\n    var x = 0,\n        y = 0,\n        i = 0,\n        p = 0,\n        yp = 0,\n        yi = 0,\n        yw = 0,\n        r = 0,\n        g = 0,\n        b = 0,\n        a = 0,\n        pr = 0,\n        pg = 0,\n        pb = 0,\n        pa = 0;\n    var divx = radiusX + radiusX + 1 | 0;\n    var divy = radiusY + radiusY + 1 | 0;\n    var w = imageData.width | 0;\n    var h = imageData.height | 0;\n    var w1 = w - 1 | 0;\n    var h1 = h - 1 | 0;\n    var rxp1 = radiusX + 1 | 0;\n    var ryp1 = radiusY + 1 | 0;\n    var ssx = {\n      r: 0,\n      b: 0,\n      g: 0,\n      a: 0\n    };\n    var sx = ssx;\n\n    for (i = 1; i < divx; i++) {\n      sx = sx.n = {\n        r: 0,\n        b: 0,\n        g: 0,\n        a: 0\n      };\n    }\n\n    sx.n = ssx;\n    var ssy = {\n      r: 0,\n      b: 0,\n      g: 0,\n      a: 0\n    };\n    var sy = ssy;\n\n    for (i = 1; i < divy; i++) {\n      sy = sy.n = {\n        r: 0,\n        b: 0,\n        g: 0,\n        a: 0\n      };\n    }\n\n    sy.n = ssy;\n    var si = null;\n    var mtx = BlurFilter.MUL_TABLE[radiusX] | 0;\n    var stx = BlurFilter.SHG_TABLE[radiusX] | 0;\n    var mty = BlurFilter.MUL_TABLE[radiusY] | 0;\n    var sty = BlurFilter.SHG_TABLE[radiusY] | 0;\n\n    while (iterations-- > 0) {\n      yw = yi = 0;\n      var ms = mtx;\n      var ss = stx;\n\n      for (y = h; --y > -1;) {\n        r = rxp1 * (pr = px[yi | 0]);\n        g = rxp1 * (pg = px[yi + 1 | 0]);\n        b = rxp1 * (pb = px[yi + 2 | 0]);\n        a = rxp1 * (pa = px[yi + 3 | 0]);\n        sx = ssx;\n\n        for (i = rxp1; --i > -1;) {\n          sx.r = pr;\n          sx.g = pg;\n          sx.b = pb;\n          sx.a = pa;\n          sx = sx.n;\n        }\n\n        for (i = 1; i < rxp1; i++) {\n          p = yi + ((w1 < i ? w1 : i) << 2) | 0;\n          r += sx.r = px[p];\n          g += sx.g = px[p + 1];\n          b += sx.b = px[p + 2];\n          a += sx.a = px[p + 3];\n          sx = sx.n;\n        }\n\n        si = ssx;\n\n        for (x = 0; x < w; x++) {\n          px[yi++] = r * ms >>> ss;\n          px[yi++] = g * ms >>> ss;\n          px[yi++] = b * ms >>> ss;\n          px[yi++] = a * ms >>> ss;\n          p = yw + ((p = x + radiusX + 1) < w1 ? p : w1) << 2;\n          r -= si.r - (si.r = px[p]);\n          g -= si.g - (si.g = px[p + 1]);\n          b -= si.b - (si.b = px[p + 2]);\n          a -= si.a - (si.a = px[p + 3]);\n          si = si.n;\n        }\n\n        yw += w;\n      }\n\n      ms = mty;\n      ss = sty;\n\n      for (x = 0; x < w; x++) {\n        yi = x << 2 | 0;\n        r = ryp1 * (pr = px[yi]) | 0;\n        g = ryp1 * (pg = px[yi + 1 | 0]) | 0;\n        b = ryp1 * (pb = px[yi + 2 | 0]) | 0;\n        a = ryp1 * (pa = px[yi + 3 | 0]) | 0;\n        sy = ssy;\n\n        for (i = 0; i < ryp1; i++) {\n          sy.r = pr;\n          sy.g = pg;\n          sy.b = pb;\n          sy.a = pa;\n          sy = sy.n;\n        }\n\n        yp = w;\n\n        for (i = 1; i <= radiusY; i++) {\n          yi = yp + x << 2;\n          r += sy.r = px[yi];\n          g += sy.g = px[yi + 1];\n          b += sy.b = px[yi + 2];\n          a += sy.a = px[yi + 3];\n          sy = sy.n;\n\n          if (i < h1) {\n            yp += w;\n          }\n        }\n\n        yi = x;\n        si = ssy;\n\n        if (iterations > 0) {\n          for (y = 0; y < h; y++) {\n            p = yi << 2;\n            px[p + 3] = pa = a * ms >>> ss;\n\n            if (pa > 0) {\n              px[p] = r * ms >>> ss;\n              px[p + 1] = g * ms >>> ss;\n              px[p + 2] = b * ms >>> ss;\n            } else {\n              px[p] = px[p + 1] = px[p + 2] = 0;\n            }\n\n            p = x + ((p = y + ryp1) < h1 ? p : h1) * w << 2;\n            r -= si.r - (si.r = px[p]);\n            g -= si.g - (si.g = px[p + 1]);\n            b -= si.b - (si.b = px[p + 2]);\n            a -= si.a - (si.a = px[p + 3]);\n            si = si.n;\n            yi += w;\n          }\n        } else {\n          for (y = 0; y < h; y++) {\n            p = yi << 2;\n            px[p + 3] = pa = a * ms >>> ss;\n\n            if (pa > 0) {\n              pa = 255 / pa;\n              px[p] = (r * ms >>> ss) * pa;\n              px[p + 1] = (g * ms >>> ss) * pa;\n              px[p + 2] = (b * ms >>> ss) * pa;\n            } else {\n              px[p] = px[p + 1] = px[p + 2] = 0;\n            }\n\n            p = x + ((p = y + ryp1) < h1 ? p : h1) * w << 2;\n            r -= si.r - (si.r = px[p]);\n            g -= si.g - (si.g = px[p + 1]);\n            b -= si.b - (si.b = px[p + 2]);\n            a -= si.a - (si.a = px[p + 3]);\n            si = si.n;\n            yi += w;\n          }\n        }\n      }\n    }\n\n    return true;\n  };\n\n  createjs.BlurFilter = createjs.promote(BlurFilter, \"Filter\");\n})(); //##############################################################################\n// AlphaMapFilter.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor:\n\n  /**\n   * Applies a greyscale alpha map image (or canvas) to the target, such that the alpha channel of the result will\n   * be copied from the red channel of the map, and the RGB channels will be copied from the target.\n   *\n   * Generally, it is recommended that you use {{#crossLink \"AlphaMaskFilter\"}}{{/crossLink}}, because it has much\n   * better performance.\n   *\n   * <h4>Example</h4>\n   * This example draws a red->blue box, caches it, and then uses the cache canvas as an alpha map on a 100x100 image.\n   *\n   *       var box = new createjs.Shape();\n   *       box.graphics.beginLinearGradientFill([\"#ff0000\", \"#0000ff\"], [0, 1], 0, 0, 0, 100)\n   *       box.graphics.drawRect(0, 0, 100, 100);\n   *       box.cache(0, 0, 100, 100);\n   *\n   *       var bmp = new createjs.Bitmap(\"path/to/image.jpg\");\n   *       bmp.filters = [\n   *           new createjs.AlphaMapFilter(box.cacheCanvas)\n   *       ];\n   *       bmp.cache(0, 0, 100, 100);\n   *       stage.addChild(bmp);\n   *\n   * See {{#crossLink \"Filter\"}}{{/crossLink}} for more information on applying filters.\n   * @class AlphaMapFilter\n   * @extends Filter\n   * @constructor\n   * @param {HTMLImageElement|HTMLCanvasElement} alphaMap The greyscale image (or canvas) to use as the alpha value for the\n   * result. This should be exactly the same dimensions as the target.\n   **/\n\n  function AlphaMapFilter(alphaMap) {\n    // public properties:\n\n    /**\n     * The greyscale image (or canvas) to use as the alpha value for the result. This should be exactly the same\n     * dimensions as the target.\n     * @property alphaMap\n     * @type HTMLImageElement|HTMLCanvasElement\n     **/\n    this.alphaMap = alphaMap; // private properties:\n\n    /**\n     * @property _alphaMap\n     * @protected\n     * @type HTMLImageElement|HTMLCanvasElement\n     **/\n\n    this._alphaMap = null;\n    /**\n     * @property _mapData\n     * @protected\n     * @type Uint8ClampedArray\n     **/\n\n    this._mapData = null;\n  }\n\n  var p = createjs.extend(AlphaMapFilter, createjs.Filter); // TODO: deprecated\n  // p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n  // public methods:\n\n  /** docced in super class **/\n\n  p.clone = function () {\n    var o = new AlphaMapFilter(this.alphaMap);\n    o._alphaMap = this._alphaMap;\n    o._mapData = this._mapData;\n    return o;\n  };\n  /** docced in super class **/\n\n\n  p.toString = function () {\n    return \"[AlphaMapFilter]\";\n  }; // private methods:\n\n  /** docced in super class **/\n\n\n  p._applyFilter = function (imageData) {\n    if (!this.alphaMap) {\n      return true;\n    }\n\n    if (!this._prepAlphaMap()) {\n      return false;\n    } // TODO: update to support scenarios where the target has different dimensions.\n\n\n    var data = imageData.data;\n    var map = this._mapData;\n\n    for (var i = 0, l = data.length; i < l; i += 4) {\n      data[i + 3] = map[i] || 0;\n    }\n\n    return true;\n  };\n  /**\n   * @method _prepAlphaMap\n   * @protected\n   **/\n\n\n  p._prepAlphaMap = function () {\n    if (!this.alphaMap) {\n      return false;\n    }\n\n    if (this.alphaMap == this._alphaMap && this._mapData) {\n      return true;\n    }\n\n    this._mapData = null;\n    var map = this._alphaMap = this.alphaMap;\n    var canvas = map;\n    var ctx;\n\n    if (map instanceof HTMLCanvasElement) {\n      ctx = canvas.getContext(\"2d\");\n    } else {\n      canvas = createjs.createCanvas ? createjs.createCanvas() : document.createElement(\"canvas\");\n      canvas.width = map.width;\n      canvas.height = map.height;\n      ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(map, 0, 0);\n    }\n\n    try {\n      var imgData = ctx.getImageData(0, 0, map.width, map.height);\n    } catch (e) {\n      //if (!this.suppressCrossDomainErrors) throw new Error(\"unable to access local image data: \" + e);\n      return false;\n    }\n\n    this._mapData = imgData.data;\n    return true;\n  };\n\n  createjs.AlphaMapFilter = createjs.promote(AlphaMapFilter, \"Filter\");\n})(); //##############################################################################\n// AlphaMaskFilter.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor:\n\n  /**\n   * Applies the alpha from the mask image (or canvas) to the target, such that the alpha channel of the result will\n   * be derived from the mask, and the RGB channels will be copied from the target. This can be used, for example, to\n   * apply an alpha mask to a display object. This can also be used to combine a JPG compressed RGB image with a PNG32\n   * alpha mask, which can result in a much smaller file size than a single PNG32 containing ARGB.\n   *\n   * <b>IMPORTANT NOTE: This filter currently does not support the targetCtx, or targetX/Y parameters correctly.</b>\n   *\n   * <h4>Example</h4>\n   * This example draws a gradient box, then caches it and uses the \"cacheCanvas\" as the alpha mask on a 100x100 image.\n   *\n   *      var box = new createjs.Shape();\n   *      box.graphics.beginLinearGradientFill([\"#000000\", \"rgba(0, 0, 0, 0)\"], [0, 1], 0, 0, 100, 100)\n   *      box.graphics.drawRect(0, 0, 100, 100);\n   *      box.cache(0, 0, 100, 100);\n   *\n   *      var bmp = new createjs.Bitmap(\"path/to/image.jpg\");\n   *      bmp.filters = [\n   *          new createjs.AlphaMaskFilter(box.cacheCanvas)\n   *      ];\n   *      bmp.cache(0, 0, 100, 100);\n   *\n   * See {{#crossLink \"Filter\"}}{{/crossLink}} for more information on applying filters.\n   * @class AlphaMaskFilter\n   * @extends Filter\n   * @constructor\n   * @param {HTMLImageElement|HTMLCanvasElement} mask\n   **/\n\n  function AlphaMaskFilter(mask) {\n    // public properties:\n\n    /**\n     * The image (or canvas) to use as the mask.\n     * @property mask\n     * @type HTMLImageElement|HTMLCanvasElement\n     **/\n    this.mask = mask;\n  }\n\n  var p = createjs.extend(AlphaMaskFilter, createjs.Filter); // TODO: deprecated\n  // p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n  // public methods:\n\n  /**\n   * Applies the filter to the specified context.\n   *\n   * <strong>IMPORTANT NOTE: This filter currently does not support the targetCtx, or targetX/Y parameters\n   * correctly.</strong>\n   * @method applyFilter\n   * @param {CanvasRenderingContext2D} ctx The 2D context to use as the source.\n   * @param {Number} x The x position to use for the source rect.\n   * @param {Number} y The y position to use for the source rect.\n   * @param {Number} width The width to use for the source rect.\n   * @param {Number} height The height to use for the source rect.\n   * @param {CanvasRenderingContext2D} [targetCtx] NOT SUPPORTED IN THIS FILTER. The 2D context to draw the result to. Defaults to the context passed to ctx.\n   * @param {Number} [targetX] NOT SUPPORTED IN THIS FILTER. The x position to draw the result to. Defaults to the value passed to x.\n   * @param {Number} [targetY] NOT SUPPORTED IN THIS FILTER. The y position to draw the result to. Defaults to the value passed to y.\n   * @return {Boolean} If the filter was applied successfully.\n   **/\n\n  p.applyFilter = function (ctx, x, y, width, height, targetCtx, targetX, targetY) {\n    if (!this.mask) {\n      return true;\n    }\n\n    targetCtx = targetCtx || ctx;\n\n    if (targetX == null) {\n      targetX = x;\n    }\n\n    if (targetY == null) {\n      targetY = y;\n    }\n\n    targetCtx.save();\n\n    if (ctx != targetCtx) {\n      // TODO: support targetCtx and targetX/Y\n      // clearRect, then draw the ctx in?\n      return false;\n    }\n\n    targetCtx.globalCompositeOperation = \"destination-in\";\n    targetCtx.drawImage(this.mask, targetX, targetY);\n    targetCtx.restore();\n    return true;\n  };\n  /** docced in super class **/\n\n\n  p.clone = function () {\n    return new AlphaMaskFilter(this.mask);\n  };\n  /** docced in super class **/\n\n\n  p.toString = function () {\n    return \"[AlphaMaskFilter]\";\n  };\n\n  createjs.AlphaMaskFilter = createjs.promote(AlphaMaskFilter, \"Filter\");\n})(); //##############################################################################\n// ColorFilter.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor:\n\n  /**\n   * Applies a color transform to DisplayObjects.\n   *\n   * <h4>Example</h4>\n   * This example draws a red circle, and then transforms it to Blue. This is accomplished by multiplying all the channels\n   * to 0 (except alpha, which is set to 1), and then adding 255 to the blue channel.\n   *\n   *      var shape = new createjs.Shape().set({x:100,y:100});\n   *      shape.graphics.beginFill(\"#ff0000\").drawCircle(0,0,50);\n   *\n   *      shape.filters = [\n   *          new createjs.ColorFilter(0,0,0,1, 0,0,255,0)\n   *      ];\n   *      shape.cache(-50, -50, 100, 100);\n   *\n   * See {{#crossLink \"Filter\"}}{{/crossLink}} for an more information on applying filters.\n   * @class ColorFilter\n   * @param {Number} [redMultiplier=1] The amount to multiply against the red channel. This is a range between 0 and 1.\n   * @param {Number} [greenMultiplier=1] The amount to multiply against the green channel. This is a range between 0 and 1.\n   * @param {Number} [blueMultiplier=1] The amount to multiply against the blue channel. This is a range between 0 and 1.\n   * @param {Number} [alphaMultiplier=1] The amount to multiply against the alpha channel. This is a range between 0 and 1.\n   * @param {Number} [redOffset=0] The amount to add to the red channel after it has been multiplied. This is a range\n   * between -255 and 255.\n   * @param {Number} [greenOffset=0] The amount to add to the green channel after it has been multiplied. This is a range\n    * between -255 and 255.\n   * @param {Number} [blueOffset=0] The amount to add to the blue channel after it has been multiplied. This is a range\n    * between -255 and 255.\n   * @param {Number} [alphaOffset=0] The amount to add to the alpha channel after it has been multiplied. This is a range\n    * between -255 and 255.\n   * @constructor\n   * @extends Filter\n   **/\n\n  function ColorFilter(redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier, redOffset, greenOffset, blueOffset, alphaOffset) {\n    // public properties:\n\n    /**\n     * Red channel multiplier.\n     * @property redMultiplier\n     * @type Number\n     **/\n    this.redMultiplier = redMultiplier != null ? redMultiplier : 1;\n    /**\n     * Green channel multiplier.\n     * @property greenMultiplier\n     * @type Number\n     **/\n\n    this.greenMultiplier = greenMultiplier != null ? greenMultiplier : 1;\n    /**\n     * Blue channel multiplier.\n     * @property blueMultiplier\n     * @type Number\n     **/\n\n    this.blueMultiplier = blueMultiplier != null ? blueMultiplier : 1;\n    /**\n     * Alpha channel multiplier.\n     * @property alphaMultiplier\n     * @type Number\n     **/\n\n    this.alphaMultiplier = alphaMultiplier != null ? alphaMultiplier : 1;\n    /**\n     * Red channel offset (added to value).\n     * @property redOffset\n     * @type Number\n     **/\n\n    this.redOffset = redOffset || 0;\n    /**\n     * Green channel offset (added to value).\n     * @property greenOffset\n     * @type Number\n     **/\n\n    this.greenOffset = greenOffset || 0;\n    /**\n     * Blue channel offset (added to value).\n     * @property blueOffset\n     * @type Number\n     **/\n\n    this.blueOffset = blueOffset || 0;\n    /**\n     * Alpha channel offset (added to value).\n     * @property alphaOffset\n     * @type Number\n     **/\n\n    this.alphaOffset = alphaOffset || 0;\n  }\n\n  var p = createjs.extend(ColorFilter, createjs.Filter); // TODO: deprecated\n  // p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n  // public methods:\n\n  /** docced in super class **/\n\n  p.toString = function () {\n    return \"[ColorFilter]\";\n  };\n  /** docced in super class **/\n\n\n  p.clone = function () {\n    return new ColorFilter(this.redMultiplier, this.greenMultiplier, this.blueMultiplier, this.alphaMultiplier, this.redOffset, this.greenOffset, this.blueOffset, this.alphaOffset);\n  }; // private methods:\n\n  /** docced in super class **/\n\n\n  p._applyFilter = function (imageData) {\n    var data = imageData.data;\n    var l = data.length;\n\n    for (var i = 0; i < l; i += 4) {\n      data[i] = data[i] * this.redMultiplier + this.redOffset;\n      data[i + 1] = data[i + 1] * this.greenMultiplier + this.greenOffset;\n      data[i + 2] = data[i + 2] * this.blueMultiplier + this.blueOffset;\n      data[i + 3] = data[i + 3] * this.alphaMultiplier + this.alphaOffset;\n    }\n\n    return true;\n  };\n\n  createjs.ColorFilter = createjs.promote(ColorFilter, \"Filter\");\n})(); //##############################################################################\n// ColorMatrix.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor:\n\n  /**\n   * Provides helper functions for assembling a matrix for use with the {{#crossLink \"ColorMatrixFilter\"}}{{/crossLink}}.\n   * Most methods return the instance to facilitate chained calls.\n   *\n   * <h4>Example</h4>\n   *\n   *      myColorMatrix.adjustHue(20).adjustBrightness(50);\n   *\n   * See {{#crossLink \"Filter\"}}{{/crossLink}} for an example of how to apply filters, or {{#crossLink \"ColorMatrixFilter\"}}{{/crossLink}}\n   * for an example of how to use ColorMatrix to change a DisplayObject's color.\n   * @class ColorMatrix\n   * @param {Number} brightness\n   * @param {Number} contrast\n   * @param {Number} saturation\n   * @param {Number} hue\n   * @constructor\n   **/\n\n  function ColorMatrix(brightness, contrast, saturation, hue) {\n    this.setColor(brightness, contrast, saturation, hue);\n  }\n\n  var p = ColorMatrix.prototype;\n  /**\n   * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n   * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n   * for details.\n   *\n   * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n   *\n   * @method initialize\n   * @protected\n   * @deprecated\n   */\n  // p.initialize = function() {}; // searchable for devs wondering where it is.\n  // constants:\n\n  /**\n   * Array of delta values for contrast calculations.\n   * @property DELTA_INDEX\n   * @type Array\n   * @protected\n   * @static\n   **/\n\n  ColorMatrix.DELTA_INDEX = [0, 0.01, 0.02, 0.04, 0.05, 0.06, 0.07, 0.08, 0.1, 0.11, 0.12, 0.14, 0.15, 0.16, 0.17, 0.18, 0.20, 0.21, 0.22, 0.24, 0.25, 0.27, 0.28, 0.30, 0.32, 0.34, 0.36, 0.38, 0.40, 0.42, 0.44, 0.46, 0.48, 0.5, 0.53, 0.56, 0.59, 0.62, 0.65, 0.68, 0.71, 0.74, 0.77, 0.80, 0.83, 0.86, 0.89, 0.92, 0.95, 0.98, 1.0, 1.06, 1.12, 1.18, 1.24, 1.30, 1.36, 1.42, 1.48, 1.54, 1.60, 1.66, 1.72, 1.78, 1.84, 1.90, 1.96, 2.0, 2.12, 2.25, 2.37, 2.50, 2.62, 2.75, 2.87, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0, 4.3, 4.7, 4.9, 5.0, 5.5, 6.0, 6.5, 6.8, 7.0, 7.3, 7.5, 7.8, 8.0, 8.4, 8.7, 9.0, 9.4, 9.6, 9.8, 10.0];\n  /**\n   * Identity matrix values.\n   * @property IDENTITY_MATRIX\n   * @type Array\n   * @protected\n   * @static\n   **/\n\n  ColorMatrix.IDENTITY_MATRIX = [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1];\n  /**\n   * The constant length of a color matrix.\n   * @property LENGTH\n   * @type Number\n   * @protected\n   * @static\n   **/\n\n  ColorMatrix.LENGTH = ColorMatrix.IDENTITY_MATRIX.length; // public methods:\n\n  /**\n   * Resets the instance with the specified values.\n   * @method setColor\n   * @param {Number} brightness\n   * @param {Number} contrast\n   * @param {Number} saturation\n   * @param {Number} hue\n   * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n   * @chainable\n   */\n\n  p.setColor = function (brightness, contrast, saturation, hue) {\n    return this.reset().adjustColor(brightness, contrast, saturation, hue);\n  };\n  /**\n   * Resets the matrix to identity values.\n   * @method reset\n   * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n   * @chainable\n   */\n\n\n  p.reset = function () {\n    return this.copy(ColorMatrix.IDENTITY_MATRIX);\n  };\n  /**\n   * Shortcut method to adjust brightness, contrast, saturation and hue.\n   * Equivalent to calling adjustHue(hue), adjustContrast(contrast),\n   * adjustBrightness(brightness), adjustSaturation(saturation), in that order.\n   * @method adjustColor\n   * @param {Number} brightness\n   * @param {Number} contrast\n   * @param {Number} saturation\n   * @param {Number} hue\n   * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n   * @chainable\n   **/\n\n\n  p.adjustColor = function (brightness, contrast, saturation, hue) {\n    this.adjustHue(hue);\n    this.adjustContrast(contrast);\n    this.adjustBrightness(brightness);\n    return this.adjustSaturation(saturation);\n  };\n  /**\n   * Adjusts the brightness of pixel color by adding the specified value to the red, green and blue channels.\n   * Positive values will make the image brighter, negative values will make it darker.\n   * @method adjustBrightness\n   * @param {Number} value A value between -255 & 255 that will be added to the RGB channels.\n   * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n   * @chainable\n   **/\n\n\n  p.adjustBrightness = function (value) {\n    if (value == 0 || isNaN(value)) {\n      return this;\n    }\n\n    value = this._cleanValue(value, 255);\n\n    this._multiplyMatrix([1, 0, 0, 0, value, 0, 1, 0, 0, value, 0, 0, 1, 0, value, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1]);\n\n    return this;\n  };\n  /**\n   * Adjusts the contrast of pixel color.\n   * Positive values will increase contrast, negative values will decrease contrast.\n   * @method adjustContrast\n   * @param {Number} value A value between -100 & 100.\n   * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n   * @chainable\n   **/\n\n\n  p.adjustContrast = function (value) {\n    if (value == 0 || isNaN(value)) {\n      return this;\n    }\n\n    value = this._cleanValue(value, 100);\n    var x;\n\n    if (value < 0) {\n      x = 127 + value / 100 * 127;\n    } else {\n      x = value % 1;\n\n      if (x == 0) {\n        x = ColorMatrix.DELTA_INDEX[value];\n      } else {\n        x = ColorMatrix.DELTA_INDEX[value << 0] * (1 - x) + ColorMatrix.DELTA_INDEX[(value << 0) + 1] * x; // use linear interpolation for more granularity.\n      }\n\n      x = x * 127 + 127;\n    }\n\n    this._multiplyMatrix([x / 127, 0, 0, 0, 0.5 * (127 - x), 0, x / 127, 0, 0, 0.5 * (127 - x), 0, 0, x / 127, 0, 0.5 * (127 - x), 0, 0, 0, 1, 0, 0, 0, 0, 0, 1]);\n\n    return this;\n  };\n  /**\n   * Adjusts the color saturation of the pixel.\n   * Positive values will increase saturation, negative values will decrease saturation (trend towards greyscale).\n   * @method adjustSaturation\n   * @param {Number} value A value between -100 & 100.\n   * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n   * @chainable\n   **/\n\n\n  p.adjustSaturation = function (value) {\n    if (value == 0 || isNaN(value)) {\n      return this;\n    }\n\n    value = this._cleanValue(value, 100);\n    var x = 1 + (value > 0 ? 3 * value / 100 : value / 100);\n    var lumR = 0.3086;\n    var lumG = 0.6094;\n    var lumB = 0.0820;\n\n    this._multiplyMatrix([lumR * (1 - x) + x, lumG * (1 - x), lumB * (1 - x), 0, 0, lumR * (1 - x), lumG * (1 - x) + x, lumB * (1 - x), 0, 0, lumR * (1 - x), lumG * (1 - x), lumB * (1 - x) + x, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1]);\n\n    return this;\n  };\n  /**\n   * Adjusts the hue of the pixel color.\n   * @method adjustHue\n   * @param {Number} value A value between -180 & 180.\n   * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n   * @chainable\n   **/\n\n\n  p.adjustHue = function (value) {\n    if (value == 0 || isNaN(value)) {\n      return this;\n    }\n\n    value = this._cleanValue(value, 180) / 180 * Math.PI;\n    var cosVal = Math.cos(value);\n    var sinVal = Math.sin(value);\n    var lumR = 0.213;\n    var lumG = 0.715;\n    var lumB = 0.072;\n\n    this._multiplyMatrix([lumR + cosVal * (1 - lumR) + sinVal * -lumR, lumG + cosVal * -lumG + sinVal * -lumG, lumB + cosVal * -lumB + sinVal * (1 - lumB), 0, 0, lumR + cosVal * -lumR + sinVal * 0.143, lumG + cosVal * (1 - lumG) + sinVal * 0.140, lumB + cosVal * -lumB + sinVal * -0.283, 0, 0, lumR + cosVal * -lumR + sinVal * -(1 - lumR), lumG + cosVal * -lumG + sinVal * lumG, lumB + cosVal * (1 - lumB) + sinVal * lumB, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1]);\n\n    return this;\n  };\n  /**\n   * Concatenates (multiplies) the specified matrix with this one.\n   * @method concat\n   * @param {Array} matrix An array or ColorMatrix instance.\n   * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n   * @chainable\n   **/\n\n\n  p.concat = function (matrix) {\n    matrix = this._fixMatrix(matrix);\n\n    if (matrix.length != ColorMatrix.LENGTH) {\n      return this;\n    }\n\n    this._multiplyMatrix(matrix);\n\n    return this;\n  };\n  /**\n   * Returns a clone of this ColorMatrix.\n   * @method clone\n   * @return {ColorMatrix} A clone of this ColorMatrix.\n   **/\n\n\n  p.clone = function () {\n    return new ColorMatrix().copy(this);\n  };\n  /**\n   * Return a length 25 (5x5) array instance containing this matrix's values.\n   * @method toArray\n   * @return {Array} An array holding this matrix's values.\n   **/\n\n\n  p.toArray = function () {\n    var arr = [];\n\n    for (var i = 0, l = ColorMatrix.LENGTH; i < l; i++) {\n      arr[i] = this[i];\n    }\n\n    return arr;\n  };\n  /**\n   * Copy the specified matrix's values to this matrix.\n   * @method copy\n   * @param {Array} matrix An array or ColorMatrix instance.\n   * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n   * @chainable\n   **/\n\n\n  p.copy = function (matrix) {\n    var l = ColorMatrix.LENGTH;\n\n    for (var i = 0; i < l; i++) {\n      this[i] = matrix[i];\n    }\n\n    return this;\n  };\n  /**\n   * Returns a string representation of this object.\n   * @method toString\n   * @return {String} a string representation of the instance.\n   **/\n\n\n  p.toString = function () {\n    return \"[ColorMatrix]\";\n  }; // private methods:\n\n  /**\n   * @method _multiplyMatrix\n   * @param {Array} matrix\n   * @protected\n   **/\n\n\n  p._multiplyMatrix = function (matrix) {\n    var i,\n        j,\n        k,\n        col = [];\n\n    for (i = 0; i < 5; i++) {\n      for (j = 0; j < 5; j++) {\n        col[j] = this[j + i * 5];\n      }\n\n      for (j = 0; j < 5; j++) {\n        var val = 0;\n\n        for (k = 0; k < 5; k++) {\n          val += matrix[j + k * 5] * col[k];\n        }\n\n        this[j + i * 5] = val;\n      }\n    }\n  };\n  /**\n   * Make sure values are within the specified range, hue has a limit of 180, brightness is 255, others are 100.\n   * @method _cleanValue\n   * @param {Number} value The raw number\n   * @param {Number} limit The maximum that the number can be. The minimum is the limit * -1.\n   * @protected\n   **/\n\n\n  p._cleanValue = function (value, limit) {\n    return Math.min(limit, Math.max(-limit, value));\n  };\n  /**\n   * Makes sure matrixes are 5x5 (25 long).\n   * @method _fixMatrix\n   * @param {Array} matrix\n   * @protected\n   **/\n\n\n  p._fixMatrix = function (matrix) {\n    if (matrix instanceof ColorMatrix) {\n      matrix = matrix.toArray();\n    }\n\n    if (matrix.length < ColorMatrix.LENGTH) {\n      matrix = matrix.slice(0, matrix.length).concat(ColorMatrix.IDENTITY_MATRIX.slice(matrix.length, ColorMatrix.LENGTH));\n    } else if (matrix.length > ColorMatrix.LENGTH) {\n      matrix = matrix.slice(0, ColorMatrix.LENGTH);\n    }\n\n    return matrix;\n  };\n\n  createjs.ColorMatrix = ColorMatrix;\n})(); //##############################################################################\n// ColorMatrixFilter.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor:\n\n  /**\n   * Allows you to carry out complex color operations such as modifying saturation, brightness, or inverting. See the\n   * {{#crossLink \"ColorMatrix\"}}{{/crossLink}} for more information on changing colors. For an easier color transform,\n   * consider the {{#crossLink \"ColorFilter\"}}{{/crossLink}}.\n   *\n   * <h4>Example</h4>\n   * This example creates a red circle, inverts its hue, and then saturates it to brighten it up.\n   *\n   *      var shape = new createjs.Shape().set({x:100,y:100});\n   *      shape.graphics.beginFill(\"#ff0000\").drawCircle(0,0,50);\n   *\n   *      var matrix = new createjs.ColorMatrix().adjustHue(180).adjustSaturation(100);\n   *      shape.filters = [\n   *          new createjs.ColorMatrixFilter(matrix)\n   *      ];\n   *\n   *      shape.cache(-50, -50, 100, 100);\n   *\n   * See {{#crossLink \"Filter\"}}{{/crossLink}} for an more information on applying filters.\n   * @class ColorMatrixFilter\n   * @constructor\n   * @extends Filter\n   * @param {Array | ColorMatrix} matrix A 4x5 matrix describing the color operation to perform. See also the {{#crossLink \"ColorMatrix\"}}{{/crossLink}}\n   * class.\n   **/\n\n  function ColorMatrixFilter(matrix) {\n    // public properties:\n\n    /**\n     * A 4x5 matrix describing the color operation to perform. See also the {{#crossLink \"ColorMatrix\"}}{{/crossLink}}\n     * @property matrix\n     * @type Array | ColorMatrix\n     **/\n    this.matrix = matrix;\n  }\n\n  var p = createjs.extend(ColorMatrixFilter, createjs.Filter); // TODO: deprecated\n  // p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n  // public methods:\n\n  /** docced in super class **/\n\n  p.toString = function () {\n    return \"[ColorMatrixFilter]\";\n  };\n  /** docced in super class **/\n\n\n  p.clone = function () {\n    return new ColorMatrixFilter(this.matrix);\n  }; // private methods:\n\n  /** docced in super class **/\n\n\n  p._applyFilter = function (imageData) {\n    var data = imageData.data;\n    var l = data.length;\n    var r, g, b, a;\n    var mtx = this.matrix;\n    var m0 = mtx[0],\n        m1 = mtx[1],\n        m2 = mtx[2],\n        m3 = mtx[3],\n        m4 = mtx[4];\n    var m5 = mtx[5],\n        m6 = mtx[6],\n        m7 = mtx[7],\n        m8 = mtx[8],\n        m9 = mtx[9];\n    var m10 = mtx[10],\n        m11 = mtx[11],\n        m12 = mtx[12],\n        m13 = mtx[13],\n        m14 = mtx[14];\n    var m15 = mtx[15],\n        m16 = mtx[16],\n        m17 = mtx[17],\n        m18 = mtx[18],\n        m19 = mtx[19];\n\n    for (var i = 0; i < l; i += 4) {\n      r = data[i];\n      g = data[i + 1];\n      b = data[i + 2];\n      a = data[i + 3];\n      data[i] = r * m0 + g * m1 + b * m2 + a * m3 + m4; // red\n\n      data[i + 1] = r * m5 + g * m6 + b * m7 + a * m8 + m9; // green\n\n      data[i + 2] = r * m10 + g * m11 + b * m12 + a * m13 + m14; // blue\n\n      data[i + 3] = r * m15 + g * m16 + b * m17 + a * m18 + m19; // alpha\n    }\n\n    return true;\n  };\n\n  createjs.ColorMatrixFilter = createjs.promote(ColorMatrixFilter, \"Filter\");\n})(); //##############################################################################\n// Touch.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor:\n\n  /**\n  * Global utility for working with multi-touch enabled devices in EaselJS. Currently supports W3C Touch API (iOS and\n  * modern Android browser) and the Pointer API (IE), including ms-prefixed events in IE10, and unprefixed in IE11.\n  *\n  * Ensure that you {{#crossLink \"Touch/disable\"}}{{/crossLink}} touch when cleaning up your application. You do not have\n  * to check if touch is supported to enable it, as it will fail gracefully if it is not supported.\n  *\n  * <h4>Example</h4>\n  *\n  *      var stage = new createjs.Stage(\"canvasId\");\n  *      createjs.Touch.enable(stage);\n  *\n  * <strong>Note:</strong> It is important to disable Touch on a stage that you are no longer using:\n  *\n  *      createjs.Touch.disable(stage);\n  *\n  * @class Touch\n  * @static\n  **/\n\n  function Touch() {\n    throw \"Touch cannot be instantiated\";\n  } // public static methods:\n\n  /**\n   * Returns `true` if touch is supported in the current browser.\n   * @method isSupported\n   * @return {Boolean} Indicates whether touch is supported in the current browser.\n   * @static\n   **/\n\n\n  Touch.isSupported = function () {\n    return !!('ontouchstart' in window // iOS & Android\n    || window.navigator['msPointerEnabled'] && window.navigator['msMaxTouchPoints'] > 0 // IE10\n    || window.navigator['pointerEnabled'] && window.navigator['maxTouchPoints'] > 0); // IE11+\n  };\n  /**\n   * Enables touch interaction for the specified EaselJS {{#crossLink \"Stage\"}}{{/crossLink}}. Currently supports iOS\n   * (and compatible browsers, such as modern Android browsers), and IE10/11. Supports both single touch and\n   * multi-touch modes. Extends the EaselJS {{#crossLink \"MouseEvent\"}}{{/crossLink}} model, but without support for\n   * double click or over/out events. See the MouseEvent {{#crossLink \"MouseEvent/pointerId:property\"}}{{/crossLink}}\n   * for more information.\n   * @method enable\n   * @param {Stage} stage The {{#crossLink \"Stage\"}}{{/crossLink}} to enable touch on.\n   * @param {Boolean} [singleTouch=false] If `true`, only a single touch will be active at a time.\n   * @param {Boolean} [allowDefault=false] If `true`, then default gesture actions (ex. scrolling, zooming) will be\n   * allowed when the user is interacting with the target canvas.\n   * @return {Boolean} Returns `true` if touch was successfully enabled on the target stage.\n   * @static\n   **/\n\n\n  Touch.enable = function (stage, singleTouch, allowDefault) {\n    if (!stage || !stage.canvas || !Touch.isSupported()) {\n      return false;\n    }\n\n    if (stage.__touch) {\n      return true;\n    } // inject required properties on stage:\n\n\n    stage.__touch = {\n      pointers: {},\n      multitouch: !singleTouch,\n      preventDefault: !allowDefault,\n      count: 0\n    }; // note that in the future we may need to disable the standard mouse event model before adding\n    // these to prevent duplicate calls. It doesn't seem to be an issue with iOS devices though.\n\n    if ('ontouchstart' in window) {\n      Touch._IOS_enable(stage);\n    } else if (window.navigator['msPointerEnabled'] || window.navigator[\"pointerEnabled\"]) {\n      Touch._IE_enable(stage);\n    }\n\n    return true;\n  };\n  /**\n   * Removes all listeners that were set up when calling `Touch.enable()` on a stage.\n   * @method disable\n   * @param {Stage} stage The {{#crossLink \"Stage\"}}{{/crossLink}} to disable touch on.\n   * @static\n   **/\n\n\n  Touch.disable = function (stage) {\n    if (!stage) {\n      return;\n    }\n\n    if ('ontouchstart' in window) {\n      Touch._IOS_disable(stage);\n    } else if (window.navigator['msPointerEnabled'] || window.navigator[\"pointerEnabled\"]) {\n      Touch._IE_disable(stage);\n    }\n\n    delete stage.__touch;\n  }; // Private static methods:\n\n  /**\n   * @method _IOS_enable\n   * @protected\n   * @param {Stage} stage\n   * @static\n   **/\n\n\n  Touch._IOS_enable = function (stage) {\n    var canvas = stage.canvas;\n\n    var f = stage.__touch.f = function (e) {\n      Touch._IOS_handleEvent(stage, e);\n    };\n\n    canvas.addEventListener(\"touchstart\", f, false);\n    canvas.addEventListener(\"touchmove\", f, false);\n    canvas.addEventListener(\"touchend\", f, false);\n    canvas.addEventListener(\"touchcancel\", f, false);\n  };\n  /**\n   * @method _IOS_disable\n   * @protected\n   * @param {Stage} stage\n   * @static\n   **/\n\n\n  Touch._IOS_disable = function (stage) {\n    var canvas = stage.canvas;\n\n    if (!canvas) {\n      return;\n    }\n\n    var f = stage.__touch.f;\n    canvas.removeEventListener(\"touchstart\", f, false);\n    canvas.removeEventListener(\"touchmove\", f, false);\n    canvas.removeEventListener(\"touchend\", f, false);\n    canvas.removeEventListener(\"touchcancel\", f, false);\n  };\n  /**\n   * @method _IOS_handleEvent\n   * @param {Stage} stage\n   * @param {Object} e The event to handle\n   * @protected\n   * @static\n   **/\n\n\n  Touch._IOS_handleEvent = function (stage, e) {\n    if (!stage) {\n      return;\n    }\n\n    if (stage.__touch.preventDefault) {\n      e.preventDefault && e.preventDefault();\n    }\n\n    var touches = e.changedTouches;\n    var type = e.type;\n\n    for (var i = 0, l = touches.length; i < l; i++) {\n      var touch = touches[i];\n      var id = touch.identifier;\n\n      if (touch.target != stage.canvas) {\n        continue;\n      }\n\n      if (type == \"touchstart\") {\n        this._handleStart(stage, id, e, touch.pageX, touch.pageY);\n      } else if (type == \"touchmove\") {\n        this._handleMove(stage, id, e, touch.pageX, touch.pageY);\n      } else if (type == \"touchend\" || type == \"touchcancel\") {\n        this._handleEnd(stage, id, e);\n      }\n    }\n  };\n  /**\n   * @method _IE_enable\n   * @protected\n   * @param {Stage} stage\n   * @static\n   **/\n\n\n  Touch._IE_enable = function (stage) {\n    var canvas = stage.canvas;\n\n    var f = stage.__touch.f = function (e) {\n      Touch._IE_handleEvent(stage, e);\n    };\n\n    if (window.navigator[\"pointerEnabled\"] === undefined) {\n      canvas.addEventListener(\"MSPointerDown\", f, false);\n      window.addEventListener(\"MSPointerMove\", f, false);\n      window.addEventListener(\"MSPointerUp\", f, false);\n      window.addEventListener(\"MSPointerCancel\", f, false);\n\n      if (stage.__touch.preventDefault) {\n        canvas.style.msTouchAction = \"none\";\n      }\n    } else {\n      canvas.addEventListener(\"pointerdown\", f, false);\n      window.addEventListener(\"pointermove\", f, false);\n      window.addEventListener(\"pointerup\", f, false);\n      window.addEventListener(\"pointercancel\", f, false);\n\n      if (stage.__touch.preventDefault) {\n        canvas.style.touchAction = \"none\";\n      }\n    }\n\n    stage.__touch.activeIDs = {};\n  };\n  /**\n   * @method _IE_disable\n   * @protected\n   * @param {Stage} stage\n   * @static\n   **/\n\n\n  Touch._IE_disable = function (stage) {\n    var f = stage.__touch.f;\n\n    if (window.navigator[\"pointerEnabled\"] === undefined) {\n      window.removeEventListener(\"MSPointerMove\", f, false);\n      window.removeEventListener(\"MSPointerUp\", f, false);\n      window.removeEventListener(\"MSPointerCancel\", f, false);\n\n      if (stage.canvas) {\n        stage.canvas.removeEventListener(\"MSPointerDown\", f, false);\n      }\n    } else {\n      window.removeEventListener(\"pointermove\", f, false);\n      window.removeEventListener(\"pointerup\", f, false);\n      window.removeEventListener(\"pointercancel\", f, false);\n\n      if (stage.canvas) {\n        stage.canvas.removeEventListener(\"pointerdown\", f, false);\n      }\n    }\n  };\n  /**\n   * @method _IE_handleEvent\n   * @param {Stage} stage\n   * @param {Object} e The event to handle.\n   * @protected\n   * @static\n   **/\n\n\n  Touch._IE_handleEvent = function (stage, e) {\n    if (!stage) {\n      return;\n    }\n\n    if (stage.__touch.preventDefault) {\n      e.preventDefault && e.preventDefault();\n    }\n\n    var type = e.type;\n    var id = e.pointerId;\n    var ids = stage.__touch.activeIDs;\n\n    if (type == \"MSPointerDown\" || type == \"pointerdown\") {\n      if (e.srcElement != stage.canvas) {\n        return;\n      }\n\n      ids[id] = true;\n\n      this._handleStart(stage, id, e, e.pageX, e.pageY);\n    } else if (ids[id]) {\n      // it's an id we're watching\n      if (type == \"MSPointerMove\" || type == \"pointermove\") {\n        this._handleMove(stage, id, e, e.pageX, e.pageY);\n      } else if (type == \"MSPointerUp\" || type == \"MSPointerCancel\" || type == \"pointerup\" || type == \"pointercancel\") {\n        delete ids[id];\n\n        this._handleEnd(stage, id, e);\n      }\n    }\n  };\n  /**\n   * @method _handleStart\n   * @param {Stage} stage\n   * @param {String|Number} id\n   * @param {Object} e\n   * @param {Number} x\n   * @param {Number} y\n   * @protected\n   **/\n\n\n  Touch._handleStart = function (stage, id, e, x, y) {\n    var props = stage.__touch;\n\n    if (!props.multitouch && props.count) {\n      return;\n    }\n\n    var ids = props.pointers;\n\n    if (ids[id]) {\n      return;\n    }\n\n    ids[id] = true;\n    props.count++;\n\n    stage._handlePointerDown(id, e, x, y);\n  };\n  /**\n   * @method _handleMove\n   * @param {Stage} stage\n   * @param {String|Number} id\n   * @param {Object} e\n   * @param {Number} x\n   * @param {Number} y\n   * @protected\n   **/\n\n\n  Touch._handleMove = function (stage, id, e, x, y) {\n    if (!stage.__touch.pointers[id]) {\n      return;\n    }\n\n    stage._handlePointerMove(id, e, x, y);\n  };\n  /**\n   * @method _handleEnd\n   * @param {Stage} stage\n   * @param {String|Number} id\n   * @param {Object} e\n   * @protected\n   **/\n\n\n  Touch._handleEnd = function (stage, id, e) {\n    // TODO: cancel should be handled differently for proper UI (ex. an up would trigger a click, a cancel would more closely resemble an out).\n    var props = stage.__touch;\n    var ids = props.pointers;\n\n    if (!ids[id]) {\n      return;\n    }\n\n    props.count--;\n\n    stage._handlePointerUp(id, e, true);\n\n    delete ids[id];\n  };\n\n  createjs.Touch = Touch;\n})(); //##############################################################################\n// version.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\";\n  /**\n   * Static class holding library specific information such as the version and buildDate of\n   * the library.\n   * @class EaselJS\n   **/\n\n  var s = createjs.EaselJS = createjs.EaselJS || {};\n  /**\n   * The version string for this release.\n   * @property version\n   * @type String\n   * @static\n   **/\n\n  s.version =\n  /*=version*/\n  \"0.8.2\"; // injected by build process\n\n  /**\n   * The build date for this release in UTC format.\n   * @property buildDate\n   * @type String\n   * @static\n   **/\n\n  s.buildDate =\n  /*=date*/\n  \"Thu, 26 Nov 2015 20:44:34 GMT\"; // injected by build process\n})(); //##############################################################################\n// version.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\";\n  /**\n   * Static class holding library specific information such as the version and buildDate of the library.\n   * @class PreloadJS\n   **/\n\n  var s = createjs.PreloadJS = createjs.PreloadJS || {};\n  /**\n   * The version string for this release.\n   * @property version\n   * @type {String}\n   * @static\n   **/\n\n  s.version =\n  /*=version*/\n  \"0.6.2\"; // injected by build process\n\n  /**\n   * The build date for this release in UTC format.\n   * @property buildDate\n   * @type {String}\n   * @static\n   **/\n\n  s.buildDate =\n  /*=date*/\n  \"Thu, 26 Nov 2015 20:44:31 GMT\"; // injected by build process\n})(); //##############################################################################\n// proxy.js\n//##############################################################################\n\n/**\n * Various utilities that the CreateJS Suite uses. Utilities are created as separate files, and will be available on the\n * createjs namespace directly.\n *\n * <h4>Example</h4>\n *\n *      myObject.addEventListener(\"change\", createjs.proxy(myMethod, scope));\n *\n * @class Utility Methods\n * @main Utility Methods\n */\n\n\n(function () {\n  \"use strict\";\n  /**\n   * A function proxy for methods. By default, JavaScript methods do not maintain scope, so passing a method as a\n   * callback will result in the method getting called in the scope of the caller. Using a proxy ensures that the\n   * method gets called in the correct scope.\n   *\n   * Additional arguments can be passed that will be applied to the function when it is called.\n   *\n   * <h4>Example</h4>\n   *\n   *      myObject.addEventListener(\"event\", createjs.proxy(myHandler, this, arg1, arg2));\n   *\n   *      function myHandler(arg1, arg2) {\n   *           // This gets called when myObject.myCallback is executed.\n   *      }\n   *\n   * @method proxy\n   * @param {Function} method The function to call\n   * @param {Object} scope The scope to call the method name on\n   * @param {mixed} [arg] * Arguments that are appended to the callback for additional params.\n   * @public\n   * @static\n   */\n\n  createjs.proxy = function (method, scope) {\n    var aArgs = Array.prototype.slice.call(arguments, 2);\n    return function () {\n      return method.apply(scope, Array.prototype.slice.call(arguments, 0).concat(aArgs));\n    };\n  };\n})(); //##############################################################################\n// ErrorEvent.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\";\n  /**\n   * A general error {{#crossLink \"Event\"}}{{/crossLink}}, that describes an error that occurred, as well as any details.\n   * @class ErrorEvent\n   * @param {String} [title] The error title\n   * @param {String} [message] The error description\n   * @param {Object} [data] Additional error data\n   * @constructor\n   */\n\n  function ErrorEvent(title, message, data) {\n    this.Event_constructor(\"error\");\n    /**\n     * The short error title, which indicates the type of error that occurred.\n     * @property title\n     * @type String\n     */\n\n    this.title = title;\n    /**\n     * The verbose error message, containing details about the error.\n     * @property message\n     * @type String\n     */\n\n    this.message = message;\n    /**\n     * Additional data attached to an error.\n     * @property data\n     * @type {Object}\n     */\n\n    this.data = data;\n  }\n\n  var p = createjs.extend(ErrorEvent, createjs.Event);\n\n  p.clone = function () {\n    return new createjs.ErrorEvent(this.title, this.message, this.data);\n  };\n\n  createjs.ErrorEvent = createjs.promote(ErrorEvent, \"Event\");\n})(); //##############################################################################\n// ProgressEvent.js\n//##############################################################################\n\n\n(function (scope) {\n  \"use strict\"; // constructor\n\n  /**\n   * A CreateJS {{#crossLink \"Event\"}}{{/crossLink}} that is dispatched when progress changes.\n   * @class ProgressEvent\n   * @param {Number} loaded The amount that has been loaded. This can be any number relative to the total.\n   * @param {Number} [total=1] The total amount that will load. This will default to 1, so if the `loaded` value is\n   * a percentage (between 0 and 1), it can be omitted.\n   * @todo Consider having this event be a \"fileprogress\" event as well\n   * @constructor\n   */\n\n  function ProgressEvent(loaded, total) {\n    this.Event_constructor(\"progress\");\n    /**\n     * The amount that has been loaded (out of a total amount)\n     * @property loaded\n     * @type {Number}\n     */\n\n    this.loaded = loaded;\n    /**\n     * The total \"size\" of the load.\n     * @property total\n     * @type {Number}\n     * @default 1\n     */\n\n    this.total = total == null ? 1 : total;\n    /**\n     * The percentage (out of 1) that the load has been completed. This is calculated using `loaded/total`.\n     * @property progress\n     * @type {Number}\n     * @default 0\n     */\n\n    this.progress = total == 0 ? 0 : this.loaded / this.total;\n  }\n\n  ;\n  var p = createjs.extend(ProgressEvent, createjs.Event);\n  /**\n   * Returns a clone of the ProgressEvent instance.\n   * @method clone\n   * @return {ProgressEvent} a clone of the Event instance.\n   **/\n\n  p.clone = function () {\n    return new createjs.ProgressEvent(this.loaded, this.total);\n  };\n\n  createjs.ProgressEvent = createjs.promote(ProgressEvent, \"Event\");\n})(window); //##############################################################################\n// json3.js\n//##############################################################################\n\n/*! JSON v3.3.2 | http://bestiejs.github.io/json3 | Copyright 2012-2014, Kit Cambridge | http://kit.mit-license.org */\n\n\n;\n(function () {\n  // Detect the `define` function exposed by asynchronous module loaders. The\n  // strict `define` check is necessary for compatibility with `r.js`.\n  var isLoader = typeof define === \"function\" && define.amd; // A set of types used to distinguish objects from primitives.\n\n  var objectTypes = {\n    \"function\": true,\n    \"object\": true\n  }; // Detect the `exports` object exposed by CommonJS implementations.\n\n  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports; // Use the `global` object exposed by Node (including Browserify via\n  // `insert-module-globals`), Narwhal, and Ringo as the default context,\n  // and the `window` object in browsers. Rhino exports a `global` function\n  // instead.\n\n  var root = objectTypes[typeof window] && window || this,\n      freeGlobal = freeExports && objectTypes[typeof module] && module && !module.nodeType && typeof global == \"object\" && global;\n\n  if (freeGlobal && (freeGlobal[\"global\"] === freeGlobal || freeGlobal[\"window\"] === freeGlobal || freeGlobal[\"self\"] === freeGlobal)) {\n    root = freeGlobal;\n  } // Public: Initializes JSON 3 using the given `context` object, attaching the\n  // `stringify` and `parse` functions to the specified `exports` object.\n\n\n  function runInContext(context, exports) {\n    context || (context = root[\"Object\"]());\n    exports || (exports = root[\"Object\"]()); // Native constructor aliases.\n\n    var Number = context[\"Number\"] || root[\"Number\"],\n        String = context[\"String\"] || root[\"String\"],\n        Object = context[\"Object\"] || root[\"Object\"],\n        Date = context[\"Date\"] || root[\"Date\"],\n        SyntaxError = context[\"SyntaxError\"] || root[\"SyntaxError\"],\n        TypeError = context[\"TypeError\"] || root[\"TypeError\"],\n        Math = context[\"Math\"] || root[\"Math\"],\n        nativeJSON = context[\"JSON\"] || root[\"JSON\"]; // Delegate to the native `stringify` and `parse` implementations.\n\n    if (typeof nativeJSON == \"object\" && nativeJSON) {\n      exports.stringify = nativeJSON.stringify;\n      exports.parse = nativeJSON.parse;\n    } // Convenience aliases.\n\n\n    var objectProto = Object.prototype,\n        getClass = objectProto.toString,\n        isProperty,\n        forEach,\n        undef; // Test the `Date#getUTC*` methods. Based on work by @Yaffle.\n\n    var isExtended = new Date(-3509827334573292);\n\n    try {\n      // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical\n      // results for certain dates in Opera >= 10.53.\n      isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 && // Safari < 2.0.2 stores the internal millisecond time value correctly,\n      // but clips the values returned by the date methods to the range of\n      // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).\n      isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;\n    } catch (exception) {} // Internal: Determines whether the native `JSON.stringify` and `parse`\n    // implementations are spec-compliant. Based on work by Ken Snyder.\n\n\n    function has(name) {\n      if (has[name] !== undef) {\n        // Return cached feature test result.\n        return has[name];\n      }\n\n      var isSupported;\n\n      if (name == \"bug-string-char-index\") {\n        // IE <= 7 doesn't support accessing string characters using square\n        // bracket notation. IE 8 only supports this for primitives.\n        isSupported = \"a\"[0] != \"a\";\n      } else if (name == \"json\") {\n        // Indicates whether both `JSON.stringify` and `JSON.parse` are\n        // supported.\n        isSupported = has(\"json-stringify\") && has(\"json-parse\");\n      } else {\n        var value,\n            serialized = '{\"a\":[1,true,false,null,\"\\\\u0000\\\\b\\\\n\\\\f\\\\r\\\\t\"]}'; // Test `JSON.stringify`.\n\n        if (name == \"json-stringify\") {\n          var stringify = exports.stringify,\n              stringifySupported = typeof stringify == \"function\" && isExtended;\n\n          if (stringifySupported) {\n            // A test function object with a custom `toJSON` method.\n            (value = function () {\n              return 1;\n            }).toJSON = value;\n\n            try {\n              stringifySupported = // Firefox 3.1b1 and b2 serialize string, number, and boolean\n              // primitives as object literals.\n              stringify(0) === \"0\" && // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object\n              // literals.\n              stringify(new Number()) === \"0\" && stringify(new String()) == '\"\"' && // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or\n              // does not define a canonical JSON representation (this applies to\n              // objects with `toJSON` properties as well, *unless* they are nested\n              // within an object or array).\n              stringify(getClass) === undef && // IE 8 serializes `undefined` as `\"undefined\"`. Safari <= 5.1.7 and\n              // FF 3.1b3 pass this test.\n              stringify(undef) === undef && // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,\n              // respectively, if the value is omitted entirely.\n              stringify() === undef && // FF 3.1b1, 2 throw an error if the given value is not a number,\n              // string, array, object, Boolean, or `null` literal. This applies to\n              // objects with custom `toJSON` methods as well, unless they are nested\n              // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`\n              // methods entirely.\n              stringify(value) === \"1\" && stringify([value]) == \"[1]\" && // Prototype <= 1.6.1 serializes `[undefined]` as `\"[]\"` instead of\n              // `\"[null]\"`.\n              stringify([undef]) == \"[null]\" && // YUI 3.0.0b1 fails to serialize `null` literals.\n              stringify(null) == \"null\" && // FF 3.1b1, 2 halts serialization if an array contains a function:\n              // `[1, true, getClass, 1]` serializes as \"[1,true,],\". FF 3.1b3\n              // elides non-JSON values from objects and arrays, unless they\n              // define custom `toJSON` methods.\n              stringify([undef, getClass, null]) == \"[null,null,null]\" && // Simple serialization test. FF 3.1b1 uses Unicode escape sequences\n              // where character escape codes are expected (e.g., `\\b` => `\\u0008`).\n              stringify({\n                \"a\": [value, true, false, null, \"\\x00\\b\\n\\f\\r\\t\"]\n              }) == serialized && // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.\n              stringify(null, value) === \"1\" && stringify([1, 2], null, 1) == \"[\\n 1,\\n 2\\n]\" && // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly\n              // serialize extended years.\n              stringify(new Date(-8.64e15)) == '\"-271821-04-20T00:00:00.000Z\"' && // The milliseconds are optional in ES 5, but required in 5.1.\n              stringify(new Date(8.64e15)) == '\"+275760-09-13T00:00:00.000Z\"' && // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative\n              // four-digit years instead of six-digit years. Credits: @Yaffle.\n              stringify(new Date(-621987552e5)) == '\"-000001-01-01T00:00:00.000Z\"' && // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond\n              // values less than 1000. Credits: @Yaffle.\n              stringify(new Date(-1)) == '\"1969-12-31T23:59:59.999Z\"';\n            } catch (exception) {\n              stringifySupported = false;\n            }\n          }\n\n          isSupported = stringifySupported;\n        } // Test `JSON.parse`.\n\n\n        if (name == \"json-parse\") {\n          var parse = exports.parse;\n\n          if (typeof parse == \"function\") {\n            try {\n              // FF 3.1b1, b2 will throw an exception if a bare literal is provided.\n              // Conforming implementations should also coerce the initial argument to\n              // a string prior to parsing.\n              if (parse(\"0\") === 0 && !parse(false)) {\n                // Simple parsing test.\n                value = parse(serialized);\n                var parseSupported = value[\"a\"].length == 5 && value[\"a\"][0] === 1;\n\n                if (parseSupported) {\n                  try {\n                    // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.\n                    parseSupported = !parse('\"\\t\"');\n                  } catch (exception) {}\n\n                  if (parseSupported) {\n                    try {\n                      // FF 4.0 and 4.0.1 allow leading `+` signs and leading\n                      // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow\n                      // certain octal literals.\n                      parseSupported = parse(\"01\") !== 1;\n                    } catch (exception) {}\n                  }\n\n                  if (parseSupported) {\n                    try {\n                      // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal\n                      // points. These environments, along with FF 3.1b1 and 2,\n                      // also allow trailing commas in JSON objects and arrays.\n                      parseSupported = parse(\"1.\") !== 1;\n                    } catch (exception) {}\n                  }\n                }\n              }\n            } catch (exception) {\n              parseSupported = false;\n            }\n          }\n\n          isSupported = parseSupported;\n        }\n      }\n\n      return has[name] = !!isSupported;\n    }\n\n    if (!has(\"json\")) {\n      // Common `[[Class]]` name aliases.\n      var functionClass = \"[object Function]\",\n          dateClass = \"[object Date]\",\n          numberClass = \"[object Number]\",\n          stringClass = \"[object String]\",\n          arrayClass = \"[object Array]\",\n          booleanClass = \"[object Boolean]\"; // Detect incomplete support for accessing string characters by index.\n\n      var charIndexBuggy = has(\"bug-string-char-index\"); // Define additional utility methods if the `Date` methods are buggy.\n\n      if (!isExtended) {\n        var floor = Math.floor; // A mapping between the months of the year and the number of days between\n        // January 1st and the first of the respective month.\n\n        var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334]; // Internal: Calculates the number of days between the Unix epoch and the\n        // first day of the given month.\n\n        var getDay = function (year, month) {\n          return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);\n        };\n      } // Internal: Determines if a property is a direct property of the given\n      // object. Delegates to the native `Object#hasOwnProperty` method.\n\n\n      if (!(isProperty = objectProto.hasOwnProperty)) {\n        isProperty = function (property) {\n          var members = {},\n              constructor;\n\n          if ((members.__proto__ = null, members.__proto__ = {\n            // The *proto* property cannot be set multiple times in recent\n            // versions of Firefox and SeaMonkey.\n            \"toString\": 1\n          }, members).toString != getClass) {\n            // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but\n            // supports the mutable *proto* property.\n            isProperty = function (property) {\n              // Capture and break the object's prototype chain (see section 8.6.2\n              // of the ES 5.1 spec). The parenthesized expression prevents an\n              // unsafe transformation by the Closure Compiler.\n              var original = this.__proto__,\n                  result = (property in (this.__proto__ = null, this)); // Restore the original prototype chain.\n\n              this.__proto__ = original;\n              return result;\n            };\n          } else {\n            // Capture a reference to the top-level `Object` constructor.\n            constructor = members.constructor; // Use the `constructor` property to simulate `Object#hasOwnProperty` in\n            // other environments.\n\n            isProperty = function (property) {\n              var parent = (this.constructor || constructor).prototype;\n              return property in this && !(property in parent && this[property] === parent[property]);\n            };\n          }\n\n          members = null;\n          return isProperty.call(this, property);\n        };\n      } // Internal: Normalizes the `for...in` iteration algorithm across\n      // environments. Each enumerated key is yielded to a `callback` function.\n\n\n      forEach = function (object, callback) {\n        var size = 0,\n            Properties,\n            members,\n            property; // Tests for bugs in the current environment's `for...in` algorithm. The\n        // `valueOf` property inherits the non-enumerable flag from\n        // `Object.prototype` in older versions of IE, Netscape, and Mozilla.\n\n        (Properties = function () {\n          this.valueOf = 0;\n        }).prototype.valueOf = 0; // Iterate over a new instance of the `Properties` class.\n\n        members = new Properties();\n\n        for (property in members) {\n          // Ignore all properties inherited from `Object.prototype`.\n          if (isProperty.call(members, property)) {\n            size++;\n          }\n        }\n\n        Properties = members = null; // Normalize the iteration algorithm.\n\n        if (!size) {\n          // A list of non-enumerable properties inherited from `Object.prototype`.\n          members = [\"valueOf\", \"toString\", \"toLocaleString\", \"propertyIsEnumerable\", \"isPrototypeOf\", \"hasOwnProperty\", \"constructor\"]; // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable\n          // properties.\n\n          forEach = function (object, callback) {\n            var isFunction = getClass.call(object) == functionClass,\n                property,\n                length;\n            var hasProperty = !isFunction && typeof object.constructor != \"function\" && objectTypes[typeof object.hasOwnProperty] && object.hasOwnProperty || isProperty;\n\n            for (property in object) {\n              // Gecko <= 1.0 enumerates the `prototype` property of functions under\n              // certain conditions; IE does not.\n              if (!(isFunction && property == \"prototype\") && hasProperty.call(object, property)) {\n                callback(property);\n              }\n            } // Manually invoke the callback for each non-enumerable property.\n\n\n            for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property));\n          };\n        } else if (size == 2) {\n          // Safari <= 2.0.4 enumerates shadowed properties twice.\n          forEach = function (object, callback) {\n            // Create a set of iterated properties.\n            var members = {},\n                isFunction = getClass.call(object) == functionClass,\n                property;\n\n            for (property in object) {\n              // Store each property name to prevent double enumeration. The\n              // `prototype` property of functions is not enumerated due to cross-\n              // environment inconsistencies.\n              if (!(isFunction && property == \"prototype\") && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {\n                callback(property);\n              }\n            }\n          };\n        } else {\n          // No bugs detected; use the standard `for...in` algorithm.\n          forEach = function (object, callback) {\n            var isFunction = getClass.call(object) == functionClass,\n                property,\n                isConstructor;\n\n            for (property in object) {\n              if (!(isFunction && property == \"prototype\") && isProperty.call(object, property) && !(isConstructor = property === \"constructor\")) {\n                callback(property);\n              }\n            } // Manually invoke the callback for the `constructor` property due to\n            // cross-environment inconsistencies.\n\n\n            if (isConstructor || isProperty.call(object, property = \"constructor\")) {\n              callback(property);\n            }\n          };\n        }\n\n        return forEach(object, callback);\n      }; // Public: Serializes a JavaScript `value` as a JSON string. The optional\n      // `filter` argument may specify either a function that alters how object and\n      // array members are serialized, or an array of strings and numbers that\n      // indicates which properties should be serialized. The optional `width`\n      // argument may be either a string or number that specifies the indentation\n      // level of the output.\n\n\n      if (!has(\"json-stringify\")) {\n        // Internal: A map of control characters and their escaped equivalents.\n        var Escapes = {\n          92: \"\\\\\\\\\",\n          34: '\\\\\"',\n          8: \"\\\\b\",\n          12: \"\\\\f\",\n          10: \"\\\\n\",\n          13: \"\\\\r\",\n          9: \"\\\\t\"\n        }; // Internal: Converts `value` into a zero-padded string such that its\n        // length is at least equal to `width`. The `width` must be <= 6.\n\n        var leadingZeroes = \"000000\";\n\n        var toPaddedString = function (width, value) {\n          // The `|| 0` expression is necessary to work around a bug in\n          // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== \"0\"`.\n          return (leadingZeroes + (value || 0)).slice(-width);\n        }; // Internal: Double-quotes a string `value`, replacing all ASCII control\n        // characters (characters with code unit values between 0 and 31) with\n        // their escaped equivalents. This is an implementation of the\n        // `Quote(value)` operation defined in ES 5.1 section 15.12.3.\n\n\n        var unicodePrefix = \"\\\\u00\";\n\n        var quote = function (value) {\n          var result = '\"',\n              index = 0,\n              length = value.length,\n              useCharIndex = !charIndexBuggy || length > 10;\n          var symbols = useCharIndex && (charIndexBuggy ? value.split(\"\") : value);\n\n          for (; index < length; index++) {\n            var charCode = value.charCodeAt(index); // If the character is a control character, append its Unicode or\n            // shorthand escape sequence; otherwise, append the character as-is.\n\n            switch (charCode) {\n              case 8:\n              case 9:\n              case 10:\n              case 12:\n              case 13:\n              case 34:\n              case 92:\n                result += Escapes[charCode];\n                break;\n\n              default:\n                if (charCode < 32) {\n                  result += unicodePrefix + toPaddedString(2, charCode.toString(16));\n                  break;\n                }\n\n                result += useCharIndex ? symbols[index] : value.charAt(index);\n            }\n          }\n\n          return result + '\"';\n        }; // Internal: Recursively serializes an object. Implements the\n        // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.\n\n\n        var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {\n          var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;\n\n          try {\n            // Necessary for host object support.\n            value = object[property];\n          } catch (exception) {}\n\n          if (typeof value == \"object\" && value) {\n            className = getClass.call(value);\n\n            if (className == dateClass && !isProperty.call(value, \"toJSON\")) {\n              if (value > -1 / 0 && value < 1 / 0) {\n                // Dates are serialized according to the `Date#toJSON` method\n                // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15\n                // for the ISO 8601 date time string format.\n                if (getDay) {\n                  // Manually compute the year, month, date, hours, minutes,\n                  // seconds, and milliseconds if the `getUTC*` methods are\n                  // buggy. Adapted from @Yaffle's `date-shim` project.\n                  date = floor(value / 864e5);\n\n                  for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);\n\n                  for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);\n\n                  date = 1 + date - getDay(year, month); // The `time` value specifies the time within the day (see ES\n                  // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used\n                  // to compute `A modulo B`, as the `%` operator does not\n                  // correspond to the `modulo` operation for negative numbers.\n\n                  time = (value % 864e5 + 864e5) % 864e5; // The hours, minutes, seconds, and milliseconds are obtained by\n                  // decomposing the time within the day. See section 15.9.1.10.\n\n                  hours = floor(time / 36e5) % 24;\n                  minutes = floor(time / 6e4) % 60;\n                  seconds = floor(time / 1e3) % 60;\n                  milliseconds = time % 1e3;\n                } else {\n                  year = value.getUTCFullYear();\n                  month = value.getUTCMonth();\n                  date = value.getUTCDate();\n                  hours = value.getUTCHours();\n                  minutes = value.getUTCMinutes();\n                  seconds = value.getUTCSeconds();\n                  milliseconds = value.getUTCMilliseconds();\n                } // Serialize extended years correctly.\n\n\n                value = (year <= 0 || year >= 1e4 ? (year < 0 ? \"-\" : \"+\") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) + \"-\" + toPaddedString(2, month + 1) + \"-\" + toPaddedString(2, date) + // Months, dates, hours, minutes, and seconds should have two\n                // digits; milliseconds should have three.\n                \"T\" + toPaddedString(2, hours) + \":\" + toPaddedString(2, minutes) + \":\" + toPaddedString(2, seconds) + // Milliseconds are optional in ES 5.0, but required in 5.1.\n                \".\" + toPaddedString(3, milliseconds) + \"Z\";\n              } else {\n                value = null;\n              }\n            } else if (typeof value.toJSON == \"function\" && (className != numberClass && className != stringClass && className != arrayClass || isProperty.call(value, \"toJSON\"))) {\n              // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the\n              // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3\n              // ignores all `toJSON` methods on these objects unless they are\n              // defined directly on an instance.\n              value = value.toJSON(property);\n            }\n          }\n\n          if (callback) {\n            // If a replacement function was provided, call it to obtain the value\n            // for serialization.\n            value = callback.call(object, property, value);\n          }\n\n          if (value === null) {\n            return \"null\";\n          }\n\n          className = getClass.call(value);\n\n          if (className == booleanClass) {\n            // Booleans are represented literally.\n            return \"\" + value;\n          } else if (className == numberClass) {\n            // JSON numbers must be finite. `Infinity` and `NaN` are serialized as\n            // `\"null\"`.\n            return value > -1 / 0 && value < 1 / 0 ? \"\" + value : \"null\";\n          } else if (className == stringClass) {\n            // Strings are double-quoted and escaped.\n            return quote(\"\" + value);\n          } // Recursively serialize objects and arrays.\n\n\n          if (typeof value == \"object\") {\n            // Check for cyclic structures. This is a linear search; performance\n            // is inversely proportional to the number of unique nested objects.\n            for (length = stack.length; length--;) {\n              if (stack[length] === value) {\n                // Cyclic structures cannot be serialized by `JSON.stringify`.\n                throw TypeError();\n              }\n            } // Add the object to the stack of traversed objects.\n\n\n            stack.push(value);\n            results = []; // Save the current indentation level and indent one additional level.\n\n            prefix = indentation;\n            indentation += whitespace;\n\n            if (className == arrayClass) {\n              // Recursively serialize array elements.\n              for (index = 0, length = value.length; index < length; index++) {\n                element = serialize(index, value, callback, properties, whitespace, indentation, stack);\n                results.push(element === undef ? \"null\" : element);\n              }\n\n              result = results.length ? whitespace ? \"[\\n\" + indentation + results.join(\",\\n\" + indentation) + \"\\n\" + prefix + \"]\" : \"[\" + results.join(\",\") + \"]\" : \"[]\";\n            } else {\n              // Recursively serialize object members. Members are selected from\n              // either a user-specified list of property names, or the object\n              // itself.\n              forEach(properties || value, function (property) {\n                var element = serialize(property, value, callback, properties, whitespace, indentation, stack);\n\n                if (element !== undef) {\n                  // According to ES 5.1 section 15.12.3: \"If `gap` {whitespace}\n                  // is not the empty string, let `member` {quote(property) + \":\"}\n                  // be the concatenation of `member` and the `space` character.\"\n                  // The \"`space` character\" refers to the literal space\n                  // character, not the `space` {width} argument provided to\n                  // `JSON.stringify`.\n                  results.push(quote(property) + \":\" + (whitespace ? \" \" : \"\") + element);\n                }\n              });\n              result = results.length ? whitespace ? \"{\\n\" + indentation + results.join(\",\\n\" + indentation) + \"\\n\" + prefix + \"}\" : \"{\" + results.join(\",\") + \"}\" : \"{}\";\n            } // Remove the object from the traversed object stack.\n\n\n            stack.pop();\n            return result;\n          }\n        }; // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.\n\n\n        exports.stringify = function (source, filter, width) {\n          var whitespace, callback, properties, className;\n\n          if (objectTypes[typeof filter] && filter) {\n            if ((className = getClass.call(filter)) == functionClass) {\n              callback = filter;\n            } else if (className == arrayClass) {\n              // Convert the property names array into a makeshift set.\n              properties = {};\n\n              for (var index = 0, length = filter.length, value; index < length; value = filter[index++], (className = getClass.call(value), className == stringClass || className == numberClass) && (properties[value] = 1));\n            }\n          }\n\n          if (width) {\n            if ((className = getClass.call(width)) == numberClass) {\n              // Convert the `width` to an integer and create a string containing\n              // `width` number of space characters.\n              if ((width -= width % 1) > 0) {\n                for (whitespace = \"\", width > 10 && (width = 10); whitespace.length < width; whitespace += \" \");\n              }\n            } else if (className == stringClass) {\n              whitespace = width.length <= 10 ? width : width.slice(0, 10);\n            }\n          } // Opera <= 7.54u2 discards the values associated with empty string keys\n          // (`\"\"`) only if they are used directly within an object member list\n          // (e.g., `!(\"\" in { \"\": 1})`).\n\n\n          return serialize(\"\", (value = {}, value[\"\"] = source, value), callback, properties, whitespace, \"\", []);\n        };\n      } // Public: Parses a JSON source string.\n\n\n      if (!has(\"json-parse\")) {\n        var fromCharCode = String.fromCharCode; // Internal: A map of escaped control characters and their unescaped\n        // equivalents.\n\n        var Unescapes = {\n          92: \"\\\\\",\n          34: '\"',\n          47: \"/\",\n          98: \"\\b\",\n          116: \"\\t\",\n          110: \"\\n\",\n          102: \"\\f\",\n          114: \"\\r\"\n        }; // Internal: Stores the parser state.\n\n        var Index, Source; // Internal: Resets the parser state and throws a `SyntaxError`.\n\n        var abort = function () {\n          Index = Source = null;\n          throw SyntaxError();\n        }; // Internal: Returns the next token, or `\"$\"` if the parser has reached\n        // the end of the source string. A token may be a string, number, `null`\n        // literal, or Boolean literal.\n\n\n        var lex = function () {\n          var source = Source,\n              length = source.length,\n              value,\n              begin,\n              position,\n              isSigned,\n              charCode;\n\n          while (Index < length) {\n            charCode = source.charCodeAt(Index);\n\n            switch (charCode) {\n              case 9:\n              case 10:\n              case 13:\n              case 32:\n                // Skip whitespace tokens, including tabs, carriage returns, line\n                // feeds, and space characters.\n                Index++;\n                break;\n\n              case 123:\n              case 125:\n              case 91:\n              case 93:\n              case 58:\n              case 44:\n                // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at\n                // the current position.\n                value = charIndexBuggy ? source.charAt(Index) : source[Index];\n                Index++;\n                return value;\n\n              case 34:\n                // `\"` delimits a JSON string; advance to the next character and\n                // begin parsing the string. String tokens are prefixed with the\n                // sentinel `@` character to distinguish them from punctuators and\n                // end-of-string tokens.\n                for (value = \"@\", Index++; Index < length;) {\n                  charCode = source.charCodeAt(Index);\n\n                  if (charCode < 32) {\n                    // Unescaped ASCII control characters (those with a code unit\n                    // less than the space character) are not permitted.\n                    abort();\n                  } else if (charCode == 92) {\n                    // A reverse solidus (`\\`) marks the beginning of an escaped\n                    // control character (including `\"`, `\\`, and `/`) or Unicode\n                    // escape sequence.\n                    charCode = source.charCodeAt(++Index);\n\n                    switch (charCode) {\n                      case 92:\n                      case 34:\n                      case 47:\n                      case 98:\n                      case 116:\n                      case 110:\n                      case 102:\n                      case 114:\n                        // Revive escaped control characters.\n                        value += Unescapes[charCode];\n                        Index++;\n                        break;\n\n                      case 117:\n                        // `\\u` marks the beginning of a Unicode escape sequence.\n                        // Advance to the first character and validate the\n                        // four-digit code point.\n                        begin = ++Index;\n\n                        for (position = Index + 4; Index < position; Index++) {\n                          charCode = source.charCodeAt(Index); // A valid sequence comprises four hexdigits (case-\n                          // insensitive) that form a single hexadecimal value.\n\n                          if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {\n                            // Invalid Unicode escape sequence.\n                            abort();\n                          }\n                        } // Revive the escaped character.\n\n\n                        value += fromCharCode(\"0x\" + source.slice(begin, Index));\n                        break;\n\n                      default:\n                        // Invalid escape sequence.\n                        abort();\n                    }\n                  } else {\n                    if (charCode == 34) {\n                      // An unescaped double-quote character marks the end of the\n                      // string.\n                      break;\n                    }\n\n                    charCode = source.charCodeAt(Index);\n                    begin = Index; // Optimize for the common case where a string is valid.\n\n                    while (charCode >= 32 && charCode != 92 && charCode != 34) {\n                      charCode = source.charCodeAt(++Index);\n                    } // Append the string as-is.\n\n\n                    value += source.slice(begin, Index);\n                  }\n                }\n\n                if (source.charCodeAt(Index) == 34) {\n                  // Advance to the next character and return the revived string.\n                  Index++;\n                  return value;\n                } // Unterminated string.\n\n\n                abort();\n\n              default:\n                // Parse numbers and literals.\n                begin = Index; // Advance past the negative sign, if one is specified.\n\n                if (charCode == 45) {\n                  isSigned = true;\n                  charCode = source.charCodeAt(++Index);\n                } // Parse an integer or floating-point value.\n\n\n                if (charCode >= 48 && charCode <= 57) {\n                  // Leading zeroes are interpreted as octal literals.\n                  if (charCode == 48 && (charCode = source.charCodeAt(Index + 1), charCode >= 48 && charCode <= 57)) {\n                    // Illegal octal literal.\n                    abort();\n                  }\n\n                  isSigned = false; // Parse the integer component.\n\n                  for (; Index < length && (charCode = source.charCodeAt(Index), charCode >= 48 && charCode <= 57); Index++); // Floats cannot contain a leading decimal point; however, this\n                  // case is already accounted for by the parser.\n\n\n                  if (source.charCodeAt(Index) == 46) {\n                    position = ++Index; // Parse the decimal component.\n\n                    for (; position < length && (charCode = source.charCodeAt(position), charCode >= 48 && charCode <= 57); position++);\n\n                    if (position == Index) {\n                      // Illegal trailing decimal.\n                      abort();\n                    }\n\n                    Index = position;\n                  } // Parse exponents. The `e` denoting the exponent is\n                  // case-insensitive.\n\n\n                  charCode = source.charCodeAt(Index);\n\n                  if (charCode == 101 || charCode == 69) {\n                    charCode = source.charCodeAt(++Index); // Skip past the sign following the exponent, if one is\n                    // specified.\n\n                    if (charCode == 43 || charCode == 45) {\n                      Index++;\n                    } // Parse the exponential component.\n\n\n                    for (position = Index; position < length && (charCode = source.charCodeAt(position), charCode >= 48 && charCode <= 57); position++);\n\n                    if (position == Index) {\n                      // Illegal empty exponent.\n                      abort();\n                    }\n\n                    Index = position;\n                  } // Coerce the parsed value to a JavaScript number.\n\n\n                  return +source.slice(begin, Index);\n                } // A negative sign may only precede numbers.\n\n\n                if (isSigned) {\n                  abort();\n                } // `true`, `false`, and `null` literals.\n\n\n                if (source.slice(Index, Index + 4) == \"true\") {\n                  Index += 4;\n                  return true;\n                } else if (source.slice(Index, Index + 5) == \"false\") {\n                  Index += 5;\n                  return false;\n                } else if (source.slice(Index, Index + 4) == \"null\") {\n                  Index += 4;\n                  return null;\n                } // Unrecognized token.\n\n\n                abort();\n            }\n          } // Return the sentinel `$` character if the parser has reached the end\n          // of the source string.\n\n\n          return \"$\";\n        }; // Internal: Parses a JSON `value` token.\n\n\n        var get = function (value) {\n          var results, hasMembers;\n\n          if (value == \"$\") {\n            // Unexpected end of input.\n            abort();\n          }\n\n          if (typeof value == \"string\") {\n            if ((charIndexBuggy ? value.charAt(0) : value[0]) == \"@\") {\n              // Remove the sentinel `@` character.\n              return value.slice(1);\n            } // Parse object and array literals.\n\n\n            if (value == \"[\") {\n              // Parses a JSON array, returning a new JavaScript array.\n              results = [];\n\n              for (;; hasMembers || (hasMembers = true)) {\n                value = lex(); // A closing square bracket marks the end of the array literal.\n\n                if (value == \"]\") {\n                  break;\n                } // If the array literal contains elements, the current token\n                // should be a comma separating the previous element from the\n                // next.\n\n\n                if (hasMembers) {\n                  if (value == \",\") {\n                    value = lex();\n\n                    if (value == \"]\") {\n                      // Unexpected trailing `,` in array literal.\n                      abort();\n                    }\n                  } else {\n                    // A `,` must separate each array element.\n                    abort();\n                  }\n                } // Elisions and leading commas are not permitted.\n\n\n                if (value == \",\") {\n                  abort();\n                }\n\n                results.push(get(value));\n              }\n\n              return results;\n            } else if (value == \"{\") {\n              // Parses a JSON object, returning a new JavaScript object.\n              results = {};\n\n              for (;; hasMembers || (hasMembers = true)) {\n                value = lex(); // A closing curly brace marks the end of the object literal.\n\n                if (value == \"}\") {\n                  break;\n                } // If the object literal contains members, the current token\n                // should be a comma separator.\n\n\n                if (hasMembers) {\n                  if (value == \",\") {\n                    value = lex();\n\n                    if (value == \"}\") {\n                      // Unexpected trailing `,` in object literal.\n                      abort();\n                    }\n                  } else {\n                    // A `,` must separate each object member.\n                    abort();\n                  }\n                } // Leading commas are not permitted, object property names must be\n                // double-quoted strings, and a `:` must separate each property\n                // name and value.\n\n\n                if (value == \",\" || typeof value != \"string\" || (charIndexBuggy ? value.charAt(0) : value[0]) != \"@\" || lex() != \":\") {\n                  abort();\n                }\n\n                results[value.slice(1)] = get(lex());\n              }\n\n              return results;\n            } // Unexpected token encountered.\n\n\n            abort();\n          }\n\n          return value;\n        }; // Internal: Updates a traversed object member.\n\n\n        var update = function (source, property, callback) {\n          var element = walk(source, property, callback);\n\n          if (element === undef) {\n            delete source[property];\n          } else {\n            source[property] = element;\n          }\n        }; // Internal: Recursively traverses a parsed JSON object, invoking the\n        // `callback` function for each value. This is an implementation of the\n        // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.\n\n\n        var walk = function (source, property, callback) {\n          var value = source[property],\n              length;\n\n          if (typeof value == \"object\" && value) {\n            // `forEach` can't be used to traverse an array in Opera <= 8.54\n            // because its `Object#hasOwnProperty` implementation returns `false`\n            // for array indices (e.g., `![1, 2, 3].hasOwnProperty(\"0\")`).\n            if (getClass.call(value) == arrayClass) {\n              for (length = value.length; length--;) {\n                update(value, length, callback);\n              }\n            } else {\n              forEach(value, function (property) {\n                update(value, property, callback);\n              });\n            }\n          }\n\n          return callback.call(source, property, value);\n        }; // Public: `JSON.parse`. See ES 5.1 section 15.12.2.\n\n\n        exports.parse = function (source, callback) {\n          var result, value;\n          Index = 0;\n          Source = \"\" + source;\n          result = get(lex()); // If a JSON string contains multiple tokens, it is invalid.\n\n          if (lex() != \"$\") {\n            abort();\n          } // Reset the parser state.\n\n\n          Index = Source = null;\n          return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[\"\"] = result, value), \"\", callback) : result;\n        };\n      }\n    }\n\n    exports[\"runInContext\"] = runInContext;\n    return exports;\n  }\n\n  if (freeExports && !isLoader) {\n    // Export for CommonJS environments.\n    runInContext(root, freeExports);\n  } else {\n    // Export for web browsers and JavaScript engines.\n    var nativeJSON = root.JSON,\n        previousJSON = root[\"JSON3\"],\n        isRestored = false;\n    var JSON3 = runInContext(root, root[\"JSON3\"] = {\n      // Public: Restores the original value of the global `JSON` object and\n      // returns a reference to the `JSON3` object.\n      \"noConflict\": function () {\n        if (!isRestored) {\n          isRestored = true;\n          root.JSON = nativeJSON;\n          root[\"JSON3\"] = previousJSON;\n          nativeJSON = previousJSON = null;\n        }\n\n        return JSON3;\n      }\n    });\n    root.JSON = {\n      \"parse\": JSON3.parse,\n      \"stringify\": JSON3.stringify\n    };\n  } // Export for asynchronous module loaders.\n\n\n  if (isLoader) {\n    define(function () {\n      return JSON3;\n    });\n  }\n}).call(this); //##############################################################################\n// DomUtils.js\n//##############################################################################\n\n(function () {\n  /**\n   * A few utilities for interacting with the dom.\n   * @class DomUtils\n   */\n  var s = {};\n\n  s.appendToHead = function (el) {\n    s.getHead().appendChild(el);\n  };\n\n  s.getHead = function () {\n    return document.head || document.getElementsByTagName(\"head\")[0];\n  };\n\n  s.getBody = function () {\n    return document.body || document.getElementsByTagName(\"body\")[0];\n  };\n\n  createjs.DomUtils = s;\n})(); //##############################################################################\n// DataUtils.js\n//##############################################################################\n\n\n(function () {\n  /**\n   * A few data utilities for formatting different data types.\n   * @class DataUtils\n   */\n  var s = {}; // static methods\n\n  /**\n   * Parse XML using the DOM. This is required when preloading XML or SVG.\n   * @method parseXML\n   * @param {String} text The raw text or XML that is loaded by XHR.\n   * @param {String} type The mime type of the XML. Use \"text/xml\" for XML, and  \"image/svg+xml\" for SVG parsing.\n   * @return {XML} An XML document\n   * @static\n   */\n\n  s.parseXML = function (text, type) {\n    var xml = null; // CocoonJS does not support XML parsing with either method.\n    // Most browsers will use DOMParser\n    // IE fails on certain SVG files, so we have a fallback below.\n\n    try {\n      if (window.DOMParser) {\n        var parser = new DOMParser();\n        xml = parser.parseFromString(text, type);\n      }\n    } catch (e) {} // Fallback for IE support.\n\n\n    if (!xml) {\n      try {\n        xml = new ActiveXObject(\"Microsoft.XMLDOM\");\n        xml.async = false;\n        xml.loadXML(text);\n      } catch (e) {\n        xml = null;\n      }\n    }\n\n    return xml;\n  };\n  /**\n   * Parse a string into an Object.\n   * @method parseJSON\n   * @param {String} value The loaded JSON string\n   * @returns {Object} A JavaScript object.\n   */\n\n\n  s.parseJSON = function (value) {\n    if (value == null) {\n      return null;\n    }\n\n    try {\n      return JSON.parse(value);\n    } catch (e) {\n      // TODO; Handle this with a custom error?\n      throw e;\n    }\n  };\n\n  createjs.DataUtils = s;\n})(); //##############################################################################\n// LoadItem.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\";\n  /**\n   * All loaders accept an item containing the properties defined in this class. If a raw object is passed instead,\n   * it will not be affected, but it must contain at least a {{#crossLink \"src:property\"}}{{/crossLink}} property. A\n   * string path or HTML tag is also acceptable, but it will be automatically converted to a LoadItem using the\n   * {{#crossLink \"create\"}}{{/crossLink}} method by {{#crossLink \"AbstractLoader\"}}{{/crossLink}}\n   * @class LoadItem\n   * @constructor\n   * @since 0.6.0\n   */\n\n  function LoadItem() {\n    /**\n     * The source of the file that is being loaded. This property is <b>required</b>. The source can either be a\n     * string (recommended), or an HTML tag.\n     * This can also be an object, but in that case it has to include a type and be handled by a plugin.\n     * @property src\n     * @type {String}\n     * @default null\n     */\n    this.src = null;\n    /**\n     * The type file that is being loaded. The type of the file is usually inferred by the extension, but can also\n     * be set manually. This is helpful in cases where a file does not have an extension.\n     * @property type\n     * @type {String}\n     * @default null\n     */\n\n    this.type = null;\n    /**\n     * A string identifier which can be used to reference the loaded object. If none is provided, this will be\n     * automatically set to the {{#crossLink \"src:property\"}}{{/crossLink}}.\n     * @property id\n     * @type {String}\n     * @default null\n     */\n\n    this.id = null;\n    /**\n     * Determines if a manifest will maintain the order of this item, in relation to other items in the manifest\n     * that have also set the `maintainOrder` property to `true`. This only applies when the max connections has\n     * been set above 1 (using {{#crossLink \"LoadQueue/setMaxConnections\"}}{{/crossLink}}). Everything with this\n     * property set to `false` will finish as it is loaded. Ordered items are combined with script tags loading in\n     * order when {{#crossLink \"LoadQueue/maintainScriptOrder:property\"}}{{/crossLink}} is set to `true`.\n     * @property maintainOrder\n     * @type {Boolean}\n     * @default false\n     */\n\n    this.maintainOrder = false;\n    /**\n     * A callback used by JSONP requests that defines what global method to call when the JSONP content is loaded.\n     * @property callback\n     * @type {String}\n     * @default null\n     */\n\n    this.callback = null;\n    /**\n     * An arbitrary data object, which is included with the loaded object.\n     * @property data\n     * @type {Object}\n     * @default null\n     */\n\n    this.data = null;\n    /**\n     * The request method used for HTTP calls. Both {{#crossLink \"AbstractLoader/GET:property\"}}{{/crossLink}} or\n     * {{#crossLink \"AbstractLoader/POST:property\"}}{{/crossLink}} request types are supported, and are defined as\n     * constants on {{#crossLink \"AbstractLoader\"}}{{/crossLink}}.\n     * @property method\n     * @type {String}\n     * @default get\n     */\n\n    this.method = createjs.LoadItem.GET;\n    /**\n     * An object hash of name/value pairs to send to the server.\n     * @property values\n     * @type {Object}\n     * @default null\n     */\n\n    this.values = null;\n    /**\n     * An object hash of headers to attach to an XHR request. PreloadJS will automatically attach some default\n     * headers when required, including \"Origin\", \"Content-Type\", and \"X-Requested-With\". You may override the\n     * default headers by including them in your headers object.\n     * @property headers\n     * @type {Object}\n     * @default null\n     */\n\n    this.headers = null;\n    /**\n     * Enable credentials for XHR requests.\n     * @property withCredentials\n     * @type {Boolean}\n     * @default false\n     */\n\n    this.withCredentials = false;\n    /**\n     * Set the mime type of XHR-based requests. This is automatically set to \"text/plain; charset=utf-8\" for text\n     * based files (json, xml, text, css, js).\n     * @property mimeType\n     * @type {String}\n     * @default null\n     */\n\n    this.mimeType = null;\n    /**\n     * Sets the crossOrigin attribute for CORS-enabled images loading cross-domain.\n     * @property crossOrigin\n     * @type {boolean}\n     * @default Anonymous\n     */\n\n    this.crossOrigin = null;\n    /**\n     * The duration in milliseconds to wait before a request times out. This only applies to tag-based and and XHR\n     * (level one) loading, as XHR (level 2) provides its own timeout event.\n     * @property loadTimeout\n     * @type {Number}\n     * @default 8000 (8 seconds)\n     */\n\n    this.loadTimeout = s.LOAD_TIMEOUT_DEFAULT;\n  }\n\n  ;\n  var p = LoadItem.prototype = {};\n  var s = LoadItem;\n  /**\n   * Default duration in milliseconds to wait before a request times out. This only applies to tag-based and and XHR\n   * (level one) loading, as XHR (level 2) provides its own timeout event.\n   * @property LOAD_TIMEOUT_DEFAULT\n   * @type {number}\n   * @static\n   */\n\n  s.LOAD_TIMEOUT_DEFAULT = 8000;\n  /**\n   * Create a LoadItem.\n   * <ul>\n   *     <li>String-based items are converted to a LoadItem with a populated {{#crossLink \"src:property\"}}{{/crossLink}}.</li>\n   *     <li>LoadItem instances are returned as-is</li>\n   *     <li>Objects are returned with any needed properties added</li>\n   * </ul>\n   * @method create\n   * @param {LoadItem|String|Object} value The load item value\n   * @returns {LoadItem|Object}\n   * @static\n   */\n\n  s.create = function (value) {\n    if (typeof value == \"string\") {\n      var item = new LoadItem();\n      item.src = value;\n      return item;\n    } else if (value instanceof s) {\n      return value;\n    } else if (value instanceof Object && value.src) {\n      if (value.loadTimeout == null) {\n        value.loadTimeout = s.LOAD_TIMEOUT_DEFAULT;\n      }\n\n      return value;\n    } else {\n      throw new Error(\"Type not recognized.\");\n    }\n  };\n  /**\n   * Provides a chainable shortcut method for setting a number of properties on the instance.\n   *\n   * <h4>Example</h4>\n   *\n   *      var loadItem = new createjs.LoadItem().set({src:\"image.png\", maintainOrder:true});\n   *\n   * @method set\n   * @param {Object} props A generic object containing properties to copy to the LoadItem instance.\n   * @return {LoadItem} Returns the instance the method is called on (useful for chaining calls.)\n  */\n\n\n  p.set = function (props) {\n    for (var n in props) {\n      this[n] = props[n];\n    }\n\n    return this;\n  };\n\n  createjs.LoadItem = s;\n})(); //##############################################################################\n// RequestUtils.js\n//##############################################################################\n\n\n(function () {\n  /**\n   * Utilities that assist with parsing load items, and determining file types, etc.\n   * @class RequestUtils\n   */\n  var s = {};\n  /**\n   * The Regular Expression used to test file URLS for an absolute path.\n   * @property ABSOLUTE_PATH\n   * @type {RegExp}\n   * @static\n   */\n\n  s.ABSOLUTE_PATT = /^(?:\\w+:)?\\/{2}/i;\n  /**\n   * The Regular Expression used to test file URLS for a relative path.\n   * @property RELATIVE_PATH\n   * @type {RegExp}\n   * @static\n   */\n\n  s.RELATIVE_PATT = /^[./]*?\\//i;\n  /**\n   * The Regular Expression used to test file URLS for an extension. Note that URIs must already have the query string\n   * removed.\n   * @property EXTENSION_PATT\n   * @type {RegExp}\n   * @static\n   */\n\n  s.EXTENSION_PATT = /\\/?[^/]+\\.(\\w{1,5})$/i;\n  /**\n   * Parse a file path to determine the information we need to work with it. Currently, PreloadJS needs to know:\n   * <ul>\n   *     <li>If the path is absolute. Absolute paths start with a protocol (such as `http://`, `file://`, or\n   *     `//networkPath`)</li>\n   *     <li>If the path is relative. Relative paths start with `../` or `/path` (or similar)</li>\n   *     <li>The file extension. This is determined by the filename with an extension. Query strings are dropped, and\n   *     the file path is expected to follow the format `name.ext`.</li>\n   * </ul>\n   * @method parseURI\n   * @param {String} path\n   * @returns {Object} An Object with an `absolute` and `relative` Boolean values, as well as an optional 'extension`\n   * property, which is the lowercase extension.\n   * @static\n   */\n\n  s.parseURI = function (path) {\n    var info = {\n      absolute: false,\n      relative: false\n    };\n\n    if (path == null) {\n      return info;\n    } // Drop the query string\n\n\n    var queryIndex = path.indexOf(\"?\");\n\n    if (queryIndex > -1) {\n      path = path.substr(0, queryIndex);\n    } // Absolute\n\n\n    var match;\n\n    if (s.ABSOLUTE_PATT.test(path)) {\n      info.absolute = true; // Relative\n    } else if (s.RELATIVE_PATT.test(path)) {\n      info.relative = true;\n    } // Extension\n\n\n    if (match = path.match(s.EXTENSION_PATT)) {\n      info.extension = match[1].toLowerCase();\n    }\n\n    return info;\n  };\n  /**\n   * Formats an object into a query string for either a POST or GET request.\n   * @method formatQueryString\n   * @param {Object} data The data to convert to a query string.\n   * @param {Array} [query] Existing name/value pairs to append on to this query.\n   * @static\n   */\n\n\n  s.formatQueryString = function (data, query) {\n    if (data == null) {\n      throw new Error('You must specify data.');\n    }\n\n    var params = [];\n\n    for (var n in data) {\n      params.push(n + '=' + escape(data[n]));\n    }\n\n    if (query) {\n      params = params.concat(query);\n    }\n\n    return params.join('&');\n  };\n  /**\n   * A utility method that builds a file path using a source and a data object, and formats it into a new path.\n   * @method buildPath\n   * @param {String} src The source path to add values to.\n   * @param {Object} [data] Object used to append values to this request as a query string. Existing parameters on the\n   * path will be preserved.\n   * @returns {string} A formatted string that contains the path and the supplied parameters.\n   * @static\n   */\n\n\n  s.buildPath = function (src, data) {\n    if (data == null) {\n      return src;\n    }\n\n    var query = [];\n    var idx = src.indexOf('?');\n\n    if (idx != -1) {\n      var q = src.slice(idx + 1);\n      query = query.concat(q.split('&'));\n    }\n\n    if (idx != -1) {\n      return src.slice(0, idx) + '?' + this.formatQueryString(data, query);\n    } else {\n      return src + '?' + this.formatQueryString(data, query);\n    }\n  };\n  /**\n   * @method isCrossDomain\n   * @param {LoadItem|Object} item A load item with a `src` property.\n   * @return {Boolean} If the load item is loading from a different domain than the current location.\n   * @static\n   */\n\n\n  s.isCrossDomain = function (item) {\n    var target = document.createElement(\"a\");\n    target.href = item.src;\n    var host = document.createElement(\"a\");\n    host.href = location.href;\n    var crossdomain = target.hostname != \"\" && (target.port != host.port || target.protocol != host.protocol || target.hostname != host.hostname);\n    return crossdomain;\n  };\n  /**\n   * @method isLocal\n   * @param {LoadItem|Object} item A load item with a `src` property\n   * @return {Boolean} If the load item is loading from the \"file:\" protocol. Assume that the host must be local as\n   * well.\n   * @static\n   */\n\n\n  s.isLocal = function (item) {\n    var target = document.createElement(\"a\");\n    target.href = item.src;\n    return target.hostname == \"\" && target.protocol == \"file:\";\n  };\n  /**\n   * Determine if a specific type should be loaded as a binary file. Currently, only images and items marked\n   * specifically as \"binary\" are loaded as binary. Note that audio is <b>not</b> a binary type, as we can not play\n   * back using an audio tag if it is loaded as binary. Plugins can change the item type to binary to ensure they get\n   * a binary result to work with. Binary files are loaded using XHR2. Types are defined as static constants on\n   * {{#crossLink \"AbstractLoader\"}}{{/crossLink}}.\n   * @method isBinary\n   * @param {String} type The item type.\n   * @return {Boolean} If the specified type is binary.\n   * @static\n   */\n\n\n  s.isBinary = function (type) {\n    switch (type) {\n      case createjs.AbstractLoader.IMAGE:\n      case createjs.AbstractLoader.BINARY:\n        return true;\n\n      default:\n        return false;\n    }\n  };\n  /**\n   * Check if item is a valid HTMLImageElement\n   * @method isImageTag\n   * @param {Object} item\n   * @returns {Boolean}\n   * @static\n   */\n\n\n  s.isImageTag = function (item) {\n    return item instanceof HTMLImageElement;\n  };\n  /**\n   * Check if item is a valid HTMLAudioElement\n   * @method isAudioTag\n   * @param {Object} item\n   * @returns {Boolean}\n   * @static\n   */\n\n\n  s.isAudioTag = function (item) {\n    if (window.HTMLAudioElement) {\n      return item instanceof HTMLAudioElement;\n    } else {\n      return false;\n    }\n  };\n  /**\n   * Check if item is a valid HTMLVideoElement\n   * @method isVideoTag\n   * @param {Object} item\n   * @returns {Boolean}\n   * @static\n   */\n\n\n  s.isVideoTag = function (item) {\n    if (window.HTMLVideoElement) {\n      return item instanceof HTMLVideoElement;\n    } else {\n      return false;\n    }\n  };\n  /**\n   * Determine if a specific type is a text-based asset, and should be loaded as UTF-8.\n   * @method isText\n   * @param {String} type The item type.\n   * @return {Boolean} If the specified type is text.\n   * @static\n   */\n\n\n  s.isText = function (type) {\n    switch (type) {\n      case createjs.AbstractLoader.TEXT:\n      case createjs.AbstractLoader.JSON:\n      case createjs.AbstractLoader.MANIFEST:\n      case createjs.AbstractLoader.XML:\n      case createjs.AbstractLoader.CSS:\n      case createjs.AbstractLoader.SVG:\n      case createjs.AbstractLoader.JAVASCRIPT:\n      case createjs.AbstractLoader.SPRITESHEET:\n        return true;\n\n      default:\n        return false;\n    }\n  };\n  /**\n   * Determine the type of the object using common extensions. Note that the type can be passed in with the load item\n   * if it is an unusual extension.\n   * @method getTypeByExtension\n   * @param {String} extension The file extension to use to determine the load type.\n   * @return {String} The determined load type (for example, <code>AbstractLoader.IMAGE</code>). Will return `null` if\n   * the type can not be determined by the extension.\n   * @static\n   */\n\n\n  s.getTypeByExtension = function (extension) {\n    if (extension == null) {\n      return createjs.AbstractLoader.TEXT;\n    }\n\n    switch (extension.toLowerCase()) {\n      case \"jpeg\":\n      case \"jpg\":\n      case \"gif\":\n      case \"png\":\n      case \"webp\":\n      case \"bmp\":\n        return createjs.AbstractLoader.IMAGE;\n\n      case \"ogg\":\n      case \"mp3\":\n      case \"webm\":\n        return createjs.AbstractLoader.SOUND;\n\n      case \"mp4\":\n      case \"webm\":\n      case \"ts\":\n        return createjs.AbstractLoader.VIDEO;\n\n      case \"json\":\n        return createjs.AbstractLoader.JSON;\n\n      case \"xml\":\n        return createjs.AbstractLoader.XML;\n\n      case \"css\":\n        return createjs.AbstractLoader.CSS;\n\n      case \"js\":\n        return createjs.AbstractLoader.JAVASCRIPT;\n\n      case 'svg':\n        return createjs.AbstractLoader.SVG;\n\n      default:\n        return createjs.AbstractLoader.TEXT;\n    }\n  };\n\n  createjs.RequestUtils = s;\n})(); //##############################################################################\n// AbstractLoader.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor\n\n  /**\n   * The base loader, which defines all the generic methods, properties, and events. All loaders extend this class,\n   * including the {{#crossLink \"LoadQueue\"}}{{/crossLink}}.\n   * @class AbstractLoader\n   * @param {LoadItem|object|string} loadItem The item to be loaded.\n   * @param {Boolean} [preferXHR] Determines if the LoadItem should <em>try</em> and load using XHR, or take a\n   * tag-based approach, which can be better in cross-domain situations. Not all loaders can load using one or the\n   * other, so this is a suggested directive.\n   * @param {String} [type] The type of loader. Loader types are defined as constants on the AbstractLoader class,\n   * such as {{#crossLink \"IMAGE:property\"}}{{/crossLink}}, {{#crossLink \"CSS:property\"}}{{/crossLink}}, etc.\n   * @extends EventDispatcher\n   */\n\n  function AbstractLoader(loadItem, preferXHR, type) {\n    this.EventDispatcher_constructor(); // public properties\n\n    /**\n     * If the loader has completed loading. This provides a quick check, but also ensures that the different approaches\n     * used for loading do not pile up resulting in more than one `complete` {{#crossLink \"Event\"}}{{/crossLink}}.\n     * @property loaded\n     * @type {Boolean}\n     * @default false\n     */\n\n    this.loaded = false;\n    /**\n     * Determine if the loader was canceled. Canceled loads will not fire complete events. Note that this property\n     * is readonly, so {{#crossLink \"LoadQueue\"}}{{/crossLink}} queues should be closed using {{#crossLink \"LoadQueue/close\"}}{{/crossLink}}\n     * instead.\n     * @property canceled\n     * @type {Boolean}\n     * @default false\n     * @readonly\n     */\n\n    this.canceled = false;\n    /**\n     * The current load progress (percentage) for this item. This will be a number between 0 and 1.\n     *\n     * <h4>Example</h4>\n     *\n     *     var queue = new createjs.LoadQueue();\n     *     queue.loadFile(\"largeImage.png\");\n     *     queue.on(\"progress\", function() {\n     *         console.log(\"Progress:\", queue.progress, event.progress);\n     *     });\n     *\n     * @property progress\n     * @type {Number}\n     * @default 0\n     */\n\n    this.progress = 0;\n    /**\n     * The type of item this loader will load. See {{#crossLink \"AbstractLoader\"}}{{/crossLink}} for a full list of\n     * supported types.\n     * @property type\n     * @type {String}\n     */\n\n    this.type = type;\n    /**\n     * A formatter function that converts the loaded raw result into the final result. For example, the JSONLoader\n     * converts a string of text into a JavaScript object. Not all loaders have a resultFormatter, and this property\n     * can be overridden to provide custom formatting.\n     *\n     * Optionally, a resultFormatter can return a callback function in cases where the formatting needs to be\n     * asynchronous, such as creating a new image. The callback function is passed 2 parameters, which are callbacks\n     * to handle success and error conditions in the resultFormatter. Note that the resultFormatter method is\n     * called in the current scope, as well as the success and error callbacks.\n     *\n     * <h4>Example asynchronous resultFormatter</h4>\n     *\n     * \tfunction _formatResult(loader) {\n     * \t\treturn function(success, error) {\n     * \t\t\tif (errorCondition) { error(errorDetailEvent); }\n     * \t\t\tsuccess(result);\n     * \t\t}\n     * \t}\n     * @property resultFormatter\n     * @type {Function}\n     * @default null\n     */\n\n    this.resultFormatter = null; // protected properties\n\n    /**\n     * The {{#crossLink \"LoadItem\"}}{{/crossLink}} this loader represents. Note that this is null in a {{#crossLink \"LoadQueue\"}}{{/crossLink}},\n     * but will be available on loaders such as {{#crossLink \"XMLLoader\"}}{{/crossLink}} and {{#crossLink \"ImageLoader\"}}{{/crossLink}}.\n     * @property _item\n     * @type {LoadItem|Object}\n     * @private\n     */\n\n    if (loadItem) {\n      this._item = createjs.LoadItem.create(loadItem);\n    } else {\n      this._item = null;\n    }\n    /**\n     * Whether the loader will try and load content using XHR (true) or HTML tags (false).\n     * @property _preferXHR\n     * @type {Boolean}\n     * @private\n     */\n\n\n    this._preferXHR = preferXHR;\n    /**\n     * The loaded result after it is formatted by an optional {{#crossLink \"resultFormatter\"}}{{/crossLink}}. For\n     * items that are not formatted, this will be the same as the {{#crossLink \"_rawResult:property\"}}{{/crossLink}}.\n     * The result is accessed using the {{#crossLink \"getResult\"}}{{/crossLink}} method.\n     * @property _result\n     * @type {Object|String}\n     * @private\n     */\n\n    this._result = null;\n    /**\n     * The loaded result before it is formatted. The rawResult is accessed using the {{#crossLink \"getResult\"}}{{/crossLink}}\n     * method, and passing `true`.\n     * @property _rawResult\n     * @type {Object|String}\n     * @private\n     */\n\n    this._rawResult = null;\n    /**\n     * A list of items that loaders load behind the scenes. This does not include the main item the loader is\n     * responsible for loading. Examples of loaders that have sub-items include the {{#crossLink \"SpriteSheetLoader\"}}{{/crossLink}} and\n     * {{#crossLink \"ManifestLoader\"}}{{/crossLink}}.\n     * @property _loadItems\n     * @type {null}\n     * @protected\n     */\n\n    this._loadedItems = null;\n    /**\n     * The attribute the items loaded using tags use for the source.\n     * @type {string}\n     * @default null\n     * @private\n     */\n\n    this._tagSrcAttribute = null;\n    /**\n     * An HTML tag (or similar) that a loader may use to load HTML content, such as images, scripts, etc.\n     * @property _tag\n     * @type {Object}\n     * @private\n     */\n\n    this._tag = null;\n  }\n\n  ;\n  var p = createjs.extend(AbstractLoader, createjs.EventDispatcher);\n  var s = AbstractLoader; // TODO: deprecated\n  // p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n\n  /**\n   * Defines a POST request, use for a method value when loading data.\n   * @property POST\n   * @type {string}\n   * @default post\n   * @static\n   */\n\n  s.POST = \"POST\";\n  /**\n   * Defines a GET request, use for a method value when loading data.\n   * @property GET\n   * @type {string}\n   * @default get\n   * @static\n   */\n\n  s.GET = \"GET\";\n  /**\n   * The preload type for generic binary types. Note that images are loaded as binary files when using XHR.\n   * @property BINARY\n   * @type {String}\n   * @default binary\n   * @static\n   * @since 0.6.0\n   */\n\n  s.BINARY = \"binary\";\n  /**\n   * The preload type for css files. CSS files are loaded using a &lt;link&gt; when loaded with XHR, or a\n   * &lt;style&gt; tag when loaded with tags.\n   * @property CSS\n   * @type {String}\n   * @default css\n   * @static\n   * @since 0.6.0\n   */\n\n  s.CSS = \"css\";\n  /**\n   * The preload type for image files, usually png, gif, or jpg/jpeg. Images are loaded into an &lt;image&gt; tag.\n   * @property IMAGE\n   * @type {String}\n   * @default image\n   * @static\n   * @since 0.6.0\n   */\n\n  s.IMAGE = \"image\";\n  /**\n   * The preload type for javascript files, usually with the \"js\" file extension. JavaScript files are loaded into a\n   * &lt;script&gt; tag.\n   *\n   * Since version 0.4.1+, due to how tag-loaded scripts work, all JavaScript files are automatically injected into\n   * the body of the document to maintain parity between XHR and tag-loaded scripts. In version 0.4.0 and earlier,\n   * only tag-loaded scripts are injected.\n   * @property JAVASCRIPT\n   * @type {String}\n   * @default javascript\n   * @static\n   * @since 0.6.0\n   */\n\n  s.JAVASCRIPT = \"javascript\";\n  /**\n   * The preload type for json files, usually with the \"json\" file extension. JSON data is loaded and parsed into a\n   * JavaScript object. Note that if a `callback` is present on the load item, the file will be loaded with JSONP,\n   * no matter what the {{#crossLink \"LoadQueue/preferXHR:property\"}}{{/crossLink}} property is set to, and the JSON\n   * must contain a matching wrapper function.\n   * @property JSON\n   * @type {String}\n   * @default json\n   * @static\n   * @since 0.6.0\n   */\n\n  s.JSON = \"json\";\n  /**\n   * The preload type for jsonp files, usually with the \"json\" file extension. JSON data is loaded and parsed into a\n   * JavaScript object. You are required to pass a callback parameter that matches the function wrapper in the JSON.\n   * Note that JSONP will always be used if there is a callback present, no matter what the {{#crossLink \"LoadQueue/preferXHR:property\"}}{{/crossLink}}\n   * property is set to.\n   * @property JSONP\n   * @type {String}\n   * @default jsonp\n   * @static\n   * @since 0.6.0\n   */\n\n  s.JSONP = \"jsonp\";\n  /**\n   * The preload type for json-based manifest files, usually with the \"json\" file extension. The JSON data is loaded\n   * and parsed into a JavaScript object. PreloadJS will then look for a \"manifest\" property in the JSON, which is an\n   * Array of files to load, following the same format as the {{#crossLink \"LoadQueue/loadManifest\"}}{{/crossLink}}\n   * method. If a \"callback\" is specified on the manifest object, then it will be loaded using JSONP instead,\n   * regardless of what the {{#crossLink \"LoadQueue/preferXHR:property\"}}{{/crossLink}} property is set to.\n   * @property MANIFEST\n   * @type {String}\n   * @default manifest\n   * @static\n   * @since 0.6.0\n   */\n\n  s.MANIFEST = \"manifest\";\n  /**\n   * The preload type for sound files, usually mp3, ogg, or wav. When loading via tags, audio is loaded into an\n   * &lt;audio&gt; tag.\n   * @property SOUND\n   * @type {String}\n   * @default sound\n   * @static\n   * @since 0.6.0\n   */\n\n  s.SOUND = \"sound\";\n  /**\n   * The preload type for video files, usually mp4, ts, or ogg. When loading via tags, video is loaded into an\n   * &lt;video&gt; tag.\n   * @property VIDEO\n   * @type {String}\n   * @default video\n   * @static\n   * @since 0.6.0\n   */\n\n  s.VIDEO = \"video\";\n  /**\n   * The preload type for SpriteSheet files. SpriteSheet files are JSON files that contain string image paths.\n   * @property SPRITESHEET\n   * @type {String}\n   * @default spritesheet\n   * @static\n   * @since 0.6.0\n   */\n\n  s.SPRITESHEET = \"spritesheet\";\n  /**\n   * The preload type for SVG files.\n   * @property SVG\n   * @type {String}\n   * @default svg\n   * @static\n   * @since 0.6.0\n   */\n\n  s.SVG = \"svg\";\n  /**\n   * The preload type for text files, which is also the default file type if the type can not be determined. Text is\n   * loaded as raw text.\n   * @property TEXT\n   * @type {String}\n   * @default text\n   * @static\n   * @since 0.6.0\n   */\n\n  s.TEXT = \"text\";\n  /**\n   * The preload type for xml files. XML is loaded into an XML document.\n   * @property XML\n   * @type {String}\n   * @default xml\n   * @static\n   * @since 0.6.0\n   */\n\n  s.XML = \"xml\"; // Events\n\n  /**\n   * The {{#crossLink \"ProgressEvent\"}}{{/crossLink}} that is fired when the overall progress changes. Prior to\n   * version 0.6.0, this was just a regular {{#crossLink \"Event\"}}{{/crossLink}}.\n   * @event progress\n   * @since 0.3.0\n   */\n\n  /**\n   * The {{#crossLink \"Event\"}}{{/crossLink}} that is fired when a load starts.\n   * @event loadstart\n   * @param {Object} target The object that dispatched the event.\n   * @param {String} type The event type.\n   * @since 0.3.1\n   */\n\n  /**\n   * The {{#crossLink \"Event\"}}{{/crossLink}} that is fired when the entire queue has been loaded.\n   * @event complete\n   * @param {Object} target The object that dispatched the event.\n   * @param {String} type The event type.\n   * @since 0.3.0\n   */\n\n  /**\n   * The {{#crossLink \"ErrorEvent\"}}{{/crossLink}} that is fired when the loader encounters an error. If the error was\n   * encountered by a file, the event will contain the item that caused the error. Prior to version 0.6.0, this was\n   * just a regular {{#crossLink \"Event\"}}{{/crossLink}}.\n   * @event error\n   * @since 0.3.0\n   */\n\n  /**\n   * The {{#crossLink \"Event\"}}{{/crossLink}} that is fired when the loader encounters an internal file load error.\n   * This enables loaders to maintain internal queues, and surface file load errors.\n   * @event fileerror\n   * @param {Object} target The object that dispatched the event.\n   * @param {String} type The even type (\"fileerror\")\n   * @param {LoadItem|object} The item that encountered the error\n   * @since 0.6.0\n   */\n\n  /**\n   * The {{#crossLink \"Event\"}}{{/crossLink}} that is fired when a loader internally loads a file. This enables\n   * loaders such as {{#crossLink \"ManifestLoader\"}}{{/crossLink}} to maintain internal {{#crossLink \"LoadQueue\"}}{{/crossLink}}s\n   * and notify when they have loaded a file. The {{#crossLink \"LoadQueue\"}}{{/crossLink}} class dispatches a\n   * slightly different {{#crossLink \"LoadQueue/fileload:event\"}}{{/crossLink}} event.\n   * @event fileload\n   * @param {Object} target The object that dispatched the event.\n   * @param {String} type The event type (\"fileload\")\n   * @param {Object} item The file item which was specified in the {{#crossLink \"LoadQueue/loadFile\"}}{{/crossLink}}\n   * or {{#crossLink \"LoadQueue/loadManifest\"}}{{/crossLink}} call. If only a string path or tag was specified, the\n   * object will contain that value as a `src` property.\n   * @param {Object} result The HTML tag or parsed result of the loaded item.\n   * @param {Object} rawResult The unprocessed result, usually the raw text or binary data before it is converted\n   * to a usable object.\n   * @since 0.6.0\n   */\n\n  /**\n   * The {{#crossLink \"Event\"}}{{/crossLink}} that is fired after the internal request is created, but before a load.\n   * This allows updates to the loader for specific loading needs, such as binary or XHR image loading.\n   * @event initialize\n   * @param {Object} target The object that dispatched the event.\n   * @param {String} type The event type (\"initialize\")\n   * @param {AbstractLoader} loader The loader that has been initialized.\n   */\n\n  /**\n   * Get a reference to the manifest item that is loaded by this loader. In some cases this will be the value that was\n   * passed into {{#crossLink \"LoadQueue\"}}{{/crossLink}} using {{#crossLink \"LoadQueue/loadFile\"}}{{/crossLink}} or\n   * {{#crossLink \"LoadQueue/loadManifest\"}}{{/crossLink}}. However if only a String path was passed in, then it will\n   * be a {{#crossLink \"LoadItem\"}}{{/crossLink}}.\n   * @method getItem\n   * @return {Object} The manifest item that this loader is responsible for loading.\n   * @since 0.6.0\n   */\n\n  p.getItem = function () {\n    return this._item;\n  };\n  /**\n   * Get a reference to the content that was loaded by the loader (only available after the {{#crossLink \"complete:event\"}}{{/crossLink}}\n   * event is dispatched.\n   * @method getResult\n   * @param {Boolean} [raw=false] Determines if the returned result will be the formatted content, or the raw loaded\n   * data (if it exists).\n   * @return {Object}\n   * @since 0.6.0\n   */\n\n\n  p.getResult = function (raw) {\n    return raw ? this._rawResult : this._result;\n  };\n  /**\n   * Return the `tag` this object creates or uses for loading.\n   * @method getTag\n   * @return {Object} The tag instance\n   * @since 0.6.0\n   */\n\n\n  p.getTag = function () {\n    return this._tag;\n  };\n  /**\n   * Set the `tag` this item uses for loading.\n   * @method setTag\n   * @param {Object} tag The tag instance\n   * @since 0.6.0\n   */\n\n\n  p.setTag = function (tag) {\n    this._tag = tag;\n  };\n  /**\n   * Begin loading the item. This method is required when using a loader by itself.\n   *\n   * <h4>Example</h4>\n   *\n   *      var queue = new createjs.LoadQueue();\n   *      queue.on(\"complete\", handleComplete);\n   *      queue.loadManifest(fileArray, false); // Note the 2nd argument that tells the queue not to start loading yet\n   *      queue.load();\n   *\n   * @method load\n   */\n\n\n  p.load = function () {\n    this._createRequest();\n\n    this._request.on(\"complete\", this, this);\n\n    this._request.on(\"progress\", this, this);\n\n    this._request.on(\"loadStart\", this, this);\n\n    this._request.on(\"abort\", this, this);\n\n    this._request.on(\"timeout\", this, this);\n\n    this._request.on(\"error\", this, this);\n\n    var evt = new createjs.Event(\"initialize\");\n    evt.loader = this._request;\n    this.dispatchEvent(evt);\n\n    this._request.load();\n  };\n  /**\n   * Close the the item. This will stop any open requests (although downloads using HTML tags may still continue in\n   * the background), but events will not longer be dispatched.\n   * @method cancel\n   */\n\n\n  p.cancel = function () {\n    this.canceled = true;\n    this.destroy();\n  };\n  /**\n   * Clean up the loader.\n   * @method destroy\n   */\n\n\n  p.destroy = function () {\n    if (this._request) {\n      this._request.removeAllEventListeners();\n\n      this._request.destroy();\n    }\n\n    this._request = null;\n    this._item = null;\n    this._rawResult = null;\n    this._result = null;\n    this._loadItems = null;\n    this.removeAllEventListeners();\n  };\n  /**\n   * Get any items loaded internally by the loader. The enables loaders such as {{#crossLink \"ManifestLoader\"}}{{/crossLink}}\n   * to expose items it loads internally.\n   * @method getLoadedItems\n   * @return {Array} A list of the items loaded by the loader.\n   * @since 0.6.0\n   */\n\n\n  p.getLoadedItems = function () {\n    return this._loadedItems;\n  }; // Private methods\n\n  /**\n   * Create an internal request used for loading. By default, an {{#crossLink \"XHRRequest\"}}{{/crossLink}} or\n   * {{#crossLink \"TagRequest\"}}{{/crossLink}} is created, depending on the value of {{#crossLink \"preferXHR:property\"}}{{/crossLink}}.\n   * Other loaders may override this to use different request types, such as {{#crossLink \"ManifestLoader\"}}{{/crossLink}},\n   * which uses {{#crossLink \"JSONLoader\"}}{{/crossLink}} or {{#crossLink \"JSONPLoader\"}}{{/crossLink}} under the hood.\n   * @method _createRequest\n   * @protected\n   */\n\n\n  p._createRequest = function () {\n    if (!this._preferXHR) {\n      this._request = new createjs.TagRequest(this._item, this._tag || this._createTag(), this._tagSrcAttribute);\n    } else {\n      this._request = new createjs.XHRRequest(this._item);\n    }\n  };\n  /**\n   * Create the HTML tag used for loading. This method does nothing by default, and needs to be implemented\n   * by loaders that require tag loading.\n   * @method _createTag\n   * @param {String} src The tag source\n   * @return {HTMLElement} The tag that was created\n   * @protected\n   */\n\n\n  p._createTag = function (src) {\n    return null;\n  };\n  /**\n   * Dispatch a loadstart {{#crossLink \"Event\"}}{{/crossLink}}. Please see the {{#crossLink \"AbstractLoader/loadstart:event\"}}{{/crossLink}}\n   * event for details on the event payload.\n   * @method _sendLoadStart\n   * @protected\n   */\n\n\n  p._sendLoadStart = function () {\n    if (this._isCanceled()) {\n      return;\n    }\n\n    this.dispatchEvent(\"loadstart\");\n  };\n  /**\n   * Dispatch a {{#crossLink \"ProgressEvent\"}}{{/crossLink}}.\n   * @method _sendProgress\n   * @param {Number | Object} value The progress of the loaded item, or an object containing <code>loaded</code>\n   * and <code>total</code> properties.\n   * @protected\n   */\n\n\n  p._sendProgress = function (value) {\n    if (this._isCanceled()) {\n      return;\n    }\n\n    var event = null;\n\n    if (typeof value == \"number\") {\n      this.progress = value;\n      event = new createjs.ProgressEvent(this.progress);\n    } else {\n      event = value;\n      this.progress = value.loaded / value.total;\n      event.progress = this.progress;\n\n      if (isNaN(this.progress) || this.progress == Infinity) {\n        this.progress = 0;\n      }\n    }\n\n    this.hasEventListener(\"progress\") && this.dispatchEvent(event);\n  };\n  /**\n   * Dispatch a complete {{#crossLink \"Event\"}}{{/crossLink}}. Please see the {{#crossLink \"AbstractLoader/complete:event\"}}{{/crossLink}} event\n   * @method _sendComplete\n   * @protected\n   */\n\n\n  p._sendComplete = function () {\n    if (this._isCanceled()) {\n      return;\n    }\n\n    this.loaded = true;\n    var event = new createjs.Event(\"complete\");\n    event.rawResult = this._rawResult;\n\n    if (this._result != null) {\n      event.result = this._result;\n    }\n\n    this.dispatchEvent(event);\n  };\n  /**\n   * Dispatch an error {{#crossLink \"Event\"}}{{/crossLink}}. Please see the {{#crossLink \"AbstractLoader/error:event\"}}{{/crossLink}}\n   * event for details on the event payload.\n   * @method _sendError\n   * @param {ErrorEvent} event The event object containing specific error properties.\n   * @protected\n   */\n\n\n  p._sendError = function (event) {\n    if (this._isCanceled() || !this.hasEventListener(\"error\")) {\n      return;\n    }\n\n    if (event == null) {\n      event = new createjs.ErrorEvent(\"PRELOAD_ERROR_EMPTY\"); // TODO: Populate error\n    }\n\n    this.dispatchEvent(event);\n  };\n  /**\n   * Determine if the load has been canceled. This is important to ensure that method calls or asynchronous events\n   * do not cause issues after the queue has been cleaned up.\n   * @method _isCanceled\n   * @return {Boolean} If the loader has been canceled.\n   * @protected\n   */\n\n\n  p._isCanceled = function () {\n    if (window.createjs == null || this.canceled) {\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * A custom result formatter function, which is called just before a request dispatches its complete event. Most\n   * loader types already have an internal formatter, but this can be user-overridden for custom formatting. The\n   * formatted result will be available on Loaders using {{#crossLink \"getResult\"}}{{/crossLink}}, and passing `true`.\n   * @property resultFormatter\n   * @type Function\n   * @return {Object} The formatted result\n   * @since 0.6.0\n   */\n\n\n  p.resultFormatter = null;\n  /**\n   * Handle events from internal requests. By default, loaders will handle, and redispatch the necessary events, but\n   * this method can be overridden for custom behaviours.\n   * @method handleEvent\n   * @param {Event} event The event that the internal request dispatches.\n   * @protected\n   * @since 0.6.0\n   */\n\n  p.handleEvent = function (event) {\n    switch (event.type) {\n      case \"complete\":\n        this._rawResult = event.target._response;\n        var result = this.resultFormatter && this.resultFormatter(this);\n\n        if (result instanceof Function) {\n          result.call(this, createjs.proxy(this._resultFormatSuccess, this), createjs.proxy(this._resultFormatFailed, this));\n        } else {\n          this._result = result || this._rawResult;\n\n          this._sendComplete();\n        }\n\n        break;\n\n      case \"progress\":\n        this._sendProgress(event);\n\n        break;\n\n      case \"error\":\n        this._sendError(event);\n\n        break;\n\n      case \"loadstart\":\n        this._sendLoadStart();\n\n        break;\n\n      case \"abort\":\n      case \"timeout\":\n        if (!this._isCanceled()) {\n          this.dispatchEvent(new createjs.ErrorEvent(\"PRELOAD_\" + event.type.toUpperCase() + \"_ERROR\"));\n        }\n\n        break;\n    }\n  };\n  /**\n   * The \"success\" callback passed to {{#crossLink \"AbstractLoader/resultFormatter\"}}{{/crossLink}} asynchronous\n   * functions.\n   * @method _resultFormatSuccess\n   * @param {Object} result The formatted result\n   * @private\n   */\n\n\n  p._resultFormatSuccess = function (result) {\n    this._result = result;\n\n    this._sendComplete();\n  };\n  /**\n   * The \"error\" callback passed to {{#crossLink \"AbstractLoader/resultFormatter\"}}{{/crossLink}} asynchronous\n   * functions.\n   * @method _resultFormatSuccess\n   * @param {Object} error The error event\n   * @private\n   */\n\n\n  p._resultFormatFailed = function (event) {\n    this._sendError(event);\n  };\n  /**\n   * @method buildPath\n   * @protected\n   * @deprecated Use the {{#crossLink \"RequestUtils\"}}{{/crossLink}} method {{#crossLink \"RequestUtils/buildPath\"}}{{/crossLink}}\n   * instead.\n   */\n\n\n  p.buildPath = function (src, data) {\n    return createjs.RequestUtils.buildPath(src, data);\n  };\n  /**\n   * @method toString\n   * @return {String} a string representation of the instance.\n   */\n\n\n  p.toString = function () {\n    return \"[PreloadJS AbstractLoader]\";\n  };\n\n  createjs.AbstractLoader = createjs.promote(AbstractLoader, \"EventDispatcher\");\n})(); //##############################################################################\n// AbstractMediaLoader.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor\n\n  /**\n   * The AbstractMediaLoader is a base class that handles some of the shared methods and properties of loaders that\n   * handle HTML media elements, such as Video and Audio.\n   * @class AbstractMediaLoader\n   * @param {LoadItem|Object} loadItem\n   * @param {Boolean} preferXHR\n   * @param {String} type The type of media to load. Usually \"video\" or \"audio\".\n   * @extends AbstractLoader\n   * @constructor\n   */\n\n  function AbstractMediaLoader(loadItem, preferXHR, type) {\n    this.AbstractLoader_constructor(loadItem, preferXHR, type); // public properties\n\n    this.resultFormatter = this._formatResult; // protected properties\n\n    this._tagSrcAttribute = \"src\";\n    this.on(\"initialize\", this._updateXHR, this);\n  }\n\n  ;\n  var p = createjs.extend(AbstractMediaLoader, createjs.AbstractLoader); // static properties\n  // public methods\n\n  p.load = function () {\n    // TagRequest will handle most of this, but Sound / Video need a few custom properties, so just handle them here.\n    if (!this._tag) {\n      this._tag = this._createTag(this._item.src);\n    }\n\n    this._tag.preload = \"auto\";\n\n    this._tag.load();\n\n    this.AbstractLoader_load();\n  }; // protected methods\n\n  /**\n   * Creates a new tag for loading if it doesn't exist yet.\n   * @method _createTag\n   * @private\n   */\n\n\n  p._createTag = function () {};\n\n  p._createRequest = function () {\n    if (!this._preferXHR) {\n      this._request = new createjs.MediaTagRequest(this._item, this._tag || this._createTag(), this._tagSrcAttribute);\n    } else {\n      this._request = new createjs.XHRRequest(this._item);\n    }\n  }; // protected methods\n\n  /**\n   * Before the item loads, set its mimeType and responseType.\n   * @property _updateXHR\n   * @param {Event} event\n   * @private\n   */\n\n\n  p._updateXHR = function (event) {\n    // Only exists for XHR\n    if (event.loader.setResponseType) {\n      event.loader.setResponseType(\"blob\");\n    }\n  };\n  /**\n   * The result formatter for media files.\n   * @method _formatResult\n   * @param {AbstractLoader} loader\n   * @returns {HTMLVideoElement|HTMLAudioElement}\n   * @private\n   */\n\n\n  p._formatResult = function (loader) {\n    this._tag.removeEventListener && this._tag.removeEventListener(\"canplaythrough\", this._loadedHandler);\n    this._tag.onstalled = null;\n\n    if (this._preferXHR) {\n      var URL = window.URL || window.webkitURL;\n      var result = loader.getResult(true);\n      loader.getTag().src = URL.createObjectURL(result);\n    }\n\n    return loader.getTag();\n  };\n\n  createjs.AbstractMediaLoader = createjs.promote(AbstractMediaLoader, \"AbstractLoader\");\n})(); //##############################################################################\n// AbstractRequest.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\";\n  /**\n   * A base class for actual data requests, such as {{#crossLink \"XHRRequest\"}}{{/crossLink}}, {{#crossLink \"TagRequest\"}}{{/crossLink}},\n   * and {{#crossLink \"MediaRequest\"}}{{/crossLink}}. PreloadJS loaders will typically use a data loader under the\n   * hood to get data.\n   * @class AbstractRequest\n   * @param {LoadItem} item\n   * @constructor\n   */\n\n  var AbstractRequest = function (item) {\n    this._item = item;\n  };\n\n  var p = createjs.extend(AbstractRequest, createjs.EventDispatcher); // public methods\n\n  /**\n   * Begin a load.\n   * @method load\n   */\n\n  p.load = function () {};\n  /**\n   * Clean up a request.\n   * @method destroy\n   */\n\n\n  p.destroy = function () {};\n  /**\n   * Cancel an in-progress request.\n   * @method cancel\n   */\n\n\n  p.cancel = function () {};\n\n  createjs.AbstractRequest = createjs.promote(AbstractRequest, \"EventDispatcher\");\n})(); //##############################################################################\n// TagRequest.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor\n\n  /**\n   * An {{#crossLink \"AbstractRequest\"}}{{/crossLink}} that loads HTML tags, such as images and scripts.\n   * @class TagRequest\n   * @param {LoadItem} loadItem\n   * @param {HTMLElement} tag\n   * @param {String} srcAttribute The tag attribute that specifies the source, such as \"src\", \"href\", etc.\n   */\n\n  function TagRequest(loadItem, tag, srcAttribute) {\n    this.AbstractRequest_constructor(loadItem); // protected properties\n\n    /**\n     * The HTML tag instance that is used to load.\n     * @property _tag\n     * @type {HTMLElement}\n     * @protected\n     */\n\n    this._tag = tag;\n    /**\n     * The tag attribute that specifies the source, such as \"src\", \"href\", etc.\n     * @property _tagSrcAttribute\n     * @type {String}\n     * @protected\n     */\n\n    this._tagSrcAttribute = srcAttribute;\n    /**\n     * A method closure used for handling the tag load event.\n     * @property _loadedHandler\n     * @type {Function}\n     * @private\n     */\n\n    this._loadedHandler = createjs.proxy(this._handleTagComplete, this);\n    /**\n     * Determines if the element was added to the DOM automatically by PreloadJS, so it can be cleaned up after.\n     * @property _addedToDOM\n     * @type {Boolean}\n     * @private\n     */\n\n    this._addedToDOM = false;\n    /**\n     * Determines what the tags initial style.visibility was, so we can set it correctly after a load.\n     *\n     * @type {null}\n     * @private\n     */\n\n    this._startTagVisibility = null;\n  }\n\n  ;\n  var p = createjs.extend(TagRequest, createjs.AbstractRequest); // public methods\n\n  p.load = function () {\n    this._tag.onload = createjs.proxy(this._handleTagComplete, this);\n    this._tag.onreadystatechange = createjs.proxy(this._handleReadyStateChange, this);\n    this._tag.onerror = createjs.proxy(this._handleError, this);\n    var evt = new createjs.Event(\"initialize\");\n    evt.loader = this._tag;\n    this.dispatchEvent(evt);\n\n    this._hideTag();\n\n    this._loadTimeout = setTimeout(createjs.proxy(this._handleTimeout, this), this._item.loadTimeout);\n    this._tag[this._tagSrcAttribute] = this._item.src; // wdg:: Append the tag AFTER setting the src, or SVG loading on iOS will fail.\n\n    if (this._tag.parentNode == null) {\n      window.document.body.appendChild(this._tag);\n      this._addedToDOM = true;\n    }\n  };\n\n  p.destroy = function () {\n    this._clean();\n\n    this._tag = null;\n    this.AbstractRequest_destroy();\n  }; // private methods\n\n  /**\n   * Handle the readyStateChange event from a tag. We need this in place of the `onload` callback (mainly SCRIPT\n   * and LINK tags), but other cases may exist.\n   * @method _handleReadyStateChange\n   * @private\n   */\n\n\n  p._handleReadyStateChange = function () {\n    clearTimeout(this._loadTimeout); // This is strictly for tags in browsers that do not support onload.\n\n    var tag = this._tag; // Complete is for old IE support.\n\n    if (tag.readyState == \"loaded\" || tag.readyState == \"complete\") {\n      this._handleTagComplete();\n    }\n  };\n  /**\n   * Handle any error events from the tag.\n   * @method _handleError\n   * @protected\n   */\n\n\n  p._handleError = function () {\n    this._clean();\n\n    this.dispatchEvent(\"error\");\n  };\n  /**\n   * Handle the tag's onload callback.\n   * @method _handleTagComplete\n   * @private\n   */\n\n\n  p._handleTagComplete = function () {\n    this._rawResult = this._tag;\n    this._result = this.resultFormatter && this.resultFormatter(this) || this._rawResult;\n\n    this._clean();\n\n    this._showTag();\n\n    this.dispatchEvent(\"complete\");\n  };\n  /**\n   * The tag request has not loaded within the time specified in loadTimeout.\n   * @method _handleError\n   * @param {Object} event The XHR error event.\n   * @private\n   */\n\n\n  p._handleTimeout = function () {\n    this._clean();\n\n    this.dispatchEvent(new createjs.Event(\"timeout\"));\n  };\n  /**\n   * Remove event listeners, but don't destroy the request object\n   * @method _clean\n   * @private\n   */\n\n\n  p._clean = function () {\n    this._tag.onload = null;\n    this._tag.onreadystatechange = null;\n    this._tag.onerror = null;\n\n    if (this._addedToDOM && this._tag.parentNode != null) {\n      this._tag.parentNode.removeChild(this._tag);\n    }\n\n    clearTimeout(this._loadTimeout);\n  };\n\n  p._hideTag = function () {\n    this._startTagVisibility = this._tag.style.visibility;\n    this._tag.style.visibility = \"hidden\";\n  };\n\n  p._showTag = function () {\n    this._tag.style.visibility = this._startTagVisibility;\n  };\n  /**\n   * Handle a stalled audio event. The main place this happens is with HTMLAudio in Chrome when playing back audio\n   * that is already in a load, but not complete.\n   * @method _handleStalled\n   * @private\n   */\n\n\n  p._handleStalled = function () {//Ignore, let the timeout take care of it. Sometimes its not really stopped.\n  };\n\n  createjs.TagRequest = createjs.promote(TagRequest, \"AbstractRequest\");\n})(); //##############################################################################\n// MediaTagRequest.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor\n\n  /**\n   * An {{#crossLink \"TagRequest\"}}{{/crossLink}} that loads HTML tags for video and audio.\n   * @class MediaTagRequest\n   * @param {LoadItem} loadItem\n   * @param {HTMLAudioElement|HTMLVideoElement} tag\n   * @param {String} srcAttribute The tag attribute that specifies the source, such as \"src\", \"href\", etc.\n   * @constructor\n   */\n\n  function MediaTagRequest(loadItem, tag, srcAttribute) {\n    this.AbstractRequest_constructor(loadItem); // protected properties\n\n    this._tag = tag;\n    this._tagSrcAttribute = srcAttribute;\n    this._loadedHandler = createjs.proxy(this._handleTagComplete, this);\n  }\n\n  ;\n  var p = createjs.extend(MediaTagRequest, createjs.TagRequest);\n  var s = MediaTagRequest; // public methods\n\n  p.load = function () {\n    var sc = createjs.proxy(this._handleStalled, this);\n    this._stalledCallback = sc;\n    var pc = createjs.proxy(this._handleProgress, this);\n    this._handleProgress = pc;\n\n    this._tag.addEventListener(\"stalled\", sc);\n\n    this._tag.addEventListener(\"progress\", pc); // This will tell us when audio is buffered enough to play through, but not when its loaded.\n    // The tag doesn't keep loading in Chrome once enough has buffered, and we have decided that behaviour is sufficient.\n\n\n    this._tag.addEventListener && this._tag.addEventListener(\"canplaythrough\", this._loadedHandler, false); // canplaythrough callback doesn't work in Chrome, so we use an event.\n\n    this.TagRequest_load();\n  }; // private methods\n\n\n  p._handleReadyStateChange = function () {\n    clearTimeout(this._loadTimeout); // This is strictly for tags in browsers that do not support onload.\n\n    var tag = this._tag; // Complete is for old IE support.\n\n    if (tag.readyState == \"loaded\" || tag.readyState == \"complete\") {\n      this._handleTagComplete();\n    }\n  };\n\n  p._handleStalled = function () {//Ignore, let the timeout take care of it. Sometimes its not really stopped.\n  };\n  /**\n   * An XHR request has reported progress.\n   * @method _handleProgress\n   * @param {Object} event The XHR progress event.\n   * @private\n   */\n\n\n  p._handleProgress = function (event) {\n    if (!event || event.loaded > 0 && event.total == 0) {\n      return; // Sometimes we get no \"total\", so just ignore the progress event.\n    }\n\n    var newEvent = new createjs.ProgressEvent(event.loaded, event.total);\n    this.dispatchEvent(newEvent);\n  }; // protected methods\n\n\n  p._clean = function () {\n    this._tag.removeEventListener && this._tag.removeEventListener(\"canplaythrough\", this._loadedHandler);\n\n    this._tag.removeEventListener(\"stalled\", this._stalledCallback);\n\n    this._tag.removeEventListener(\"progress\", this._progressCallback);\n\n    this.TagRequest__clean();\n  };\n\n  createjs.MediaTagRequest = createjs.promote(MediaTagRequest, \"TagRequest\");\n})(); //##############################################################################\n// XHRRequest.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor\n\n  /**\n   * A preloader that loads items using XHR requests, usually XMLHttpRequest. However XDomainRequests will be used\n   * for cross-domain requests if possible, and older versions of IE fall back on to ActiveX objects when necessary.\n   * XHR requests load the content as text or binary data, provide progress and consistent completion events, and\n   * can be canceled during load. Note that XHR is not supported in IE 6 or earlier, and is not recommended for\n   * cross-domain loading.\n   * @class XHRRequest\n   * @constructor\n   * @param {Object} item The object that defines the file to load. Please see the {{#crossLink \"LoadQueue/loadFile\"}}{{/crossLink}}\n   * for an overview of supported file properties.\n   * @extends AbstractLoader\n   */\n\n  function XHRRequest(item) {\n    this.AbstractRequest_constructor(item); // protected properties\n\n    /**\n     * A reference to the XHR request used to load the content.\n     * @property _request\n     * @type {XMLHttpRequest | XDomainRequest | ActiveX.XMLHTTP}\n     * @private\n     */\n\n    this._request = null;\n    /**\n     * A manual load timeout that is used for browsers that do not support the onTimeout event on XHR (XHR level 1,\n     * typically IE9).\n     * @property _loadTimeout\n     * @type {Number}\n     * @private\n     */\n\n    this._loadTimeout = null;\n    /**\n     * The browser's XHR (XMLHTTPRequest) version. Supported versions are 1 and 2. There is no official way to detect\n     * the version, so we use capabilities to make a best guess.\n     * @property _xhrLevel\n     * @type {Number}\n     * @default 1\n     * @private\n     */\n\n    this._xhrLevel = 1;\n    /**\n     * The response of a loaded file. This is set because it is expensive to look up constantly. This property will be\n     * null until the file is loaded.\n     * @property _response\n     * @type {mixed}\n     * @private\n     */\n\n    this._response = null;\n    /**\n     * The response of the loaded file before it is modified. In most cases, content is converted from raw text to\n     * an HTML tag or a formatted object which is set to the <code>result</code> property, but the developer may still\n     * want to access the raw content as it was loaded.\n     * @property _rawResponse\n     * @type {String|Object}\n     * @private\n     */\n\n    this._rawResponse = null;\n    this._canceled = false; // Setup our event handlers now.\n\n    this._handleLoadStartProxy = createjs.proxy(this._handleLoadStart, this);\n    this._handleProgressProxy = createjs.proxy(this._handleProgress, this);\n    this._handleAbortProxy = createjs.proxy(this._handleAbort, this);\n    this._handleErrorProxy = createjs.proxy(this._handleError, this);\n    this._handleTimeoutProxy = createjs.proxy(this._handleTimeout, this);\n    this._handleLoadProxy = createjs.proxy(this._handleLoad, this);\n    this._handleReadyStateChangeProxy = createjs.proxy(this._handleReadyStateChange, this);\n\n    if (!this._createXHR(item)) {//TODO: Throw error?\n    }\n  }\n\n  ;\n  var p = createjs.extend(XHRRequest, createjs.AbstractRequest); // static properties\n\n  /**\n   * A list of XMLHTTP object IDs to try when building an ActiveX object for XHR requests in earlier versions of IE.\n   * @property ACTIVEX_VERSIONS\n   * @type {Array}\n   * @since 0.4.2\n   * @private\n   */\n\n  XHRRequest.ACTIVEX_VERSIONS = [\"Msxml2.XMLHTTP.6.0\", \"Msxml2.XMLHTTP.5.0\", \"Msxml2.XMLHTTP.4.0\", \"MSXML2.XMLHTTP.3.0\", \"MSXML2.XMLHTTP\", \"Microsoft.XMLHTTP\"]; // Public methods\n\n  /**\n   * Look up the loaded result.\n   * @method getResult\n   * @param {Boolean} [raw=false] Return a raw result instead of a formatted result. This applies to content\n   * loaded via XHR such as scripts, XML, CSS, and Images. If there is no raw result, the formatted result will be\n   * returned instead.\n   * @return {Object} A result object containing the content that was loaded, such as:\n   * <ul>\n   *      <li>An image tag (&lt;image /&gt;) for images</li>\n   *      <li>A script tag for JavaScript (&lt;script /&gt;). Note that scripts loaded with tags may be added to the\n   *      HTML head.</li>\n   *      <li>A style tag for CSS (&lt;style /&gt;)</li>\n   *      <li>Raw text for TEXT</li>\n   *      <li>A formatted JavaScript object defined by JSON</li>\n   *      <li>An XML document</li>\n   *      <li>An binary arraybuffer loaded by XHR</li>\n   * </ul>\n   * Note that if a raw result is requested, but not found, the result will be returned instead.\n   */\n\n  p.getResult = function (raw) {\n    if (raw && this._rawResponse) {\n      return this._rawResponse;\n    }\n\n    return this._response;\n  }; // Overrides abstract method in AbstractRequest\n\n\n  p.cancel = function () {\n    this.canceled = true;\n\n    this._clean();\n\n    this._request.abort();\n  }; // Overrides abstract method in AbstractLoader\n\n\n  p.load = function () {\n    if (this._request == null) {\n      this._handleError();\n\n      return;\n    } //Events\n\n\n    if (this._request.addEventListener != null) {\n      this._request.addEventListener(\"loadstart\", this._handleLoadStartProxy, false);\n\n      this._request.addEventListener(\"progress\", this._handleProgressProxy, false);\n\n      this._request.addEventListener(\"abort\", this._handleAbortProxy, false);\n\n      this._request.addEventListener(\"error\", this._handleErrorProxy, false);\n\n      this._request.addEventListener(\"timeout\", this._handleTimeoutProxy, false); // Note: We don't get onload in all browsers (earlier FF and IE). onReadyStateChange handles these.\n\n\n      this._request.addEventListener(\"load\", this._handleLoadProxy, false);\n\n      this._request.addEventListener(\"readystatechange\", this._handleReadyStateChangeProxy, false);\n    } else {\n      // IE9 support\n      this._request.onloadstart = this._handleLoadStartProxy;\n      this._request.onprogress = this._handleProgressProxy;\n      this._request.onabort = this._handleAbortProxy;\n      this._request.onerror = this._handleErrorProxy;\n      this._request.ontimeout = this._handleTimeoutProxy; // Note: We don't get onload in all browsers (earlier FF and IE). onReadyStateChange handles these.\n\n      this._request.onload = this._handleLoadProxy;\n      this._request.onreadystatechange = this._handleReadyStateChangeProxy;\n    } // Set up a timeout if we don't have XHR2\n\n\n    if (this._xhrLevel == 1) {\n      this._loadTimeout = setTimeout(createjs.proxy(this._handleTimeout, this), this._item.loadTimeout);\n    } // Sometimes we get back 404s immediately, particularly when there is a cross origin request.  // note this does not catch in Chrome\n\n\n    try {\n      if (!this._item.values || this._item.method == createjs.AbstractLoader.GET) {\n        this._request.send();\n      } else if (this._item.method == createjs.AbstractLoader.POST) {\n        this._request.send(createjs.RequestUtils.formatQueryString(this._item.values));\n      }\n    } catch (error) {\n      this.dispatchEvent(new createjs.ErrorEvent(\"XHR_SEND\", null, error));\n    }\n  };\n\n  p.setResponseType = function (type) {\n    // Some old browsers doesn't support blob, so we convert arraybuffer to blob after response is downloaded\n    if (type === 'blob') {\n      type = window.URL ? 'blob' : 'arraybuffer';\n      this._responseType = type;\n    }\n\n    this._request.responseType = type;\n  };\n  /**\n   * Get all the response headers from the XmlHttpRequest.\n   *\n   * <strong>From the docs:</strong> Return all the HTTP headers, excluding headers that are a case-insensitive match\n   * for Set-Cookie or Set-Cookie2, as a single string, with each header line separated by a U+000D CR U+000A LF pair,\n   * excluding the status line, and with each header name and header value separated by a U+003A COLON U+0020 SPACE\n   * pair.\n   * @method getAllResponseHeaders\n   * @return {String}\n   * @since 0.4.1\n   */\n\n\n  p.getAllResponseHeaders = function () {\n    if (this._request.getAllResponseHeaders instanceof Function) {\n      return this._request.getAllResponseHeaders();\n    } else {\n      return null;\n    }\n  };\n  /**\n   * Get a specific response header from the XmlHttpRequest.\n   *\n   * <strong>From the docs:</strong> Returns the header field value from the response of which the field name matches\n   * header, unless the field name is Set-Cookie or Set-Cookie2.\n   * @method getResponseHeader\n   * @param {String} header The header name to retrieve.\n   * @return {String}\n   * @since 0.4.1\n   */\n\n\n  p.getResponseHeader = function (header) {\n    if (this._request.getResponseHeader instanceof Function) {\n      return this._request.getResponseHeader(header);\n    } else {\n      return null;\n    }\n  }; // protected methods\n\n  /**\n   * The XHR request has reported progress.\n   * @method _handleProgress\n   * @param {Object} event The XHR progress event.\n   * @private\n   */\n\n\n  p._handleProgress = function (event) {\n    if (!event || event.loaded > 0 && event.total == 0) {\n      return; // Sometimes we get no \"total\", so just ignore the progress event.\n    }\n\n    var newEvent = new createjs.ProgressEvent(event.loaded, event.total);\n    this.dispatchEvent(newEvent);\n  };\n  /**\n   * The XHR request has reported a load start.\n   * @method _handleLoadStart\n   * @param {Object} event The XHR loadStart event.\n   * @private\n   */\n\n\n  p._handleLoadStart = function (event) {\n    clearTimeout(this._loadTimeout);\n    this.dispatchEvent(\"loadstart\");\n  };\n  /**\n   * The XHR request has reported an abort event.\n   * @method handleAbort\n   * @param {Object} event The XHR abort event.\n   * @private\n   */\n\n\n  p._handleAbort = function (event) {\n    this._clean();\n\n    this.dispatchEvent(new createjs.ErrorEvent(\"XHR_ABORTED\", null, event));\n  };\n  /**\n   * The XHR request has reported an error event.\n   * @method _handleError\n   * @param {Object} event The XHR error event.\n   * @private\n   */\n\n\n  p._handleError = function (event) {\n    this._clean();\n\n    this.dispatchEvent(new createjs.ErrorEvent(event.message));\n  };\n  /**\n   * The XHR request has reported a readyState change. Note that older browsers (IE 7 & 8) do not provide an onload\n   * event, so we must monitor the readyStateChange to determine if the file is loaded.\n   * @method _handleReadyStateChange\n   * @param {Object} event The XHR readyStateChange event.\n   * @private\n   */\n\n\n  p._handleReadyStateChange = function (event) {\n    if (this._request.readyState == 4) {\n      this._handleLoad();\n    }\n  };\n  /**\n   * The XHR request has completed. This is called by the XHR request directly, or by a readyStateChange that has\n   * <code>request.readyState == 4</code>. Only the first call to this method will be processed.\n   * @method _handleLoad\n   * @param {Object} event The XHR load event.\n   * @private\n   */\n\n\n  p._handleLoad = function (event) {\n    if (this.loaded) {\n      return;\n    }\n\n    this.loaded = true;\n\n    var error = this._checkError();\n\n    if (error) {\n      this._handleError(error);\n\n      return;\n    }\n\n    this._response = this._getResponse(); // Convert arraybuffer back to blob\n\n    if (this._responseType === 'arraybuffer') {\n      try {\n        this._response = new Blob([this._response]);\n      } catch (e) {\n        // Fallback to use BlobBuilder if Blob constructor is not supported\n        // Tested on Android 2.3 ~ 4.2 and iOS5 safari\n        window.BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;\n\n        if (e.name === 'TypeError' && window.BlobBuilder) {\n          var builder = new BlobBuilder();\n          builder.append(this._response);\n          this._response = builder.getBlob();\n        }\n      }\n    }\n\n    this._clean();\n\n    this.dispatchEvent(new createjs.Event(\"complete\"));\n  };\n  /**\n   * The XHR request has timed out. This is called by the XHR request directly, or via a <code>setTimeout</code>\n   * callback.\n   * @method _handleTimeout\n   * @param {Object} [event] The XHR timeout event. This is occasionally null when called by the backup setTimeout.\n   * @private\n   */\n\n\n  p._handleTimeout = function (event) {\n    this._clean();\n\n    this.dispatchEvent(new createjs.ErrorEvent(\"PRELOAD_TIMEOUT\", null, event));\n  }; // Protected\n\n  /**\n   * Determine if there is an error in the current load. This checks the status of the request for problem codes. Note\n   * that this does not check for an actual response. Currently, it only checks for 404 or 0 error code.\n   * @method _checkError\n   * @return {int} If the request status returns an error code.\n   * @private\n   */\n\n\n  p._checkError = function () {\n    //LM: Probably need additional handlers here, maybe 501\n    var status = parseInt(this._request.status);\n\n    switch (status) {\n      case 404: // Not Found\n\n      case 0:\n        // Not Loaded\n        return new Error(status);\n    }\n\n    return null;\n  };\n  /**\n   * Validate the response. Different browsers have different approaches, some of which throw errors when accessed\n   * in other browsers. If there is no response, the <code>_response</code> property will remain null.\n   * @method _getResponse\n   * @private\n   */\n\n\n  p._getResponse = function () {\n    if (this._response != null) {\n      return this._response;\n    }\n\n    if (this._request.response != null) {\n      return this._request.response;\n    } // Android 2.2 uses .responseText\n\n\n    try {\n      if (this._request.responseText != null) {\n        return this._request.responseText;\n      }\n    } catch (e) {} // When loading XML, IE9 does not return .response, instead it returns responseXML.xml\n\n\n    try {\n      if (this._request.responseXML != null) {\n        return this._request.responseXML;\n      }\n    } catch (e) {}\n\n    return null;\n  };\n  /**\n   * Create an XHR request. Depending on a number of factors, we get totally different results.\n   * <ol><li>Some browsers get an <code>XDomainRequest</code> when loading cross-domain.</li>\n   *      <li>XMLHttpRequest are created when available.</li>\n   *      <li>ActiveX.XMLHTTP objects are used in older IE browsers.</li>\n   *      <li>Text requests override the mime type if possible</li>\n   *      <li>Origin headers are sent for crossdomain requests in some browsers.</li>\n   *      <li>Binary loads set the response type to \"arraybuffer\"</li></ol>\n   * @method _createXHR\n   * @param {Object} item The requested item that is being loaded.\n   * @return {Boolean} If an XHR request or equivalent was successfully created.\n   * @private\n   */\n\n\n  p._createXHR = function (item) {\n    // Check for cross-domain loads. We can't fully support them, but we can try.\n    var crossdomain = createjs.RequestUtils.isCrossDomain(item);\n    var headers = {}; // Create the request. Fallback to whatever support we have.\n\n    var req = null;\n\n    if (window.XMLHttpRequest) {\n      req = new XMLHttpRequest(); // This is 8 or 9, so use XDomainRequest instead.\n\n      if (crossdomain && req.withCredentials === undefined && window.XDomainRequest) {\n        req = new XDomainRequest();\n      }\n    } else {\n      // Old IE versions use a different approach\n      for (var i = 0, l = s.ACTIVEX_VERSIONS.length; i < l; i++) {\n        var axVersion = s.ACTIVEX_VERSIONS[i];\n\n        try {\n          req = new ActiveXObject(axVersion);\n          break;\n        } catch (e) {}\n      }\n\n      if (req == null) {\n        return false;\n      }\n    } // Default to utf-8 for Text requests.\n\n\n    if (item.mimeType == null && createjs.RequestUtils.isText(item.type)) {\n      item.mimeType = \"text/plain; charset=utf-8\";\n    } // IE9 doesn't support overrideMimeType(), so we need to check for it.\n\n\n    if (item.mimeType && req.overrideMimeType) {\n      req.overrideMimeType(item.mimeType);\n    } // Determine the XHR level\n\n\n    this._xhrLevel = typeof req.responseType === \"string\" ? 2 : 1;\n    var src = null;\n\n    if (item.method == createjs.AbstractLoader.GET) {\n      src = createjs.RequestUtils.buildPath(item.src, item.values);\n    } else {\n      src = item.src;\n    } // Open the request.  Set cross-domain flags if it is supported (XHR level 1 only)\n\n\n    req.open(item.method || createjs.AbstractLoader.GET, src, true);\n\n    if (crossdomain && req instanceof XMLHttpRequest && this._xhrLevel == 1) {\n      headers[\"Origin\"] = location.origin;\n    } // To send data we need to set the Content-type header)\n\n\n    if (item.values && item.method == createjs.AbstractLoader.POST) {\n      headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n    }\n\n    if (!crossdomain && !headers[\"X-Requested-With\"]) {\n      headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n    }\n\n    if (item.headers) {\n      for (var n in item.headers) {\n        headers[n] = item.headers[n];\n      }\n    }\n\n    for (n in headers) {\n      req.setRequestHeader(n, headers[n]);\n    }\n\n    if (req instanceof XMLHttpRequest && item.withCredentials !== undefined) {\n      req.withCredentials = item.withCredentials;\n    }\n\n    this._request = req;\n    return true;\n  };\n  /**\n   * A request has completed (or failed or canceled), and needs to be disposed.\n   * @method _clean\n   * @private\n   */\n\n\n  p._clean = function () {\n    clearTimeout(this._loadTimeout);\n\n    if (this._request.removeEventListener != null) {\n      this._request.removeEventListener(\"loadstart\", this._handleLoadStartProxy);\n\n      this._request.removeEventListener(\"progress\", this._handleProgressProxy);\n\n      this._request.removeEventListener(\"abort\", this._handleAbortProxy);\n\n      this._request.removeEventListener(\"error\", this._handleErrorProxy);\n\n      this._request.removeEventListener(\"timeout\", this._handleTimeoutProxy);\n\n      this._request.removeEventListener(\"load\", this._handleLoadProxy);\n\n      this._request.removeEventListener(\"readystatechange\", this._handleReadyStateChangeProxy);\n    } else {\n      this._request.onloadstart = null;\n      this._request.onprogress = null;\n      this._request.onabort = null;\n      this._request.onerror = null;\n      this._request.ontimeout = null;\n      this._request.onload = null;\n      this._request.onreadystatechange = null;\n    }\n  };\n\n  p.toString = function () {\n    return \"[PreloadJS XHRRequest]\";\n  };\n\n  createjs.XHRRequest = createjs.promote(XHRRequest, \"AbstractRequest\");\n})(); //##############################################################################\n// LoadQueue.js\n//##############################################################################\n\n/*\n TODO: WINDOWS ISSUES\n * No error for HTML audio in IE 678\n * SVG no failure error in IE 67 (maybe 8) TAGS AND XHR\n * No script complete handler in IE 67 TAGS (XHR is fine)\n * No XML/JSON in IE6 TAGS\n * Need to hide loading SVG in Opera TAGS\n * No CSS onload/readystatechange in Safari or Android TAGS (requires rule checking)\n * SVG no load or failure in Opera XHR\n * Reported issues with IE7/8\n */\n\n\n(function () {\n  \"use strict\"; // constructor\n\n  /**\n   * The LoadQueue class is the main API for preloading content. LoadQueue is a load manager, which can preload either\n   * a single file, or queue of files.\n   *\n   * <b>Creating a Queue</b><br />\n   * To use LoadQueue, create a LoadQueue instance. If you want to force tag loading where possible, set the preferXHR\n   * argument to false.\n   *\n   *      var queue = new createjs.LoadQueue(true);\n   *\n   * <b>Listening for Events</b><br />\n   * Add any listeners you want to the queue. Since PreloadJS 0.3.0, the {{#crossLink \"EventDispatcher\"}}{{/crossLink}}\n   * lets you add as many listeners as you want for events. You can subscribe to the following events:<ul>\n   *     <li>{{#crossLink \"AbstractLoader/complete:event\"}}{{/crossLink}}: fired when a queue completes loading all\n   *     files</li>\n   *     <li>{{#crossLink \"AbstractLoader/error:event\"}}{{/crossLink}}: fired when the queue encounters an error with\n   *     any file.</li>\n   *     <li>{{#crossLink \"AbstractLoader/progress:event\"}}{{/crossLink}}: Progress for the entire queue has\n   *     changed.</li>\n   *     <li>{{#crossLink \"LoadQueue/fileload:event\"}}{{/crossLink}}: A single file has completed loading.</li>\n   *     <li>{{#crossLink \"LoadQueue/fileprogress:event\"}}{{/crossLink}}: Progress for a single file has changes. Note\n   *     that only files loaded with XHR (or possibly by plugins) will fire progress events other than 0 or 100%.</li>\n   * </ul>\n   *\n   *      queue.on(\"fileload\", handleFileLoad, this);\n   *      queue.on(\"complete\", handleComplete, this);\n   *\n   * <b>Adding files and manifests</b><br />\n   * Add files you want to load using {{#crossLink \"LoadQueue/loadFile\"}}{{/crossLink}} or add multiple files at a\n   * time using a list or a manifest definition using {{#crossLink \"LoadQueue/loadManifest\"}}{{/crossLink}}. Files are\n   * appended to the end of the active queue, so you can use these methods as many times as you like, whenever you\n   * like.\n   *\n   *      queue.loadFile(\"filePath/file.jpg\");\n   *      queue.loadFile({id:\"image\", src:\"filePath/file.jpg\"});\n   *      queue.loadManifest([\"filePath/file.jpg\", {id:\"image\", src:\"filePath/file.jpg\"}]);\n   *\n   *      // Use an external manifest\n   *      queue.loadManifest(\"path/to/manifest.json\");\n   *      queue.loadManifest({src:\"manifest.json\", type:\"manifest\"});\n   *\n   * If you pass `false` as the `loadNow` parameter, the queue will not kick of the load of the files, but it will not\n   * stop if it has already been started. Call the {{#crossLink \"AbstractLoader/load\"}}{{/crossLink}} method to begin\n   * a paused queue. Note that a paused queue will automatically resume when new files are added to it with a\n   * `loadNow` argument of `true`.\n   *\n   *      queue.load();\n   *\n   * <b>File Types</b><br />\n   * The file type of a manifest item is auto-determined by the file extension. The pattern matching in PreloadJS\n   * should handle the majority of standard file and url formats, and works with common file extensions. If you have\n   * either a non-standard file extension, or are serving the file using a proxy script, then you can pass in a\n   * <code>type</code> property with any manifest item.\n   *\n   *      queue.loadFile({src:\"path/to/myFile.mp3x\", type:createjs.AbstractLoader.SOUND});\n   *\n   *      // Note that PreloadJS will not read a file extension from the query string\n   *      queue.loadFile({src:\"http://server.com/proxy?file=image.jpg\", type:createjs.AbstractLoader.IMAGE});\n   *\n   * Supported types are defined on the {{#crossLink \"AbstractLoader\"}}{{/crossLink}} class, and include:\n   * <ul>\n   *     <li>{{#crossLink \"AbstractLoader/BINARY:property\"}}{{/crossLink}}: Raw binary data via XHR</li>\n   *     <li>{{#crossLink \"AbstractLoader/CSS:property\"}}{{/crossLink}}: CSS files</li>\n   *     <li>{{#crossLink \"AbstractLoader/IMAGE:property\"}}{{/crossLink}}: Common image formats</li>\n   *     <li>{{#crossLink \"AbstractLoader/JAVASCRIPT:property\"}}{{/crossLink}}: JavaScript files</li>\n   *     <li>{{#crossLink \"AbstractLoader/JSON:property\"}}{{/crossLink}}: JSON data</li>\n   *     <li>{{#crossLink \"AbstractLoader/JSONP:property\"}}{{/crossLink}}: JSON files cross-domain</li>\n   *     <li>{{#crossLink \"AbstractLoader/MANIFEST:property\"}}{{/crossLink}}: A list of files to load in JSON format, see\n   *     {{#crossLink \"AbstractLoader/loadManifest\"}}{{/crossLink}}</li>\n   *     <li>{{#crossLink \"AbstractLoader/SOUND:property\"}}{{/crossLink}}: Audio file formats</li>\n   *     <li>{{#crossLink \"AbstractLoader/SPRITESHEET:property\"}}{{/crossLink}}: JSON SpriteSheet definitions. This\n   *     will also load sub-images, and provide a {{#crossLink \"SpriteSheet\"}}{{/crossLink}} instance.</li>\n   *     <li>{{#crossLink \"AbstractLoader/SVG:property\"}}{{/crossLink}}: SVG files</li>\n   *     <li>{{#crossLink \"AbstractLoader/TEXT:property\"}}{{/crossLink}}: Text files - XHR only</li>\n      *     <li>{{#crossLink \"AbstractLoader/VIDEO:property\"}}{{/crossLink}}: Video objects</li>\n   *     <li>{{#crossLink \"AbstractLoader/XML:property\"}}{{/crossLink}}: XML data</li>\n   * </ul>\n   *\n   * <em>Note: Loader types used to be defined on LoadQueue, but have been moved to AbstractLoader for better\n   * portability of loader classes, which can be used individually now. The properties on LoadQueue still exist, but\n   * are deprecated.</em>\n   *\n   * <b>Handling Results</b><br />\n   * When a file is finished downloading, a {{#crossLink \"LoadQueue/fileload:event\"}}{{/crossLink}} event is\n   * dispatched. In an example above, there is an event listener snippet for fileload. Loaded files are usually a\n   * formatted object that can be used immediately, including:\n   * <ul>\n   *     <li>Binary: The binary loaded result</li>\n   *     <li>CSS: A &lt;link /&gt; tag</li>\n   *     <li>Image: An &lt;img /&gt; tag</li>\n   *     <li>JavaScript: A &lt;script /&gt; tag</li>\n   *     <li>JSON/JSONP: A formatted JavaScript Object</li>\n   *     <li>Manifest: A JavaScript object.\n   *     <li>Sound: An &lt;audio /&gt; tag</a>\n   *     <li>SpriteSheet: A {{#crossLink \"SpriteSheet\"}}{{/crossLink}} instance, containing loaded images.\n   *     <li>SVG: An &lt;object /&gt; tag</li>\n   *     <li>Text: Raw text</li>\n      *     <li>Video: A Video DOM node</li>\n   *     <li>XML: An XML DOM node</li>\n   * </ul>\n   *\n   *      function handleFileLoad(event) {\n   *          var item = event.item; // A reference to the item that was passed in to the LoadQueue\n   *          var type = item.type;\n   *\n   *          // Add any images to the page body.\n   *          if (type == createjs.LoadQueue.IMAGE) {\n   *              document.body.appendChild(event.result);\n   *          }\n   *      }\n   *\n   * At any time after the file has been loaded (usually after the queue has completed), any result can be looked up\n   * via its \"id\" using {{#crossLink \"LoadQueue/getResult\"}}{{/crossLink}}. If no id was provided, then the\n   * \"src\" or file path can be used instead, including the `path` defined by a manifest, but <strong>not including</strong>\n   * a base path defined on the LoadQueue. It is recommended to always pass an id if you want to look up content.\n   *\n   *      var image = queue.getResult(\"image\");\n   *      document.body.appendChild(image);\n   *\n   * Raw loaded content can be accessed using the <code>rawResult</code> property of the {{#crossLink \"LoadQueue/fileload:event\"}}{{/crossLink}}\n   * event, or can be looked up using {{#crossLink \"LoadQueue/getResult\"}}{{/crossLink}}, passing `true` as the 2nd\n   * argument. This is only applicable for content that has been parsed for the browser, specifically: JavaScript,\n   * CSS, XML, SVG, and JSON objects, or anything loaded with XHR.\n   *\n   *      var image = queue.getResult(\"image\", true); // load the binary image data loaded with XHR.\n   *\n   * <b>Plugins</b><br />\n   * LoadQueue has a simple plugin architecture to help process and preload content. For example, to preload audio,\n   * make sure to install the <a href=\"http://soundjs.com\">SoundJS</a> Sound class, which will help load HTML audio,\n   * Flash audio, and WebAudio files. This should be installed <strong>before</strong> loading any audio files.\n   *\n   *      queue.installPlugin(createjs.Sound);\n   *\n   * <h4>Known Browser Issues</h4>\n   * <ul>\n   *     <li>Browsers without audio support can not load audio files.</li>\n   *     <li>Safari on Mac OS X can only play HTML audio if QuickTime is installed</li>\n   *     <li>HTML Audio tags will only download until their <code>canPlayThrough</code> event is fired. Browsers other\n   *     than Chrome will continue to download in the background.</li>\n   *     <li>When loading scripts using tags, they are automatically added to the document.</li>\n   *     <li>Scripts loaded via XHR may not be properly inspectable with browser tools.</li>\n   *     <li>IE6 and IE7 (and some other browsers) may not be able to load XML, Text, or JSON, since they require\n   *     XHR to work.</li>\n   *     <li>Content loaded via tags will not show progress, and will continue to download in the background when\n   *     canceled, although no events will be dispatched.</li>\n   * </ul>\n   *\n   * @class LoadQueue\n   * @param {Boolean} [preferXHR=true] Determines whether the preload instance will favor loading with XHR (XML HTTP\n   * Requests), or HTML tags. When this is `false`, the queue will use tag loading when possible, and fall back on XHR\n   * when necessary.\n   * @param {String} [basePath=\"\"] A path that will be prepended on to the source parameter of all items in the queue\n   * before they are loaded.  Sources beginning with a protocol such as `http://` or a relative path such as `../`\n   * will not receive a base path.\n   * @param {String|Boolean} [crossOrigin=\"\"] An optional flag to support images loaded from a CORS-enabled server. To\n   * use it, set this value to `true`, which will default the crossOrigin property on images to \"Anonymous\". Any\n   * string value will be passed through, but only \"\" and \"Anonymous\" are recommended. <strong>Note: The crossOrigin\n   * parameter is deprecated. Use LoadItem.crossOrigin instead</strong>\n   *\n   * @constructor\n   * @extends AbstractLoader\n   */\n\n  function LoadQueue(preferXHR, basePath, crossOrigin) {\n    this.AbstractLoader_constructor();\n    /**\n     * An array of the plugins registered using {{#crossLink \"LoadQueue/installPlugin\"}}{{/crossLink}}.\n     * @property _plugins\n     * @type {Array}\n     * @private\n     * @since 0.6.1\n     */\n\n    this._plugins = [];\n    /**\n     * An object hash of callbacks that are fired for each file type before the file is loaded, giving plugins the\n     * ability to override properties of the load. Please see the {{#crossLink \"LoadQueue/installPlugin\"}}{{/crossLink}}\n     * method for more information.\n     * @property _typeCallbacks\n     * @type {Object}\n     * @private\n     */\n\n    this._typeCallbacks = {};\n    /**\n     * An object hash of callbacks that are fired for each file extension before the file is loaded, giving plugins the\n     * ability to override properties of the load. Please see the {{#crossLink \"LoadQueue/installPlugin\"}}{{/crossLink}}\n     * method for more information.\n     * @property _extensionCallbacks\n     * @type {null}\n     * @private\n     */\n\n    this._extensionCallbacks = {};\n    /**\n     * The next preload queue to process when this one is complete. If an error is thrown in the current queue, and\n     * {{#crossLink \"LoadQueue/stopOnError:property\"}}{{/crossLink}} is `true`, the next queue will not be processed.\n     * @property next\n     * @type {LoadQueue}\n     * @default null\n     */\n\n    this.next = null;\n    /**\n     * Ensure loaded scripts \"complete\" in the order they are specified. Loaded scripts are added to the document head\n     * once they are loaded. Scripts loaded via tags will load one-at-a-time when this property is `true`, whereas\n     * scripts loaded using XHR can load in any order, but will \"finish\" and be added to the document in the order\n     * specified.\n     *\n     * Any items can be set to load in order by setting the {{#crossLink \"maintainOrder:property\"}}{{/crossLink}}\n     * property on the load item, or by ensuring that only one connection can be open at a time using\n     * {{#crossLink \"LoadQueue/setMaxConnections\"}}{{/crossLink}}. Note that when the `maintainScriptOrder` property\n     * is set to `true`, scripts items are automatically set to `maintainOrder=true`, and changing the\n     * `maintainScriptOrder` to `false` during a load will not change items already in a queue.\n     *\n     * <h4>Example</h4>\n     *\n     *      var queue = new createjs.LoadQueue();\n     *      queue.setMaxConnections(3); // Set a higher number to load multiple items at once\n     *      queue.maintainScriptOrder = true; // Ensure scripts are loaded in order\n     *      queue.loadManifest([\n     *          \"script1.js\",\n     *          \"script2.js\",\n     *          \"image.png\", // Load any time\n     *          {src: \"image2.png\", maintainOrder: true} // Will wait for script2.js\n     *          \"image3.png\",\n     *          \"script3.js\" // Will wait for image2.png before loading (or completing when loading with XHR)\n     *      ]);\n     *\n     * @property maintainScriptOrder\n     * @type {Boolean}\n     * @default true\n     */\n\n    this.maintainScriptOrder = true;\n    /**\n     * Determines if the LoadQueue will stop processing the current queue when an error is encountered.\n     * @property stopOnError\n     * @type {Boolean}\n     * @default false\n     */\n\n    this.stopOnError = false;\n    /**\n     * The number of maximum open connections that a loadQueue tries to maintain. Please see\n     * {{#crossLink \"LoadQueue/setMaxConnections\"}}{{/crossLink}} for more information.\n     * @property _maxConnections\n     * @type {Number}\n     * @default 1\n     * @private\n     */\n\n    this._maxConnections = 1;\n    /**\n     * An internal list of all the default Loaders that are included with PreloadJS. Before an item is loaded, the\n     * available loader list is iterated, in the order they are included, and as soon as a loader indicates it can\n     * handle the content, it will be selected. The default loader, ({{#crossLink \"TextLoader\"}}{{/crossLink}} is\n     * last in the list, so it will be used if no other match is found. Typically, loaders will match based on the\n     * {{#crossLink \"LoadItem/type\"}}{{/crossLink}}, which is automatically determined using the file extension of\n     * the {{#crossLink \"LoadItem/src:property\"}}{{/crossLink}}.\n     *\n     * Loaders can be removed from PreloadJS by simply not including them.\n     *\n     * Custom loaders installed using {{#crossLink \"registerLoader\"}}{{/crossLink}} will be prepended to this list\n     * so that they are checked first.\n     * @property _availableLoaders\n     * @type {Array}\n     * @private\n     * @since 0.6.0\n     */\n\n    this._availableLoaders = [createjs.ImageLoader, createjs.JavaScriptLoader, createjs.CSSLoader, createjs.JSONLoader, createjs.JSONPLoader, createjs.SoundLoader, createjs.ManifestLoader, createjs.SpriteSheetLoader, createjs.XMLLoader, createjs.SVGLoader, createjs.BinaryLoader, createjs.VideoLoader, createjs.TextLoader];\n    /**\n     * The number of built in loaders, so they can't be removed by {{#crossLink \"unregisterLoader\"}}{{/crossLink}.\n    \t\t * @property _defaultLoaderLength\n     * @type {Number}\n     * @private\n     * @since 0.6.0\n     */\n\n    this._defaultLoaderLength = this._availableLoaders.length;\n    this.init(preferXHR, basePath, crossOrigin);\n  }\n\n  var p = createjs.extend(LoadQueue, createjs.AbstractLoader);\n  var s = LoadQueue;\n  /**\n   * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n   * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n   * for details.\n   *\n   * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n   *\n   * @method initialize\n   * @protected\n   * @deprecated\n   */\n  // p.initialize = function() {}; // searchable for devs wondering where it is.\n\n  /**\n   * An internal initialization method, which is used for initial set up, but also to reset the LoadQueue.\n   * @method init\n   * @param preferXHR\n   * @param basePath\n   * @param crossOrigin\n   * @private\n   */\n\n  p.init = function (preferXHR, basePath, crossOrigin) {\n    // public properties\n\n    /**\n     * @property useXHR\n     * @type {Boolean}\n     * @readonly\n     * @default true\n     * @deprecated Use preferXHR instead.\n     */\n    this.useXHR = true;\n    /**\n     * Try and use XMLHttpRequest (XHR) when possible. Note that LoadQueue will default to tag loading or XHR\n     * loading depending on the requirements for a media type. For example, HTML audio can not be loaded with XHR,\n     * and plain text can not be loaded with tags, so it will default the the correct type instead of using the\n     * user-defined type.\n     * @type {Boolean}\n     * @default true\n     * @since 0.6.0\n     */\n\n    this.preferXHR = true; //TODO: Get/Set\n\n    this._preferXHR = true;\n    this.setPreferXHR(preferXHR); // protected properties\n\n    /**\n     * Whether the queue is currently paused or not.\n     * @property _paused\n     * @type {boolean}\n     * @private\n     */\n\n    this._paused = false;\n    /**\n     * A path that will be prepended on to the item's {{#crossLink \"LoadItem/src:property\"}}{{/crossLink}}. The\n     * `_basePath` property will only be used if an item's source is relative, and does not include a protocol such\n     * as `http://`, or a relative path such as `../`.\n     * @property _basePath\n     * @type {String}\n     * @private\n     * @since 0.3.1\n     */\n\n    this._basePath = basePath;\n    /**\n     * An optional flag to set on images that are loaded using PreloadJS, which enables CORS support. Images loaded\n     * cross-domain by servers that support CORS require the crossOrigin flag to be loaded and interacted with by\n     * a canvas. When loading locally, or with a server with no CORS support, this flag can cause other security issues,\n     * so it is recommended to only set it if you are sure the server supports it. Currently, supported values are \"\"\n     * and \"Anonymous\".\n     * @property _crossOrigin\n     * @type {String}\n     * @default \"\"\n     * @private\n     * @since 0.4.1\n     */\n\n    this._crossOrigin = crossOrigin;\n    /**\n     * Determines if the loadStart event was dispatched already. This event is only fired one time, when the first\n     * file is requested.\n     * @property _loadStartWasDispatched\n     * @type {Boolean}\n     * @default false\n     * @private\n     */\n\n    this._loadStartWasDispatched = false;\n    /**\n     * Determines if there is currently a script loading. This helps ensure that only a single script loads at once when\n     * using a script tag to do preloading.\n     * @property _currentlyLoadingScript\n     * @type {Boolean}\n     * @private\n     */\n\n    this._currentlyLoadingScript = null;\n    /**\n     * An array containing the currently downloading files.\n     * @property _currentLoads\n     * @type {Array}\n     * @private\n     */\n\n    this._currentLoads = [];\n    /**\n     * An array containing the queued items that have not yet started downloading.\n     * @property _loadQueue\n     * @type {Array}\n     * @private\n     */\n\n    this._loadQueue = [];\n    /**\n     * An array containing downloads that have not completed, so that the LoadQueue can be properly reset.\n     * @property _loadQueueBackup\n     * @type {Array}\n     * @private\n     */\n\n    this._loadQueueBackup = [];\n    /**\n     * An object hash of items that have finished downloading, indexed by the {{#crossLink \"LoadItem\"}}{{/crossLink}}\n     * id.\n     * @property _loadItemsById\n     * @type {Object}\n     * @private\n     */\n\n    this._loadItemsById = {};\n    /**\n     * An object hash of items that have finished downloading, indexed by {{#crossLink \"LoadItem\"}}{{/crossLink}}\n     * source.\n     * @property _loadItemsBySrc\n     * @type {Object}\n     * @private\n     */\n\n    this._loadItemsBySrc = {};\n    /**\n     * An object hash of loaded items, indexed by the ID of the {{#crossLink \"LoadItem\"}}{{/crossLink}}.\n     * @property _loadedResults\n     * @type {Object}\n     * @private\n     */\n\n    this._loadedResults = {};\n    /**\n     * An object hash of un-parsed loaded items, indexed by the ID of the {{#crossLink \"LoadItem\"}}{{/crossLink}}.\n     * @property _loadedRawResults\n     * @type {Object}\n     * @private\n     */\n\n    this._loadedRawResults = {};\n    /**\n     * The number of items that have been requested. This helps manage an overall progress without knowing how large\n     * the files are before they are downloaded. This does not include items inside of loaders such as the\n     * {{#crossLink \"ManifestLoader\"}}{{/crossLink}}.\n     * @property _numItems\n     * @type {Number}\n     * @default 0\n     * @private\n     */\n\n    this._numItems = 0;\n    /**\n     * The number of items that have completed loaded. This helps manage an overall progress without knowing how large\n     * the files are before they are downloaded.\n     * @property _numItemsLoaded\n     * @type {Number}\n     * @default 0\n     * @private\n     */\n\n    this._numItemsLoaded = 0;\n    /**\n     * A list of scripts in the order they were requested. This helps ensure that scripts are \"completed\" in the right\n     * order.\n     * @property _scriptOrder\n     * @type {Array}\n     * @private\n     */\n\n    this._scriptOrder = [];\n    /**\n     * A list of scripts that have been loaded. Items are added to this list as <code>null</code> when they are\n     * requested, contain the loaded item if it has completed, but not been dispatched to the user, and <code>true</true>\n     * once they are complete and have been dispatched.\n     * @property _loadedScripts\n     * @type {Array}\n     * @private\n     */\n\n    this._loadedScripts = [];\n    /**\n     * The last progress amount. This is used to suppress duplicate progress events.\n     * @property _lastProgress\n     * @type {Number}\n     * @private\n     * @since 0.6.0\n     */\n\n    this._lastProgress = NaN;\n  }; // static properties\n\n  /**\n   * The time in milliseconds to assume a load has failed. An {{#crossLink \"AbstractLoader/error:event\"}}{{/crossLink}}\n   * event is dispatched if the timeout is reached before any data is received.\n   * @property loadTimeout\n   * @type {Number}\n   * @default 8000\n   * @static\n   * @since 0.4.1\n   * @deprecated In favour of {{#crossLink \"LoadItem/LOAD_TIMEOUT_DEFAULT:property}}{{/crossLink}} property.\n   */\n\n\n  s.loadTimeout = 8000;\n  /**\n   * The time in milliseconds to assume a load has failed.\n   * @property LOAD_TIMEOUT\n   * @type {Number}\n   * @default 0\n   * @deprecated in favor of the {{#crossLink \"LoadQueue/loadTimeout:property\"}}{{/crossLink}} property.\n   */\n\n  s.LOAD_TIMEOUT = 0; // Preload Types\n\n  /**\n   * @property BINARY\n   * @type {String}\n   * @default binary\n   * @static\n   * @deprecated Use the AbstractLoader {{#crossLink \"AbstractLoader/BINARY:property\"}}{{/crossLink}} instead.\n   */\n\n  s.BINARY = createjs.AbstractLoader.BINARY;\n  /**\n   * @property CSS\n   * @type {String}\n   * @default css\n   * @static\n   * @deprecated Use the AbstractLoader {{#crossLink \"AbstractLoader/CSS:property\"}}{{/crossLink}} instead.\n   */\n\n  s.CSS = createjs.AbstractLoader.CSS;\n  /**\n   * @property IMAGE\n   * @type {String}\n   * @default image\n   * @static\n   * @deprecated Use the AbstractLoader {{#crossLink \"AbstractLoader/CSS:property\"}}{{/crossLink}} instead.\n   */\n\n  s.IMAGE = createjs.AbstractLoader.IMAGE;\n  /**\n   * @property JAVASCRIPT\n   * @type {String}\n   * @default javascript\n   * @static\n   * @deprecated Use the AbstractLoader {{#crossLink \"AbstractLoader/JAVASCRIPT:property\"}}{{/crossLink}} instead.\n   */\n\n  s.JAVASCRIPT = createjs.AbstractLoader.JAVASCRIPT;\n  /**\n   * @property JSON\n   * @type {String}\n   * @default json\n   * @static\n   * @deprecated Use the AbstractLoader {{#crossLink \"AbstractLoader/JSON:property\"}}{{/crossLink}} instead.\n   */\n\n  s.JSON = createjs.AbstractLoader.JSON;\n  /**\n   * @property JSONP\n   * @type {String}\n   * @default jsonp\n   * @static\n   * @deprecated Use the AbstractLoader {{#crossLink \"AbstractLoader/JSONP:property\"}}{{/crossLink}} instead.\n   */\n\n  s.JSONP = createjs.AbstractLoader.JSONP;\n  /**\n   * @property MANIFEST\n   * @type {String}\n   * @default manifest\n   * @static\n   * @since 0.4.1\n   * @deprecated Use the AbstractLoader {{#crossLink \"AbstractLoader/MANIFEST:property\"}}{{/crossLink}} instead.\n   */\n\n  s.MANIFEST = createjs.AbstractLoader.MANIFEST;\n  /**\n   * @property SOUND\n   * @type {String}\n   * @default sound\n   * @static\n   * @deprecated Use the AbstractLoader {{#crossLink \"AbstractLoader/JAVASCRIPT:property\"}}{{/crossLink}} instead.\n   */\n\n  s.SOUND = createjs.AbstractLoader.SOUND;\n  /**\n   * @property VIDEO\n   * @type {String}\n   * @default video\n   * @static\n   * @deprecated Use the AbstractLoader {{#crossLink \"AbstractLoader/JAVASCRIPT:property\"}}{{/crossLink}} instead.\n   */\n\n  s.VIDEO = createjs.AbstractLoader.VIDEO;\n  /**\n   * @property SVG\n   * @type {String}\n   * @default svg\n   * @static\n   * @deprecated Use the AbstractLoader {{#crossLink \"AbstractLoader/SVG:property\"}}{{/crossLink}} instead.\n   */\n\n  s.SVG = createjs.AbstractLoader.SVG;\n  /**\n   * @property TEXT\n   * @type {String}\n   * @default text\n   * @static\n   * @deprecated Use the AbstractLoader {{#crossLink \"AbstractLoader/TEXT:property\"}}{{/crossLink}} instead.\n   */\n\n  s.TEXT = createjs.AbstractLoader.TEXT;\n  /**\n   * @property XML\n   * @type {String}\n   * @default xml\n   * @static\n   * @deprecated Use the AbstractLoader {{#crossLink \"AbstractLoader/XML:property\"}}{{/crossLink}} instead.\n   */\n\n  s.XML = createjs.AbstractLoader.XML;\n  /**\n   * @property POST\n   * @type {string}\n   * @deprecated Use the AbstractLoader {{#crossLink \"AbstractLoader/POST:property\"}}{{/crossLink}} instead.\n   */\n\n  s.POST = createjs.AbstractLoader.POST;\n  /**\n   * @property GET\n   * @type {string}\n   * @deprecated Use the AbstractLoader {{#crossLink \"AbstractLoader/GET:property\"}}{{/crossLink}} instead.\n   */\n\n  s.GET = createjs.AbstractLoader.GET; // events\n\n  /**\n   * This event is fired when an individual file has loaded, and been processed.\n   * @event fileload\n   * @param {Object} target The object that dispatched the event.\n   * @param {String} type The event type.\n   * @param {Object} item The file item which was specified in the {{#crossLink \"LoadQueue/loadFile\"}}{{/crossLink}}\n   * or {{#crossLink \"LoadQueue/loadManifest\"}}{{/crossLink}} call. If only a string path or tag was specified, the\n   * object will contain that value as a `src` property.\n   * @param {Object} result The HTML tag or parsed result of the loaded item.\n   * @param {Object} rawResult The unprocessed result, usually the raw text or binary data before it is converted\n   * to a usable object.\n   * @since 0.3.0\n   */\n\n  /**\n   * This {{#crossLink \"ProgressEvent\"}}{{/crossLink}} that is fired when an an individual file's progress changes.\n   * @event fileprogress\n   * @since 0.3.0\n   */\n\n  /**\n   * This event is fired when an individual file starts to load.\n   * @event filestart\n   * @param {Object} The object that dispatched the event.\n   * @param {String} type The event type.\n   * @param {Object} item The file item which was specified in the {{#crossLink \"LoadQueue/loadFile\"}}{{/crossLink}}\n   * or {{#crossLink \"LoadQueue/loadManifest\"}}{{/crossLink}} call. If only a string path or tag was specified, the\n   * object will contain that value as a property.\n   */\n\n  /**\n   * Although it extends {{#crossLink \"AbstractLoader\"}}{{/crossLink}}, the `initialize` event is never fired from\n   * a LoadQueue instance.\n   * @event initialize\n   * @private\n   */\n  // public methods\n\n  /**\n   * Register a custom loaders class. New loaders are given precedence over loaders added earlier and default loaders.\n   * It is recommended that loaders extend {{#crossLink \"AbstractLoader\"}}{{/crossLink}}. Loaders can only be added\n   * once, and will be prepended to the list of available loaders.\n   * @method registerLoader\n   * @param {Function|AbstractLoader} loader The AbstractLoader class to add.\n   * @since 0.6.0\n   */\n\n  p.registerLoader = function (loader) {\n    if (!loader || !loader.canLoadItem) {\n      throw new Error(\"loader is of an incorrect type.\");\n    } else if (this._availableLoaders.indexOf(loader) != -1) {\n      throw new Error(\"loader already exists.\"); //LM: Maybe just silently fail here\n    }\n\n    this._availableLoaders.unshift(loader);\n  };\n  /**\n   * Remove a custom loader added using {{#crossLink \"registerLoader\"}}{{/crossLink}}. Only custom loaders can be\n   * unregistered, the default loaders will always be available.\n   * @method unregisterLoader\n   * @param {Function|AbstractLoader} loader The AbstractLoader class to remove\n   */\n\n\n  p.unregisterLoader = function (loader) {\n    var idx = this._availableLoaders.indexOf(loader);\n\n    if (idx != -1 && idx < this._defaultLoaderLength - 1) {\n      this._availableLoaders.splice(idx, 1);\n    }\n  };\n  /**\n   * @method setUseXHR\n   * @param {Boolean} value The new useXHR value to set.\n   * @return {Boolean} The new useXHR value. If XHR is not supported by the browser, this will return false, even if\n   * the provided value argument was true.\n   * @since 0.3.0\n   * @deprecated use the {{#crossLink \"LoadQueue/preferXHR:property\"}}{{/crossLink}} property, or the\n   * {{#crossLink \"LoadQueue/setUseXHR\"}}{{/crossLink}} method instead.\n   */\n\n\n  p.setUseXHR = function (value) {\n    return this.setPreferXHR(value);\n  };\n  /**\n   * Change the {{#crossLink \"preferXHR:property\"}}{{/crossLink}} value. Note that if this is set to `true`, it may\n   * fail, or be ignored depending on the browser's capabilities and the load type.\n   * @method setPreferXHR\n   * @param {Boolean} value\n   * @returns {Boolean} The value of {{#crossLink \"preferXHR\"}}{{/crossLink}} that was successfully set.\n   * @since 0.6.0\n   */\n\n\n  p.setPreferXHR = function (value) {\n    // Determine if we can use XHR. XHR defaults to TRUE, but the browser may not support it.\n    //TODO: Should we be checking for the other XHR types? Might have to do a try/catch on the different types similar to createXHR.\n    this.preferXHR = value != false && window.XMLHttpRequest != null;\n    return this.preferXHR;\n  };\n  /**\n   * Stops all queued and loading items, and clears the queue. This also removes all internal references to loaded\n   * content, and allows the queue to be used again.\n   * @method removeAll\n   * @since 0.3.0\n   */\n\n\n  p.removeAll = function () {\n    this.remove();\n  };\n  /**\n   * Stops an item from being loaded, and removes it from the queue. If nothing is passed, all items are removed.\n   * This also removes internal references to loaded item(s).\n   *\n   * <h4>Example</h4>\n   *\n   *      queue.loadManifest([\n   *          {src:\"test.png\", id:\"png\"},\n   *          {src:\"test.jpg\", id:\"jpg\"},\n   *          {src:\"test.mp3\", id:\"mp3\"}\n   *      ]);\n   *      queue.remove(\"png\"); // Single item by ID\n   *      queue.remove(\"png\", \"test.jpg\"); // Items as arguments. Mixed id and src.\n   *      queue.remove([\"test.png\", \"jpg\"]); // Items in an Array. Mixed id and src.\n   *\n   * @method remove\n   * @param {String | Array} idsOrUrls* The id or ids to remove from this queue. You can pass an item, an array of\n   * items, or multiple items as arguments.\n   * @since 0.3.0\n   */\n\n\n  p.remove = function (idsOrUrls) {\n    var args = null;\n\n    if (idsOrUrls && !Array.isArray(idsOrUrls)) {\n      args = [idsOrUrls];\n    } else if (idsOrUrls) {\n      args = idsOrUrls;\n    } else if (arguments.length > 0) {\n      return;\n    }\n\n    var itemsWereRemoved = false; // Destroy everything\n\n    if (!args) {\n      this.close();\n\n      for (var n in this._loadItemsById) {\n        this._disposeItem(this._loadItemsById[n]);\n      }\n\n      this.init(this.preferXHR, this._basePath); // Remove specific items\n    } else {\n      while (args.length) {\n        var item = args.pop();\n        var r = this.getResult(item); //Remove from the main load Queue\n\n        for (i = this._loadQueue.length - 1; i >= 0; i--) {\n          loadItem = this._loadQueue[i].getItem();\n\n          if (loadItem.id == item || loadItem.src == item) {\n            this._loadQueue.splice(i, 1)[0].cancel();\n\n            break;\n          }\n        } //Remove from the backup queue\n\n\n        for (i = this._loadQueueBackup.length - 1; i >= 0; i--) {\n          loadItem = this._loadQueueBackup[i].getItem();\n\n          if (loadItem.id == item || loadItem.src == item) {\n            this._loadQueueBackup.splice(i, 1)[0].cancel();\n\n            break;\n          }\n        }\n\n        if (r) {\n          this._disposeItem(this.getItem(item));\n        } else {\n          for (var i = this._currentLoads.length - 1; i >= 0; i--) {\n            var loadItem = this._currentLoads[i].getItem();\n\n            if (loadItem.id == item || loadItem.src == item) {\n              this._currentLoads.splice(i, 1)[0].cancel();\n\n              itemsWereRemoved = true;\n              break;\n            }\n          }\n        }\n      } // If this was called during a load, try to load the next item.\n\n\n      if (itemsWereRemoved) {\n        this._loadNext();\n      }\n    }\n  };\n  /**\n   * Stops all open loads, destroys any loaded items, and resets the queue, so all items can\n   * be reloaded again by calling {{#crossLink \"AbstractLoader/load\"}}{{/crossLink}}. Items are not removed from the\n   * queue. To remove items use the {{#crossLink \"LoadQueue/remove\"}}{{/crossLink}} or\n   * {{#crossLink \"LoadQueue/removeAll\"}}{{/crossLink}} method.\n   * @method reset\n   * @since 0.3.0\n   */\n\n\n  p.reset = function () {\n    this.close();\n\n    for (var n in this._loadItemsById) {\n      this._disposeItem(this._loadItemsById[n]);\n    } //Reset the queue to its start state\n\n\n    var a = [];\n\n    for (var i = 0, l = this._loadQueueBackup.length; i < l; i++) {\n      a.push(this._loadQueueBackup[i].getItem());\n    }\n\n    this.loadManifest(a, false);\n  };\n  /**\n   * Register a plugin. Plugins can map to load types (sound, image, etc), or specific extensions (png, mp3, etc).\n   * Currently, only one plugin can exist per type/extension.\n   *\n   * When a plugin is installed, a <code>getPreloadHandlers()</code> method will be called on it. For more information\n   * on this method, check out the {{#crossLink \"SamplePlugin/getPreloadHandlers\"}}{{/crossLink}} method in the\n   * {{#crossLink \"SamplePlugin\"}}{{/crossLink}} class.\n   *\n   * Before a file is loaded, a matching plugin has an opportunity to modify the load. If a `callback` is returned\n   * from the {{#crossLink \"SamplePlugin/getPreloadHandlers\"}}{{/crossLink}} method, it will be invoked first, and its\n   * result may cancel or modify the item. The callback method can also return a `completeHandler` to be fired when\n   * the file is loaded, or a `tag` object, which will manage the actual download. For more information on these\n   * methods, check out the {{#crossLink \"SamplePlugin/preloadHandler\"}}{{/crossLink}} and {{#crossLink \"SamplePlugin/fileLoadHandler\"}}{{/crossLink}}\n   * methods on the {{#crossLink \"SamplePlugin\"}}{{/crossLink}}.\n   *\n   * @method installPlugin\n   * @param {Function} plugin The plugin class to install.\n   */\n\n\n  p.installPlugin = function (plugin) {\n    if (plugin == null) {\n      return;\n    }\n\n    if (plugin.getPreloadHandlers != null) {\n      this._plugins.push(plugin);\n\n      var map = plugin.getPreloadHandlers();\n      map.scope = plugin;\n\n      if (map.types != null) {\n        for (var i = 0, l = map.types.length; i < l; i++) {\n          this._typeCallbacks[map.types[i]] = map;\n        }\n      }\n\n      if (map.extensions != null) {\n        for (i = 0, l = map.extensions.length; i < l; i++) {\n          this._extensionCallbacks[map.extensions[i]] = map;\n        }\n      }\n    }\n  };\n  /**\n   * Set the maximum number of concurrent connections. Note that browsers and servers may have a built-in maximum\n   * number of open connections, so any additional connections may remain in a pending state until the browser\n   * opens the connection. When loading scripts using tags, and when {{#crossLink \"LoadQueue/maintainScriptOrder:property\"}}{{/crossLink}}\n   * is `true`, only one script is loaded at a time due to browser limitations.\n   *\n   * <h4>Example</h4>\n   *\n   *      var queue = new createjs.LoadQueue();\n   *      queue.setMaxConnections(10); // Allow 10 concurrent loads\n   *\n   * @method setMaxConnections\n   * @param {Number} value The number of concurrent loads to allow. By default, only a single connection per LoadQueue\n   * is open at any time.\n   */\n\n\n  p.setMaxConnections = function (value) {\n    this._maxConnections = value;\n\n    if (!this._paused && this._loadQueue.length > 0) {\n      this._loadNext();\n    }\n  };\n  /**\n   * Load a single file. To add multiple files at once, use the {{#crossLink \"LoadQueue/loadManifest\"}}{{/crossLink}}\n   * method.\n   *\n   * Files are always appended to the current queue, so this method can be used multiple times to add files.\n   * To clear the queue first, use the {{#crossLink \"AbstractLoader/close\"}}{{/crossLink}} method.\n   * @method loadFile\n   * @param {LoadItem|Object|String} file The file object or path to load. A file can be either\n   * <ul>\n   *     <li>A {{#crossLink \"LoadItem\"}}{{/crossLink}} instance</li>\n   *     <li>An object containing properties defined by {{#crossLink \"LoadItem\"}}{{/crossLink}}</li>\n   *     <li>OR A string path to a resource. Note that this kind of load item will be converted to a {{#crossLink \"LoadItem\"}}{{/crossLink}}\n   *     in the background.</li>\n   * </ul>\n   * @param {Boolean} [loadNow=true] Kick off an immediate load (true) or wait for a load call (false). The default\n   * value is true. If the queue is paused using {{#crossLink \"LoadQueue/setPaused\"}}{{/crossLink}}, and the value is\n   * `true`, the queue will resume automatically.\n   * @param {String} [basePath] A base path that will be prepended to each file. The basePath argument overrides the\n   * path specified in the constructor. Note that if you load a manifest using a file of type {{#crossLink \"AbstractLoader/MANIFEST:property\"}}{{/crossLink}},\n   * its files will <strong>NOT</strong> use the basePath parameter. <strong>The basePath parameter is deprecated.</strong>\n   * This parameter will be removed in a future version. Please either use the `basePath` parameter in the LoadQueue\n   * constructor, or a `path` property in a manifest definition.\n   */\n\n\n  p.loadFile = function (file, loadNow, basePath) {\n    if (file == null) {\n      var event = new createjs.ErrorEvent(\"PRELOAD_NO_FILE\");\n\n      this._sendError(event);\n\n      return;\n    }\n\n    this._addItem(file, null, basePath);\n\n    if (loadNow !== false) {\n      this.setPaused(false);\n    } else {\n      this.setPaused(true);\n    }\n  };\n  /**\n   * Load an array of files. To load a single file, use the {{#crossLink \"LoadQueue/loadFile\"}}{{/crossLink}} method.\n   * The files in the manifest are requested in the same order, but may complete in a different order if the max\n   * connections are set above 1 using {{#crossLink \"LoadQueue/setMaxConnections\"}}{{/crossLink}}. Scripts will load\n   * in the right order as long as {{#crossLink \"LoadQueue/maintainScriptOrder\"}}{{/crossLink}} is true (which is\n   * default).\n   *\n   * Files are always appended to the current queue, so this method can be used multiple times to add files.\n   * To clear the queue first, use the {{#crossLink \"AbstractLoader/close\"}}{{/crossLink}} method.\n   * @method loadManifest\n   * @param {Array|String|Object} manifest An list of files to load. The loadManifest call supports four types of\n   * manifests:\n   * <ol>\n   *     <li>A string path, which points to a manifest file, which is a JSON file that contains a \"manifest\" property,\n   *     which defines the list of files to load, and can optionally contain a \"path\" property, which will be\n   *     prepended to each file in the list.</li>\n   *     <li>An object which defines a \"src\", which is a JSON or JSONP file. A \"callback\" can be defined for JSONP\n   *     file. The JSON/JSONP file should contain a \"manifest\" property, which defines the list of files to load,\n   *     and can optionally contain a \"path\" property, which will be prepended to each file in the list.</li>\n   *     <li>An object which contains a \"manifest\" property, which defines the list of files to load, and can\n   *     optionally contain a \"path\" property, which will be prepended to each file in the list.</li>\n   *     <li>An Array of files to load.</li>\n   * </ol>\n   *\n   * Each \"file\" in a manifest can be either:\n   * <ul>\n   *     <li>A {{#crossLink \"LoadItem\"}}{{/crossLink}} instance</li>\n   *     <li>An object containing properties defined by {{#crossLink \"LoadItem\"}}{{/crossLink}}</li>\n   *     <li>OR A string path to a resource. Note that this kind of load item will be converted to a {{#crossLink \"LoadItem\"}}{{/crossLink}}\n   *     in the background.</li>\n   * </ul>\n   *\n   * @param {Boolean} [loadNow=true] Kick off an immediate load (true) or wait for a load call (false). The default\n   * value is true. If the queue is paused using {{#crossLink \"LoadQueue/setPaused\"}}{{/crossLink}} and this value is\n   * `true`, the queue will resume automatically.\n   * @param {String} [basePath] A base path that will be prepended to each file. The basePath argument overrides the\n   * path specified in the constructor. Note that if you load a manifest using a file of type {{#crossLink \"LoadQueue/MANIFEST:property\"}}{{/crossLink}},\n   * its files will <strong>NOT</strong> use the basePath parameter. <strong>The basePath parameter is deprecated.</strong>\n   * This parameter will be removed in a future version. Please either use the `basePath` parameter in the LoadQueue\n   * constructor, or a `path` property in a manifest definition.\n   */\n\n\n  p.loadManifest = function (manifest, loadNow, basePath) {\n    var fileList = null;\n    var path = null; // Array-based list of items\n\n    if (Array.isArray(manifest)) {\n      if (manifest.length == 0) {\n        var event = new createjs.ErrorEvent(\"PRELOAD_MANIFEST_EMPTY\");\n\n        this._sendError(event);\n\n        return;\n      }\n\n      fileList = manifest; // String-based. Only file manifests can be specified this way. Any other types will cause an error when loaded.\n    } else if (typeof manifest === \"string\") {\n      fileList = [{\n        src: manifest,\n        type: s.MANIFEST\n      }];\n    } else if (typeof manifest == \"object\") {\n      // An object that defines a manifest path\n      if (manifest.src !== undefined) {\n        if (manifest.type == null) {\n          manifest.type = s.MANIFEST;\n        } else if (manifest.type != s.MANIFEST) {\n          var event = new createjs.ErrorEvent(\"PRELOAD_MANIFEST_TYPE\");\n\n          this._sendError(event);\n        }\n\n        fileList = [manifest]; // An object that defines a manifest\n      } else if (manifest.manifest !== undefined) {\n        fileList = manifest.manifest;\n        path = manifest.path;\n      } // Unsupported. This will throw an error.\n\n    } else {\n      var event = new createjs.ErrorEvent(\"PRELOAD_MANIFEST_NULL\");\n\n      this._sendError(event);\n\n      return;\n    }\n\n    for (var i = 0, l = fileList.length; i < l; i++) {\n      this._addItem(fileList[i], path, basePath);\n    }\n\n    if (loadNow !== false) {\n      this.setPaused(false);\n    } else {\n      this.setPaused(true);\n    }\n  };\n  /**\n   * Start a LoadQueue that was created, but not automatically started.\n   * @method load\n   */\n\n\n  p.load = function () {\n    this.setPaused(false);\n  };\n  /**\n   * Look up a {{#crossLink \"LoadItem\"}}{{/crossLink}} using either the \"id\" or \"src\" that was specified when loading it. Note that if no \"id\" was\n   * supplied with the load item, the ID will be the \"src\", including a `path` property defined by a manifest. The\n   * `basePath` will not be part of the ID.\n   * @method getItem\n   * @param {String} value The <code>id</code> or <code>src</code> of the load item.\n   * @return {Object} The load item that was initially requested using {{#crossLink \"LoadQueue/loadFile\"}}{{/crossLink}}\n   * or {{#crossLink \"LoadQueue/loadManifest\"}}{{/crossLink}}. This object is also returned via the {{#crossLink \"LoadQueue/fileload:event\"}}{{/crossLink}}\n   * event as the `item` parameter.\n   */\n\n\n  p.getItem = function (value) {\n    return this._loadItemsById[value] || this._loadItemsBySrc[value];\n  };\n  /**\n   * Look up a loaded result using either the \"id\" or \"src\" that was specified when loading it. Note that if no \"id\"\n   * was supplied with the load item, the ID will be the \"src\", including a `path` property defined by a manifest. The\n   * `basePath` will not be part of the ID.\n   * @method getResult\n   * @param {String} value The <code>id</code> or <code>src</code> of the load item.\n   * @param {Boolean} [rawResult=false] Return a raw result instead of a formatted result. This applies to content\n   * loaded via XHR such as scripts, XML, CSS, and Images. If there is no raw result, the formatted result will be\n   * returned instead.\n   * @return {Object} A result object containing the content that was loaded, such as:\n   * <ul>\n   *      <li>An image tag (&lt;image /&gt;) for images</li>\n   *      <li>A script tag for JavaScript (&lt;script /&gt;). Note that scripts are automatically added to the HTML\n   *      DOM.</li>\n   *      <li>A style tag for CSS (&lt;style /&gt; or &lt;link &gt;)</li>\n   *      <li>Raw text for TEXT</li>\n   *      <li>A formatted JavaScript object defined by JSON</li>\n   *      <li>An XML document</li>\n   *      <li>A binary arraybuffer loaded by XHR</li>\n   *      <li>An audio tag (&lt;audio &gt;) for HTML audio. Note that it is recommended to use SoundJS APIs to play\n   *      loaded audio. Specifically, audio loaded by Flash and WebAudio will return a loader object using this method\n   *      which can not be used to play audio back.</li>\n   * </ul>\n   * This object is also returned via the {{#crossLink \"LoadQueue/fileload:event\"}}{{/crossLink}} event as the 'item`\n   * parameter. Note that if a raw result is requested, but not found, the result will be returned instead.\n   */\n\n\n  p.getResult = function (value, rawResult) {\n    var item = this._loadItemsById[value] || this._loadItemsBySrc[value];\n\n    if (item == null) {\n      return null;\n    }\n\n    var id = item.id;\n\n    if (rawResult && this._loadedRawResults[id]) {\n      return this._loadedRawResults[id];\n    }\n\n    return this._loadedResults[id];\n  };\n  /**\n   * Generate an list of items loaded by this queue.\n   * @method getItems\n   * @param {Boolean} loaded Determines if only items that have been loaded should be returned. If false, in-progress\n   * and failed load items will also be included.\n   * @returns {Array} A list of objects that have been loaded. Each item includes the {{#crossLink \"LoadItem\"}}{{/crossLink}},\n   * result, and rawResult.\n   * @since 0.6.0\n   */\n\n\n  p.getItems = function (loaded) {\n    var arr = [];\n\n    for (var n in this._loadItemsById) {\n      var item = this._loadItemsById[n];\n      var result = this.getResult(n);\n\n      if (loaded === true && result == null) {\n        continue;\n      }\n\n      arr.push({\n        item: item,\n        result: result,\n        rawResult: this.getResult(n, true)\n      });\n    }\n\n    return arr;\n  };\n  /**\n   * Pause or resume the current load. Active loads will not be cancelled, but the next items in the queue will not\n   * be processed when active loads complete. LoadQueues are not paused by default.\n   *\n   * Note that if new items are added to the queue using {{#crossLink \"LoadQueue/loadFile\"}}{{/crossLink}} or\n   * {{#crossLink \"LoadQueue/loadManifest\"}}{{/crossLink}}, a paused queue will be resumed, unless the `loadNow`\n   * argument is `false`.\n   * @method setPaused\n   * @param {Boolean} value Whether the queue should be paused or not.\n   */\n\n\n  p.setPaused = function (value) {\n    this._paused = value;\n\n    if (!this._paused) {\n      this._loadNext();\n    }\n  };\n  /**\n   * Close the active queue. Closing a queue completely empties the queue, and prevents any remaining items from\n   * starting to download. Note that currently any active loads will remain open, and events may be processed.\n   *\n   * To stop and restart a queue, use the {{#crossLink \"LoadQueue/setPaused\"}}{{/crossLink}} method instead.\n   * @method close\n   */\n\n\n  p.close = function () {\n    while (this._currentLoads.length) {\n      this._currentLoads.pop().cancel();\n    }\n\n    this._scriptOrder.length = 0;\n    this._loadedScripts.length = 0;\n    this.loadStartWasDispatched = false;\n    this._itemCount = 0;\n    this._lastProgress = NaN;\n  }; // protected methods\n\n  /**\n   * Add an item to the queue. Items are formatted into a usable object containing all the properties necessary to\n   * load the content. The load queue is populated with the loader instance that handles preloading, and not the load\n   * item that was passed in by the user. To look up the load item by id or src, use the {{#crossLink \"LoadQueue.getItem\"}}{{/crossLink}}\n   * method.\n   * @method _addItem\n   * @param {String|Object} value The item to add to the queue.\n   * @param {String} [path] An optional path prepended to the `src`. The path will only be prepended if the src is\n   * relative, and does not start with a protocol such as `http://`, or a path like `../`. If the LoadQueue was\n   * provided a {{#crossLink \"_basePath\"}}{{/crossLink}}, then it will optionally be prepended after.\n   * @param {String} [basePath] <strong>Deprecated</strong>An optional basePath passed into a {{#crossLink \"LoadQueue/loadManifest\"}}{{/crossLink}}\n   * or {{#crossLink \"LoadQueue/loadFile\"}}{{/crossLink}} call. This parameter will be removed in a future tagged\n   * version.\n   * @private\n   */\n\n\n  p._addItem = function (value, path, basePath) {\n    var item = this._createLoadItem(value, path, basePath); // basePath and manifest path are added to the src.\n\n\n    if (item == null) {\n      return;\n    } // Sometimes plugins or types should be skipped.\n\n\n    var loader = this._createLoader(item);\n\n    if (loader != null) {\n      if (\"plugins\" in loader) {\n        loader.plugins = this._plugins;\n      }\n\n      item._loader = loader;\n\n      this._loadQueue.push(loader);\n\n      this._loadQueueBackup.push(loader);\n\n      this._numItems++;\n\n      this._updateProgress(); // Only worry about script order when using XHR to load scripts. Tags are only loading one at a time.\n\n\n      if (this.maintainScriptOrder && item.type == createjs.LoadQueue.JAVASCRIPT //&& loader instanceof createjs.XHRLoader //NOTE: Have to track all JS files this way\n      || item.maintainOrder === true) {\n        this._scriptOrder.push(item);\n\n        this._loadedScripts.push(null);\n      }\n    }\n  };\n  /**\n   * Create a refined {{#crossLink \"LoadItem\"}}{{/crossLink}}, which contains all the required properties. The type of\n   * item is determined by browser support, requirements based on the file type, and developer settings. For example,\n   * XHR is only used for file types that support it in new browsers.\n   *\n   * Before the item is returned, any plugins registered to handle the type or extension will be fired, which may\n   * alter the load item.\n   * @method _createLoadItem\n   * @param {String | Object | HTMLAudioElement | HTMLImageElement} value The item that needs to be preloaded.\n   * @param {String} [path] A path to prepend to the item's source. Sources beginning with http:// or similar will\n   * not receive a path. Since PreloadJS 0.4.1, the src will be modified to include the `path` and {{#crossLink \"LoadQueue/_basePath:property\"}}{{/crossLink}}\n   * when it is added.\n   * @param {String} [basePath] <strong>Deprectated</strong> A base path to prepend to the items source in addition to\n   * the path argument.\n   * @return {Object} The loader instance that will be used.\n   * @private\n   */\n\n\n  p._createLoadItem = function (value, path, basePath) {\n    var item = createjs.LoadItem.create(value);\n\n    if (item == null) {\n      return null;\n    }\n\n    var bp = \"\"; // Store the generated basePath\n\n    var useBasePath = basePath || this._basePath;\n\n    if (item.src instanceof Object) {\n      if (!item.type) {\n        return null;\n      } // the the src is an object, type is required to pass off to plugin\n\n\n      if (path) {\n        bp = path;\n        var pathMatch = createjs.RequestUtils.parseURI(path); // Also append basePath\n\n        if (useBasePath != null && !pathMatch.absolute && !pathMatch.relative) {\n          bp = useBasePath + bp;\n        }\n      } else if (useBasePath != null) {\n        bp = useBasePath;\n      }\n    } else {\n      // Determine Extension, etc.\n      var match = createjs.RequestUtils.parseURI(item.src);\n\n      if (match.extension) {\n        item.ext = match.extension;\n      }\n\n      if (item.type == null) {\n        item.type = createjs.RequestUtils.getTypeByExtension(item.ext);\n      } // Inject path & basePath\n\n\n      var autoId = item.src;\n\n      if (!match.absolute && !match.relative) {\n        if (path) {\n          bp = path;\n          var pathMatch = createjs.RequestUtils.parseURI(path);\n          autoId = path + autoId; // Also append basePath\n\n          if (useBasePath != null && !pathMatch.absolute && !pathMatch.relative) {\n            bp = useBasePath + bp;\n          }\n        } else if (useBasePath != null) {\n          bp = useBasePath;\n        }\n      }\n\n      item.src = bp + item.src;\n    }\n\n    item.path = bp; // If there's no id, set one now.\n\n    if (item.id === undefined || item.id === null || item.id === \"\") {\n      item.id = autoId;\n    } // Give plugins a chance to modify the loadItem:\n\n\n    var customHandler = this._typeCallbacks[item.type] || this._extensionCallbacks[item.ext];\n\n    if (customHandler) {\n      // Plugins are now passed both the full source, as well as a combined path+basePath (appropriately)\n      var result = customHandler.callback.call(customHandler.scope, item, this); // The plugin will handle the load, or has canceled it. Ignore it.\n\n      if (result === false) {\n        return null; // Load as normal:\n      } else if (result === true) {// Do Nothing\n        // Result is a loader class:\n      } else if (result != null) {\n        item._loader = result;\n      } // Update the extension in case the type changed:\n\n\n      match = createjs.RequestUtils.parseURI(item.src);\n\n      if (match.extension != null) {\n        item.ext = match.extension;\n      }\n    } // Store the item for lookup. This also helps clean-up later.\n\n\n    this._loadItemsById[item.id] = item;\n    this._loadItemsBySrc[item.src] = item;\n\n    if (item.crossOrigin == null) {\n      item.crossOrigin = this._crossOrigin;\n    }\n\n    return item;\n  };\n  /**\n   * Create a loader for a load item.\n   * @method _createLoader\n   * @param {Object} item A formatted load item that can be used to generate a loader.\n   * @return {AbstractLoader} A loader that can be used to load content.\n   * @private\n   */\n\n\n  p._createLoader = function (item) {\n    if (item._loader != null) {\n      // A plugin already specified a loader\n      return item._loader;\n    } // Initially, try and use the provided/supported XHR mode:\n\n\n    var preferXHR = this.preferXHR;\n\n    for (var i = 0; i < this._availableLoaders.length; i++) {\n      var loader = this._availableLoaders[i];\n\n      if (loader && loader.canLoadItem(item)) {\n        return new loader(item, preferXHR);\n      }\n    } // TODO: Log error (requires createjs.log)\n\n\n    return null;\n  };\n  /**\n   * Load the next item in the queue. If the queue is empty (all items have been loaded), then the complete event\n   * is processed. The queue will \"fill up\" any empty slots, up to the max connection specified using\n   * {{#crossLink \"LoadQueue.setMaxConnections\"}}{{/crossLink}} method. The only exception is scripts that are loaded\n   * using tags, which have to be loaded one at a time to maintain load order.\n   * @method _loadNext\n   * @private\n   */\n\n\n  p._loadNext = function () {\n    if (this._paused) {\n      return;\n    } // Only dispatch loadstart event when the first file is loaded.\n\n\n    if (!this._loadStartWasDispatched) {\n      this._sendLoadStart();\n\n      this._loadStartWasDispatched = true;\n    } // The queue has completed.\n\n\n    if (this._numItems == this._numItemsLoaded) {\n      this.loaded = true;\n\n      this._sendComplete(); // Load the next queue, if it has been defined.\n\n\n      if (this.next && this.next.load) {\n        this.next.load();\n      }\n    } else {\n      this.loaded = false;\n    } // Must iterate forwards to load in the right order.\n\n\n    for (var i = 0; i < this._loadQueue.length; i++) {\n      if (this._currentLoads.length >= this._maxConnections) {\n        break;\n      }\n\n      var loader = this._loadQueue[i]; // Determine if we should be only loading one tag-script at a time:\n      // Note: maintainOrder items don't do anything here because we can hold onto their loaded value\n\n      if (!this._canStartLoad(loader)) {\n        continue;\n      }\n\n      this._loadQueue.splice(i, 1);\n\n      i--;\n\n      this._loadItem(loader);\n    }\n  };\n  /**\n   * Begin loading an item. Event listeners are not added to the loaders until the load starts.\n   * @method _loadItem\n   * @param {AbstractLoader} loader The loader instance to start. Currently, this will be an XHRLoader or TagLoader.\n   * @private\n   */\n\n\n  p._loadItem = function (loader) {\n    loader.on(\"fileload\", this._handleFileLoad, this);\n    loader.on(\"progress\", this._handleProgress, this);\n    loader.on(\"complete\", this._handleFileComplete, this);\n    loader.on(\"error\", this._handleError, this);\n    loader.on(\"fileerror\", this._handleFileError, this);\n\n    this._currentLoads.push(loader);\n\n    this._sendFileStart(loader.getItem());\n\n    loader.load();\n  };\n  /**\n   * The callback that is fired when a loader loads a file. This enables loaders like {{#crossLink \"ManifestLoader\"}}{{/crossLink}}\n   * to maintain internal queues, but for this queue to dispatch the {{#crossLink \"fileload:event\"}}{{/crossLink}}\n   * events.\n   * @param {Event} event The {{#crossLink \"AbstractLoader/fileload:event\"}}{{/crossLink}} event from the loader.\n   * @private\n   * @since 0.6.0\n   */\n\n\n  p._handleFileLoad = function (event) {\n    event.target = null;\n    this.dispatchEvent(event);\n  };\n  /**\n   * The callback that is fired when a loader encounters an error from an internal file load operation. This enables\n   * loaders like M\n   * @param event\n   * @private\n   */\n\n\n  p._handleFileError = function (event) {\n    var newEvent = new createjs.ErrorEvent(\"FILE_LOAD_ERROR\", null, event.item);\n\n    this._sendError(newEvent);\n  };\n  /**\n   * The callback that is fired when a loader encounters an error. The queue will continue loading unless {{#crossLink \"LoadQueue/stopOnError:property\"}}{{/crossLink}}\n   * is set to `true`.\n   * @method _handleError\n   * @param {ErrorEvent} event The error event, containing relevant error information.\n   * @private\n   */\n\n\n  p._handleError = function (event) {\n    var loader = event.target;\n    this._numItemsLoaded++;\n\n    this._finishOrderedItem(loader, true);\n\n    this._updateProgress();\n\n    var newEvent = new createjs.ErrorEvent(\"FILE_LOAD_ERROR\", null, loader.getItem()); // TODO: Propagate actual error message.\n\n    this._sendError(newEvent);\n\n    if (!this.stopOnError) {\n      this._removeLoadItem(loader);\n\n      this._cleanLoadItem(loader);\n\n      this._loadNext();\n    } else {\n      this.setPaused(true);\n    }\n  };\n  /**\n   * An item has finished loading. We can assume that it is totally loaded, has been parsed for immediate use, and\n   * is available as the \"result\" property on the load item. The raw text result for a parsed item (such as JSON, XML,\n   * CSS, JavaScript, etc) is available as the \"rawResult\" property, and can also be looked up using {{#crossLink \"LoadQueue/getResult\"}}{{/crossLink}}.\n   * @method _handleFileComplete\n   * @param {Event} event The event object from the loader.\n   * @private\n   */\n\n\n  p._handleFileComplete = function (event) {\n    var loader = event.target;\n    var item = loader.getItem();\n    var result = loader.getResult();\n    this._loadedResults[item.id] = result;\n    var rawResult = loader.getResult(true);\n\n    if (rawResult != null && rawResult !== result) {\n      this._loadedRawResults[item.id] = rawResult;\n    }\n\n    this._saveLoadedItems(loader); // Remove the load item\n\n\n    this._removeLoadItem(loader);\n\n    if (!this._finishOrderedItem(loader)) {\n      // The item was NOT managed, so process it now\n      this._processFinishedLoad(item, loader);\n    } // Clean up the load item\n\n\n    this._cleanLoadItem(loader);\n  };\n  /**\n   * Some loaders might load additional content, other than the item they were passed (such as {{#crossLink \"ManifestLoader\"}}{{/crossLink}}).\n   * Any items exposed by the loader using {{#crossLink \"AbstractLoader/getLoadItems\"}}{{/crossLink}} are added to the\n   * LoadQueue's look-ups, including {{#crossLink \"getItem\"}}{{/crossLink}} and {{#crossLink \"getResult\"}}{{/crossLink}}\n   * methods.\n   * @method _saveLoadedItems\n   * @param {AbstractLoader} loader\n   * @protected\n   * @since 0.6.0\n   */\n\n\n  p._saveLoadedItems = function (loader) {\n    // TODO: Not sure how to handle this. Would be nice to expose the items.\n    // Loaders may load sub-items. This adds them to this queue\n    var list = loader.getLoadedItems();\n\n    if (list === null) {\n      return;\n    }\n\n    for (var i = 0; i < list.length; i++) {\n      var item = list[i].item; // Store item lookups\n\n      this._loadItemsBySrc[item.src] = item;\n      this._loadItemsById[item.id] = item; // Store loaded content\n\n      this._loadedResults[item.id] = list[i].result;\n      this._loadedRawResults[item.id] = list[i].rawResult;\n    }\n  };\n  /**\n   * Flag an item as finished. If the item's order is being managed, then ensure that it is allowed to finish, and if\n   * so, trigger prior items to trigger as well.\n   * @method _finishOrderedItem\n   * @param {AbstractLoader} loader\n   * @param {Boolean} loadFailed\n   * @return {Boolean} If the item's order is being managed. This allows the caller to take an alternate\n   * behaviour if it is.\n   * @private\n   */\n\n\n  p._finishOrderedItem = function (loader, loadFailed) {\n    var item = loader.getItem();\n\n    if (this.maintainScriptOrder && item.type == createjs.LoadQueue.JAVASCRIPT || item.maintainOrder) {\n      //TODO: Evaluate removal of the _currentlyLoadingScript\n      if (loader instanceof createjs.JavaScriptLoader) {\n        this._currentlyLoadingScript = false;\n      }\n\n      var index = createjs.indexOf(this._scriptOrder, item);\n\n      if (index == -1) {\n        return false;\n      } // This loader no longer exists\n\n\n      this._loadedScripts[index] = loadFailed === true ? true : item;\n\n      this._checkScriptLoadOrder();\n\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * Ensure the scripts load and dispatch in the correct order. When using XHR, scripts are stored in an array in the\n   * order they were added, but with a \"null\" value. When they are completed, the value is set to the load item,\n   * and then when they are processed and dispatched, the value is set to `true`. This method simply\n   * iterates the array, and ensures that any loaded items that are not preceded by a `null` value are\n   * dispatched.\n   * @method _checkScriptLoadOrder\n   * @private\n   */\n\n\n  p._checkScriptLoadOrder = function () {\n    var l = this._loadedScripts.length;\n\n    for (var i = 0; i < l; i++) {\n      var item = this._loadedScripts[i];\n\n      if (item === null) {\n        break;\n      } // This is still loading. Do not process further.\n\n\n      if (item === true) {\n        continue;\n      } // This has completed, and been processed. Move on.\n\n\n      var loadItem = this._loadedResults[item.id];\n\n      if (item.type == createjs.LoadQueue.JAVASCRIPT) {\n        // Append script tags to the head automatically.\n        createjs.DomUtils.appendToHead(loadItem);\n      }\n\n      var loader = item._loader;\n\n      this._processFinishedLoad(item, loader);\n\n      this._loadedScripts[i] = true;\n    }\n  };\n  /**\n   * A file has completed loading, and the LoadQueue can move on. This triggers the complete event, and kick-starts\n   * the next item.\n   * @method _processFinishedLoad\n   * @param {LoadItem|Object} item\n   * @param {AbstractLoader} loader\n   * @protected\n   */\n\n\n  p._processFinishedLoad = function (item, loader) {\n    this._numItemsLoaded++; // Since LoadQueue needs maintain order, we can't append scripts in the loader.\n    // So we do it here instead. Or in _checkScriptLoadOrder();\n\n    if (!this.maintainScriptOrder && item.type == createjs.LoadQueue.JAVASCRIPT) {\n      var tag = loader.getTag();\n      createjs.DomUtils.appendToHead(tag);\n    }\n\n    this._updateProgress();\n\n    this._sendFileComplete(item, loader);\n\n    this._loadNext();\n  };\n  /**\n   * Ensure items with `maintainOrder=true` that are before the specified item have loaded. This only applies to\n   * JavaScript items that are being loaded with a TagLoader, since they have to be loaded and completed <strong>before</strong>\n   * the script can even be started, since it exist in the DOM while loading.\n   * @method _canStartLoad\n   * @param {AbstractLoader} loader The loader for the item\n   * @return {Boolean} Whether the item can start a load or not.\n   * @private\n   */\n\n\n  p._canStartLoad = function (loader) {\n    if (!this.maintainScriptOrder || loader.preferXHR) {\n      return true;\n    }\n\n    var item = loader.getItem();\n\n    if (item.type != createjs.LoadQueue.JAVASCRIPT) {\n      return true;\n    }\n\n    if (this._currentlyLoadingScript) {\n      return false;\n    }\n\n    var index = this._scriptOrder.indexOf(item);\n\n    var i = 0;\n\n    while (i < index) {\n      var checkItem = this._loadedScripts[i];\n\n      if (checkItem == null) {\n        return false;\n      }\n\n      i++;\n    }\n\n    this._currentlyLoadingScript = true;\n    return true;\n  };\n  /**\n   * A load item is completed or was canceled, and needs to be removed from the LoadQueue.\n   * @method _removeLoadItem\n   * @param {AbstractLoader} loader A loader instance to remove.\n   * @private\n   */\n\n\n  p._removeLoadItem = function (loader) {\n    var l = this._currentLoads.length;\n\n    for (var i = 0; i < l; i++) {\n      if (this._currentLoads[i] == loader) {\n        this._currentLoads.splice(i, 1);\n\n        break;\n      }\n    }\n  };\n  /**\n   * Remove unneeded references from a loader.\n   *\n   * @param loader\n   * @private\n   */\n\n\n  p._cleanLoadItem = function (loader) {\n    var item = loader.getItem();\n\n    if (item) {\n      delete item._loader;\n    }\n  };\n  /**\n   * An item has dispatched progress. Propagate that progress, and update the LoadQueue's overall progress.\n   * @method _handleProgress\n   * @param {ProgressEvent} event The progress event from the item.\n   * @private\n   */\n\n\n  p._handleProgress = function (event) {\n    var loader = event.target;\n\n    this._sendFileProgress(loader.getItem(), loader.progress);\n\n    this._updateProgress();\n  };\n  /**\n   * Overall progress has changed, so determine the new progress amount and dispatch it. This changes any time an\n   * item dispatches progress or completes. Note that since we don't always know the actual filesize of items before\n   * they are loaded. In this case, we define a \"slot\" for each item (1 item in 10 would get 10%), and then append\n   * loaded progress on top of the already-loaded items.\n   *\n   * For example, if 5/10 items have loaded, and item 6 is 20% loaded, the total progress would be:\n   * <ul>\n   *      <li>5/10 of the items in the queue (50%)</li>\n   *      <li>plus 20% of item 6's slot (2%)</li>\n   *      <li>equals 52%</li>\n   * </ul>\n   * @method _updateProgress\n   * @private\n   */\n\n\n  p._updateProgress = function () {\n    var loaded = this._numItemsLoaded / this._numItems; // Fully Loaded Progress\n\n    var remaining = this._numItems - this._numItemsLoaded;\n\n    if (remaining > 0) {\n      var chunk = 0;\n\n      for (var i = 0, l = this._currentLoads.length; i < l; i++) {\n        chunk += this._currentLoads[i].progress;\n      }\n\n      loaded += chunk / remaining * (remaining / this._numItems);\n    }\n\n    if (this._lastProgress != loaded) {\n      this._sendProgress(loaded);\n\n      this._lastProgress = loaded;\n    }\n  };\n  /**\n   * Clean out item results, to free them from memory. Mainly, the loaded item and results are cleared from internal\n   * hashes.\n   * @method _disposeItem\n   * @param {LoadItem|Object} item The item that was passed in for preloading.\n   * @private\n   */\n\n\n  p._disposeItem = function (item) {\n    delete this._loadedResults[item.id];\n    delete this._loadedRawResults[item.id];\n    delete this._loadItemsById[item.id];\n    delete this._loadItemsBySrc[item.src];\n  };\n  /**\n   * Dispatch a \"fileprogress\" {{#crossLink \"Event\"}}{{/crossLink}}. Please see the LoadQueue {{#crossLink \"LoadQueue/fileprogress:event\"}}{{/crossLink}}\n   * event for details on the event payload.\n   * @method _sendFileProgress\n   * @param {LoadItem|Object} item The item that is being loaded.\n   * @param {Number} progress The amount the item has been loaded (between 0 and 1).\n   * @protected\n   */\n\n\n  p._sendFileProgress = function (item, progress) {\n    if (this._isCanceled() || this._paused) {\n      return;\n    }\n\n    if (!this.hasEventListener(\"fileprogress\")) {\n      return;\n    } //LM: Rework ProgressEvent to support this?\n\n\n    var event = new createjs.Event(\"fileprogress\");\n    event.progress = progress;\n    event.loaded = progress;\n    event.total = 1;\n    event.item = item;\n    this.dispatchEvent(event);\n  };\n  /**\n   * Dispatch a fileload {{#crossLink \"Event\"}}{{/crossLink}}. Please see the {{#crossLink \"LoadQueue/fileload:event\"}}{{/crossLink}} event for\n   * details on the event payload.\n   * @method _sendFileComplete\n   * @param {LoadItemObject} item The item that is being loaded.\n   * @param {AbstractLoader} loader\n   * @protected\n   */\n\n\n  p._sendFileComplete = function (item, loader) {\n    if (this._isCanceled() || this._paused) {\n      return;\n    }\n\n    var event = new createjs.Event(\"fileload\");\n    event.loader = loader;\n    event.item = item;\n    event.result = this._loadedResults[item.id];\n    event.rawResult = this._loadedRawResults[item.id]; // This calls a handler specified on the actual load item. Currently, the SoundJS plugin uses this.\n\n    if (item.completeHandler) {\n      item.completeHandler(event);\n    }\n\n    this.hasEventListener(\"fileload\") && this.dispatchEvent(event);\n  };\n  /**\n   * Dispatch a filestart {{#crossLink \"Event\"}}{{/crossLink}} immediately before a file starts to load. Please see\n   * the {{#crossLink \"LoadQueue/filestart:event\"}}{{/crossLink}} event for details on the event payload.\n   * @method _sendFileStart\n   * @param {LoadItem|Object} item The item that is being loaded.\n   * @protected\n   */\n\n\n  p._sendFileStart = function (item) {\n    var event = new createjs.Event(\"filestart\");\n    event.item = item;\n    this.hasEventListener(\"filestart\") && this.dispatchEvent(event);\n  };\n\n  p.toString = function () {\n    return \"[PreloadJS LoadQueue]\";\n  };\n\n  createjs.LoadQueue = createjs.promote(LoadQueue, \"AbstractLoader\");\n})(); //##############################################################################\n// TextLoader.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor\n\n  /**\n   * A loader for Text files.\n   * @class TextLoader\n   * @param {LoadItem|Object} loadItem\n   * @extends AbstractLoader\n   * @constructor\n   */\n\n  function TextLoader(loadItem) {\n    this.AbstractLoader_constructor(loadItem, true, createjs.AbstractLoader.TEXT);\n  }\n\n  ;\n  var p = createjs.extend(TextLoader, createjs.AbstractLoader);\n  var s = TextLoader; // static methods\n\n  /**\n   * Determines if the loader can load a specific item. This loader loads items that are of type {{#crossLink \"AbstractLoader/TEXT:property\"}}{{/crossLink}},\n   * but is also the default loader if a file type can not be determined.\n   * @method canLoadItem\n   * @param {LoadItem|Object} item The LoadItem that a LoadQueue is trying to load.\n   * @returns {Boolean} Whether the loader can load the item.\n   * @static\n   */\n\n  s.canLoadItem = function (item) {\n    return item.type == createjs.AbstractLoader.TEXT;\n  };\n\n  createjs.TextLoader = createjs.promote(TextLoader, \"AbstractLoader\");\n})(); //##############################################################################\n// BinaryLoader.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor\n\n  /**\n   * A loader for binary files. This is useful for loading web audio, or content that requires an ArrayBuffer.\n   * @class BinaryLoader\n   * @param {LoadItem|Object} loadItem\n   * @extends AbstractLoader\n   * @constructor\n   */\n\n  function BinaryLoader(loadItem) {\n    this.AbstractLoader_constructor(loadItem, true, createjs.AbstractLoader.BINARY);\n    this.on(\"initialize\", this._updateXHR, this);\n  }\n\n  ;\n  var p = createjs.extend(BinaryLoader, createjs.AbstractLoader);\n  var s = BinaryLoader; // static methods\n\n  /**\n   * Determines if the loader can load a specific item. This loader can only load items that are of type\n   * {{#crossLink \"AbstractLoader/BINARY:property\"}}{{/crossLink}}\n   * @method canLoadItem\n   * @param {LoadItem|Object} item The LoadItem that a LoadQueue is trying to load.\n   * @returns {Boolean} Whether the loader can load the item.\n   * @static\n   */\n\n  s.canLoadItem = function (item) {\n    return item.type == createjs.AbstractLoader.BINARY;\n  }; // private methods\n\n  /**\n   * Before the item loads, set the response type to \"arraybuffer\"\n   * @property _updateXHR\n   * @param {Event} event\n   * @private\n   */\n\n\n  p._updateXHR = function (event) {\n    event.loader.setResponseType(\"arraybuffer\");\n  };\n\n  createjs.BinaryLoader = createjs.promote(BinaryLoader, \"AbstractLoader\");\n})(); //##############################################################################\n// CSSLoader.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor\n\n  /**\n   * A loader for CSS files.\n   * @class CSSLoader\n   * @param {LoadItem|Object} loadItem\n   * @param {Boolean} preferXHR\n   * @extends AbstractLoader\n   * @constructor\n   */\n\n  function CSSLoader(loadItem, preferXHR) {\n    this.AbstractLoader_constructor(loadItem, preferXHR, createjs.AbstractLoader.CSS); // public properties\n\n    this.resultFormatter = this._formatResult; // protected properties\n\n    this._tagSrcAttribute = \"href\";\n\n    if (preferXHR) {\n      this._tag = document.createElement(\"style\");\n    } else {\n      this._tag = document.createElement(\"link\");\n    }\n\n    this._tag.rel = \"stylesheet\";\n    this._tag.type = \"text/css\";\n  }\n\n  ;\n  var p = createjs.extend(CSSLoader, createjs.AbstractLoader);\n  var s = CSSLoader; // static methods\n\n  /**\n   * Determines if the loader can load a specific item. This loader can only load items that are of type\n   * {{#crossLink \"AbstractLoader/CSS:property\"}}{{/crossLink}}.\n   * @method canLoadItem\n   * @param {LoadItem|Object} item The LoadItem that a LoadQueue is trying to load.\n   * @returns {Boolean} Whether the loader can load the item.\n   * @static\n   */\n\n  s.canLoadItem = function (item) {\n    return item.type == createjs.AbstractLoader.CSS;\n  }; // protected methods\n\n  /**\n   * The result formatter for CSS files.\n   * @method _formatResult\n   * @param {AbstractLoader} loader\n   * @returns {HTMLLinkElement|HTMLStyleElement}\n   * @private\n   */\n\n\n  p._formatResult = function (loader) {\n    if (this._preferXHR) {\n      var tag = loader.getTag();\n\n      if (tag.styleSheet) {\n        // IE\n        tag.styleSheet.cssText = loader.getResult(true);\n      } else {\n        var textNode = document.createTextNode(loader.getResult(true));\n        tag.appendChild(textNode);\n      }\n    } else {\n      tag = this._tag;\n    }\n\n    createjs.DomUtils.appendToHead(tag);\n    return tag;\n  };\n\n  createjs.CSSLoader = createjs.promote(CSSLoader, \"AbstractLoader\");\n})(); //##############################################################################\n// ImageLoader.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor\n\n  /**\n   * A loader for image files.\n   * @class ImageLoader\n   * @param {LoadItem|Object} loadItem\n   * @param {Boolean} preferXHR\n   * @extends AbstractLoader\n   * @constructor\n   */\n\n  function ImageLoader(loadItem, preferXHR) {\n    this.AbstractLoader_constructor(loadItem, preferXHR, createjs.AbstractLoader.IMAGE); // public properties\n\n    this.resultFormatter = this._formatResult; // protected properties\n\n    this._tagSrcAttribute = \"src\"; // Check if the preload item is already a tag.\n\n    if (createjs.RequestUtils.isImageTag(loadItem)) {\n      this._tag = loadItem;\n    } else if (createjs.RequestUtils.isImageTag(loadItem.src)) {\n      this._tag = loadItem.src;\n    } else if (createjs.RequestUtils.isImageTag(loadItem.tag)) {\n      this._tag = loadItem.tag;\n    }\n\n    if (this._tag != null) {\n      this._preferXHR = false;\n    } else {\n      this._tag = document.createElement(\"img\");\n    }\n\n    this.on(\"initialize\", this._updateXHR, this);\n  }\n\n  ;\n  var p = createjs.extend(ImageLoader, createjs.AbstractLoader);\n  var s = ImageLoader; // static methods\n\n  /**\n   * Determines if the loader can load a specific item. This loader can only load items that are of type\n   * {{#crossLink \"AbstractLoader/IMAGE:property\"}}{{/crossLink}}.\n   * @method canLoadItem\n   * @param {LoadItem|Object} item The LoadItem that a LoadQueue is trying to load.\n   * @returns {Boolean} Whether the loader can load the item.\n   * @static\n   */\n\n  s.canLoadItem = function (item) {\n    return item.type == createjs.AbstractLoader.IMAGE;\n  }; // public methods\n\n\n  p.load = function () {\n    if (this._tag.src != \"\" && this._tag.complete) {\n      this._sendComplete();\n\n      return;\n    }\n\n    var crossOrigin = this._item.crossOrigin;\n\n    if (crossOrigin == true) {\n      crossOrigin = \"Anonymous\";\n    }\n\n    if (crossOrigin != null && !createjs.RequestUtils.isLocal(this._item.src)) {\n      this._tag.crossOrigin = crossOrigin;\n    }\n\n    this.AbstractLoader_load();\n  }; // protected methods\n\n  /**\n   * Before the item loads, set its mimeType and responseType.\n   * @property _updateXHR\n   * @param {Event} event\n   * @private\n   */\n\n\n  p._updateXHR = function (event) {\n    event.loader.mimeType = 'text/plain; charset=x-user-defined-binary'; // Only exists for XHR\n\n    if (event.loader.setResponseType) {\n      event.loader.setResponseType(\"blob\");\n    }\n  };\n  /**\n   * The result formatter for Image files.\n   * @method _formatResult\n   * @param {AbstractLoader} loader\n   * @returns {HTMLImageElement}\n   * @private\n   */\n\n\n  p._formatResult = function (loader) {\n    return this._formatImage;\n  };\n  /**\n   * The asynchronous image formatter function. This is required because images have\n   * a short delay before they are ready.\n   * @method _formatImage\n   * @param {Function} successCallback The method to call when the result has finished formatting\n   * @param {Function} errorCallback The method to call if an error occurs during formatting\n   * @private\n   */\n\n\n  p._formatImage = function (successCallback, errorCallback) {\n    var tag = this._tag;\n    var URL = window.URL || window.webkitURL;\n\n    if (!this._preferXHR) {//document.body.removeChild(tag);\n    } else if (URL) {\n      var objURL = URL.createObjectURL(this.getResult(true));\n      tag.src = objURL;\n      tag.addEventListener(\"load\", this._cleanUpURL, false);\n      tag.addEventListener(\"error\", this._cleanUpURL, false);\n    } else {\n      tag.src = this._item.src;\n    }\n\n    if (tag.complete) {\n      successCallback(tag);\n    } else {\n      tag.onload = createjs.proxy(function () {\n        successCallback(this._tag);\n      }, this);\n      tag.onerror = createjs.proxy(function () {\n        errorCallback(_this._tag);\n      }, this);\n    }\n  };\n  /**\n   * Clean up the ObjectURL, the tag is done with it. Note that this function is run\n   * as an event listener without a proxy/closure, as it doesn't require it - so do not\n   * include any functionality that requires scope without changing it.\n   * @method _cleanUpURL\n   * @param event\n   * @private\n   */\n\n\n  p._cleanUpURL = function (event) {\n    var URL = window.URL || window.webkitURL;\n    URL.revokeObjectURL(event.target.src);\n  };\n\n  createjs.ImageLoader = createjs.promote(ImageLoader, \"AbstractLoader\");\n})(); //##############################################################################\n// JavaScriptLoader.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor\n\n  /**\n   * A loader for JavaScript files.\n   * @class JavaScriptLoader\n   * @param {LoadItem|Object} loadItem\n   * @param {Boolean} preferXHR\n   * @extends AbstractLoader\n   * @constructor\n   */\n\n  function JavaScriptLoader(loadItem, preferXHR) {\n    this.AbstractLoader_constructor(loadItem, preferXHR, createjs.AbstractLoader.JAVASCRIPT); // public properties\n\n    this.resultFormatter = this._formatResult; // protected properties\n\n    this._tagSrcAttribute = \"src\";\n    this.setTag(document.createElement(\"script\"));\n  }\n\n  ;\n  var p = createjs.extend(JavaScriptLoader, createjs.AbstractLoader);\n  var s = JavaScriptLoader; // static methods\n\n  /**\n   * Determines if the loader can load a specific item. This loader can only load items that are of type\n   * {{#crossLink \"AbstractLoader/JAVASCRIPT:property\"}}{{/crossLink}}\n   * @method canLoadItem\n   * @param {LoadItem|Object} item The LoadItem that a LoadQueue is trying to load.\n   * @returns {Boolean} Whether the loader can load the item.\n   * @static\n   */\n\n  s.canLoadItem = function (item) {\n    return item.type == createjs.AbstractLoader.JAVASCRIPT;\n  }; // protected methods\n\n  /**\n   * The result formatter for JavaScript files.\n   * @method _formatResult\n   * @param {AbstractLoader} loader\n   * @returns {HTMLLinkElement|HTMLStyleElement}\n   * @private\n   */\n\n\n  p._formatResult = function (loader) {\n    var tag = loader.getTag();\n\n    if (this._preferXHR) {\n      tag.text = loader.getResult(true);\n    }\n\n    return tag;\n  };\n\n  createjs.JavaScriptLoader = createjs.promote(JavaScriptLoader, \"AbstractLoader\");\n})(); //##############################################################################\n// JSONLoader.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor\n\n  /**\n   * A loader for JSON files. To load JSON cross-domain, use JSONP and the {{#crossLink \"JSONPLoader\"}}{{/crossLink}}\n   * instead. To load JSON-formatted manifests, use {{#crossLink \"ManifestLoader\"}}{{/crossLink}}, and to\n   * load EaselJS SpriteSheets, use {{#crossLink \"SpriteSheetLoader\"}}{{/crossLink}}.\n   * @class JSONLoader\n   * @param {LoadItem|Object} loadItem\n   * @extends AbstractLoader\n   * @constructor\n   */\n\n  function JSONLoader(loadItem) {\n    this.AbstractLoader_constructor(loadItem, true, createjs.AbstractLoader.JSON); // public properties\n\n    this.resultFormatter = this._formatResult;\n  }\n\n  ;\n  var p = createjs.extend(JSONLoader, createjs.AbstractLoader);\n  var s = JSONLoader; // static methods\n\n  /**\n   * Determines if the loader can load a specific item. This loader can only load items that are of type\n   * {{#crossLink \"AbstractLoader/JSON:property\"}}{{/crossLink}}.\n   * @method canLoadItem\n   * @param {LoadItem|Object} item The LoadItem that a LoadQueue is trying to load.\n   * @returns {Boolean} Whether the loader can load the item.\n   * @static\n   */\n\n  s.canLoadItem = function (item) {\n    return item.type == createjs.AbstractLoader.JSON;\n  }; // protected methods\n\n  /**\n   * The result formatter for JSON files.\n   * @method _formatResult\n   * @param {AbstractLoader} loader\n   * @returns {HTMLLinkElement|HTMLStyleElement}\n   * @private\n   */\n\n\n  p._formatResult = function (loader) {\n    var json = null;\n\n    try {\n      json = createjs.DataUtils.parseJSON(loader.getResult(true));\n    } catch (e) {\n      var event = new createjs.ErrorEvent(\"JSON_FORMAT\", null, e);\n\n      this._sendError(event);\n\n      return e;\n    }\n\n    return json;\n  };\n\n  createjs.JSONLoader = createjs.promote(JSONLoader, \"AbstractLoader\");\n})(); //##############################################################################\n// JSONPLoader.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor\n\n  /**\n   * A loader for JSONP files, which are JSON-formatted text files, wrapped in a callback. To load regular JSON\n   * without a callback use the {{#crossLink \"JSONLoader\"}}{{/crossLink}} instead. To load JSON-formatted manifests,\n   * use {{#crossLink \"ManifestLoader\"}}{{/crossLink}}, and to load EaselJS SpriteSheets, use\n   * {{#crossLink \"SpriteSheetLoader\"}}{{/crossLink}}.\n   *\n   * JSONP is a format that provides a solution for loading JSON files cross-domain <em>without</em> requiring CORS.\n   * JSONP files are loaded as JavaScript, and the \"callback\" is executed once they are loaded. The callback in the\n   * JSONP must match the callback passed to the loadItem.\n   *\n   * <h4>Example JSONP</h4>\n   *\n   * \t\tcallbackName({\n   * \t\t\t\"name\": \"value\",\n   *\t \t\t\"num\": 3,\n   *\t\t\t\"obj\": { \"bool\":true }\n   * \t\t});\n   *\n   * <h4>Example</h4>\n   *\n   * \t\tvar loadItem = {id:\"json\", type:\"jsonp\", src:\"http://server.com/text.json\", callback:\"callbackName\"}\n   * \t\tvar queue = new createjs.LoadQueue();\n   * \t\tqueue.on(\"complete\", handleComplete);\n   * \t\tqueue.loadItem(loadItem);\n   *\n   * \t\tfunction handleComplete(event) }\n   * \t\t\tvar json = queue.getResult(\"json\");\n   * \t\t\tconsole.log(json.obj.bool); // true\n   * \t\t}\n   *\n   * Note that JSONP files loaded concurrently require a <em>unique</em> callback. To ensure JSONP files are loaded\n   * in order, either use the {{#crossLink \"LoadQueue/setMaxConnections\"}}{{/crossLink}} method (set to 1),\n   * or set {{#crossLink \"LoadItem/maintainOrder:property\"}}{{/crossLink}} on items with the same callback.\n   *\n   * @class JSONPLoader\n   * @param {LoadItem|Object} loadItem\n   * @extends AbstractLoader\n   * @constructor\n   */\n\n  function JSONPLoader(loadItem) {\n    this.AbstractLoader_constructor(loadItem, false, createjs.AbstractLoader.JSONP);\n    this.setTag(document.createElement(\"script\"));\n    this.getTag().type = \"text/javascript\";\n  }\n\n  ;\n  var p = createjs.extend(JSONPLoader, createjs.AbstractLoader);\n  var s = JSONPLoader; // static methods\n\n  /**\n   * Determines if the loader can load a specific item. This loader can only load items that are of type\n   * {{#crossLink \"AbstractLoader/JSONP:property\"}}{{/crossLink}}.\n   * @method canLoadItem\n   * @param {LoadItem|Object} item The LoadItem that a LoadQueue is trying to load.\n   * @returns {Boolean} Whether the loader can load the item.\n   * @static\n   */\n\n  s.canLoadItem = function (item) {\n    return item.type == createjs.AbstractLoader.JSONP;\n  }; // public methods\n\n\n  p.cancel = function () {\n    this.AbstractLoader_cancel();\n\n    this._dispose();\n  };\n  /**\n   * Loads the JSONp file.  Because of the unique loading needs of JSONp\n   * we don't use the AbstractLoader.load() method.\n   *\n   * @method load\n   *\n   */\n\n\n  p.load = function () {\n    if (this._item.callback == null) {\n      throw new Error('callback is required for loading JSONP requests.');\n    } // TODO: Look into creating our own iFrame to handle the load\n    // In the first attempt, FF did not get the result\n    //   result instanceof Object did not work either\n    //   so we would need to clone the result.\n\n\n    if (window[this._item.callback] != null) {\n      throw new Error(\"JSONP callback '\" + this._item.callback + \"' already exists on window. You need to specify a different callback or re-name the current one.\");\n    }\n\n    window[this._item.callback] = createjs.proxy(this._handleLoad, this);\n    window.document.body.appendChild(this._tag);\n    this._loadTimeout = setTimeout(createjs.proxy(this._handleTimeout, this), this._item.loadTimeout); // Load the tag\n\n    this._tag.src = this._item.src;\n  }; // private methods\n\n  /**\n   * Handle the JSONP callback, which is a public method defined on `window`.\n   * @method _handleLoad\n   * @param {Object} data The formatted JSON data.\n   * @private\n   */\n\n\n  p._handleLoad = function (data) {\n    this._result = this._rawResult = data;\n\n    this._sendComplete();\n\n    this._dispose();\n  };\n  /**\n   * The tag request has not loaded within the time specfied in loadTimeout.\n   * @method _handleError\n   * @param {Object} event The XHR error event.\n   * @private\n   */\n\n\n  p._handleTimeout = function () {\n    this._dispose();\n\n    this.dispatchEvent(new createjs.ErrorEvent(\"timeout\"));\n  };\n  /**\n   * Clean up the JSONP load. This clears out the callback and script tag that this loader creates.\n   * @method _dispose\n   * @private\n   */\n\n\n  p._dispose = function () {\n    window.document.body.removeChild(this._tag);\n    delete window[this._item.callback];\n    clearTimeout(this._loadTimeout);\n  };\n\n  createjs.JSONPLoader = createjs.promote(JSONPLoader, \"AbstractLoader\");\n})(); //##############################################################################\n// ManifestLoader.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor\n\n  /**\n   * A loader for JSON manifests. Items inside the manifest are loaded before the loader completes. To load manifests\n   * using JSONP, specify a {{#crossLink \"LoadItem/callback:property\"}}{{/crossLink}} as part of the\n   * {{#crossLink \"LoadItem\"}}{{/crossLink}}.\n   *\n   * The list of files in the manifest must be defined on the top-level JSON object in a `manifest` property. This\n   * example shows a sample manifest definition, as well as how to to include a sub-manifest.\n   *\n   * \t\t{\n   * \t\t\t\"path\": \"assets/\",\n   *\t \t    \"manifest\": [\n   *\t\t\t\t\"image.png\",\n   *\t\t\t\t{\"src\": \"image2.png\", \"id\":\"image2\"},\n   *\t\t\t\t{\"src\": \"sub-manifest.json\", \"type\":\"manifest\", \"callback\":\"jsonCallback\"}\n   *\t \t    ]\n   *\t \t}\n   *\n   * When a ManifestLoader has completed loading, the parent loader (usually a {{#crossLink \"LoadQueue\"}}{{/crossLink}},\n   * but could also be another ManifestLoader) will inherit all the loaded items, so you can access them directly.\n   *\n   * Note that the {{#crossLink \"JSONLoader\"}}{{/crossLink}} and {{#crossLink \"JSONPLoader\"}}{{/crossLink}} are\n   * higher priority loaders, so manifests <strong>must</strong> set the {{#crossLink \"LoadItem\"}}{{/crossLink}}\n   * {{#crossLink \"LoadItem/type:property\"}}{{/crossLink}} property to {{#crossLink \"AbstractLoader/MANIFEST:property\"}}{{/crossLink}}.\n   * @class ManifestLoader\n   * @param {LoadItem|Object} loadItem\n   * @extends AbstractLoader\n   * @constructor\n   */\n\n  function ManifestLoader(loadItem) {\n    this.AbstractLoader_constructor(loadItem, null, createjs.AbstractLoader.MANIFEST); // Public Properties\n\n    /**\n     * An array of the plugins registered using {{#crossLink \"LoadQueue/installPlugin\"}}{{/crossLink}},\n     * used to pass plugins to new LoadQueues that may be created.\n     * @property _plugins\n     * @type {Array}\n     * @private\n     * @since 0.6.1\n     */\n\n    this.plugins = null; // Protected Properties\n\n    /**\n     * An internal {{#crossLink \"LoadQueue\"}}{{/crossLink}} that loads the contents of the manifest.\n     * @property _manifestQueue\n     * @type {LoadQueue}\n     * @private\n     */\n\n    this._manifestQueue = null;\n  }\n\n  ;\n  var p = createjs.extend(ManifestLoader, createjs.AbstractLoader);\n  var s = ManifestLoader; // static properties\n\n  /**\n   * The amount of progress that the manifest itself takes up.\n   * @property MANIFEST_PROGRESS\n   * @type {number}\n   * @default 0.25 (25%)\n   * @private\n   * @static\n   */\n\n  s.MANIFEST_PROGRESS = 0.25; // static methods\n\n  /**\n   * Determines if the loader can load a specific item. This loader can only load items that are of type\n   * {{#crossLink \"AbstractLoader/MANIFEST:property\"}}{{/crossLink}}\n   * @method canLoadItem\n   * @param {LoadItem|Object} item The LoadItem that a LoadQueue is trying to load.\n   * @returns {Boolean} Whether the loader can load the item.\n   * @static\n   */\n\n  s.canLoadItem = function (item) {\n    return item.type == createjs.AbstractLoader.MANIFEST;\n  }; // public methods\n\n\n  p.load = function () {\n    this.AbstractLoader_load();\n  }; // protected methods\n\n\n  p._createRequest = function () {\n    var callback = this._item.callback;\n\n    if (callback != null) {\n      this._request = new createjs.JSONPLoader(this._item);\n    } else {\n      this._request = new createjs.JSONLoader(this._item);\n    }\n  };\n\n  p.handleEvent = function (event) {\n    switch (event.type) {\n      case \"complete\":\n        this._rawResult = event.target.getResult(true);\n        this._result = event.target.getResult();\n\n        this._sendProgress(s.MANIFEST_PROGRESS);\n\n        this._loadManifest(this._result);\n\n        return;\n\n      case \"progress\":\n        event.loaded *= s.MANIFEST_PROGRESS;\n        this.progress = event.loaded / event.total;\n\n        if (isNaN(this.progress) || this.progress == Infinity) {\n          this.progress = 0;\n        }\n\n        this._sendProgress(event);\n\n        return;\n    }\n\n    this.AbstractLoader_handleEvent(event);\n  };\n\n  p.destroy = function () {\n    this.AbstractLoader_destroy();\n\n    this._manifestQueue.close();\n  };\n  /**\n   * Create and load the manifest items once the actual manifest has been loaded.\n   * @method _loadManifest\n   * @param {Object} json\n   * @private\n   */\n\n\n  p._loadManifest = function (json) {\n    if (json && json.manifest) {\n      var queue = this._manifestQueue = new createjs.LoadQueue();\n      queue.on(\"fileload\", this._handleManifestFileLoad, this);\n      queue.on(\"progress\", this._handleManifestProgress, this);\n      queue.on(\"complete\", this._handleManifestComplete, this, true);\n      queue.on(\"error\", this._handleManifestError, this, true);\n\n      for (var i = 0, l = this.plugins.length; i < l; i++) {\n        // conserve order of plugins\n        queue.installPlugin(this.plugins[i]);\n      }\n\n      queue.loadManifest(json);\n    } else {\n      this._sendComplete();\n    }\n  };\n  /**\n   * An item from the {{#crossLink \"_manifestQueue:property\"}}{{/crossLink}} has completed.\n   * @method _handleManifestFileLoad\n   * @param {Event} event\n   * @private\n   */\n\n\n  p._handleManifestFileLoad = function (event) {\n    event.target = null;\n    this.dispatchEvent(event);\n  };\n  /**\n   * The manifest has completed loading. This triggers the {{#crossLink \"AbstractLoader/complete:event\"}}{{/crossLink}}\n   * {{#crossLink \"Event\"}}{{/crossLink}} from the ManifestLoader.\n   * @method _handleManifestComplete\n   * @param {Event} event\n   * @private\n   */\n\n\n  p._handleManifestComplete = function (event) {\n    this._loadedItems = this._manifestQueue.getItems(true);\n\n    this._sendComplete();\n  };\n  /**\n   * The manifest has reported progress.\n   * @method _handleManifestProgress\n   * @param {ProgressEvent} event\n   * @private\n   */\n\n\n  p._handleManifestProgress = function (event) {\n    this.progress = event.progress * (1 - s.MANIFEST_PROGRESS) + s.MANIFEST_PROGRESS;\n\n    this._sendProgress(this.progress);\n  };\n  /**\n   * The manifest has reported an error with one of the files.\n   * @method _handleManifestError\n   * @param {ErrorEvent} event\n   * @private\n   */\n\n\n  p._handleManifestError = function (event) {\n    var newEvent = new createjs.Event(\"fileerror\");\n    newEvent.item = event.data;\n    this.dispatchEvent(newEvent);\n  };\n\n  createjs.ManifestLoader = createjs.promote(ManifestLoader, \"AbstractLoader\");\n})(); //##############################################################################\n// SoundLoader.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor\n\n  /**\n   * A loader for HTML audio files. PreloadJS can not load WebAudio files, as a WebAudio context is required, which\n   * should be created by either a library playing the sound (such as <a href=\"http://soundjs.com\">SoundJS</a>, or an\n   * external framework that handles audio playback. To load content that can be played by WebAudio, use the\n   * {{#crossLink \"BinaryLoader\"}}{{/crossLink}}, and handle the audio context decoding manually.\n   * @class SoundLoader\n   * @param {LoadItem|Object} loadItem\n   * @param {Boolean} preferXHR\n   * @extends AbstractMediaLoader\n   * @constructor\n   */\n\n  function SoundLoader(loadItem, preferXHR) {\n    this.AbstractMediaLoader_constructor(loadItem, preferXHR, createjs.AbstractLoader.SOUND); // protected properties\n\n    if (createjs.RequestUtils.isAudioTag(loadItem)) {\n      this._tag = loadItem;\n    } else if (createjs.RequestUtils.isAudioTag(loadItem.src)) {\n      this._tag = loadItem;\n    } else if (createjs.RequestUtils.isAudioTag(loadItem.tag)) {\n      this._tag = createjs.RequestUtils.isAudioTag(loadItem) ? loadItem : loadItem.src;\n    }\n\n    if (this._tag != null) {\n      this._preferXHR = false;\n    }\n  }\n\n  ;\n  var p = createjs.extend(SoundLoader, createjs.AbstractMediaLoader);\n  var s = SoundLoader; // static methods\n\n  /**\n   * Determines if the loader can load a specific item. This loader can only load items that are of type\n   * {{#crossLink \"AbstractLoader/SOUND:property\"}}{{/crossLink}}.\n   * @method canLoadItem\n   * @param {LoadItem|Object} item The LoadItem that a LoadQueue is trying to load.\n   * @returns {Boolean} Whether the loader can load the item.\n   * @static\n   */\n\n  s.canLoadItem = function (item) {\n    return item.type == createjs.AbstractLoader.SOUND;\n  }; // protected methods\n\n\n  p._createTag = function (src) {\n    var tag = document.createElement(\"audio\");\n    tag.autoplay = false;\n    tag.preload = \"none\"; //LM: Firefox fails when this the preload=\"none\" for other tags, but it needs to be \"none\" to ensure PreloadJS works.\n\n    tag.src = src;\n    return tag;\n  };\n\n  createjs.SoundLoader = createjs.promote(SoundLoader, \"AbstractMediaLoader\");\n})(); //##############################################################################\n// VideoLoader.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor\n\n  /**\n   * A loader for video files.\n   * @class VideoLoader\n   * @param {LoadItem|Object} loadItem\n   * @param {Boolean} preferXHR\n   * @extends AbstractMediaLoader\n   * @constructor\n   */\n\n  function VideoLoader(loadItem, preferXHR) {\n    this.AbstractMediaLoader_constructor(loadItem, preferXHR, createjs.AbstractLoader.VIDEO);\n\n    if (createjs.RequestUtils.isVideoTag(loadItem) || createjs.RequestUtils.isVideoTag(loadItem.src)) {\n      this.setTag(createjs.RequestUtils.isVideoTag(loadItem) ? loadItem : loadItem.src); // We can't use XHR for a tag that's passed in.\n\n      this._preferXHR = false;\n    } else {\n      this.setTag(this._createTag());\n    }\n  }\n\n  ;\n  var p = createjs.extend(VideoLoader, createjs.AbstractMediaLoader);\n  var s = VideoLoader;\n  /**\n   * Create a new video tag\n   *\n   * @returns {HTMLElement}\n   * @private\n   */\n\n  p._createTag = function () {\n    return document.createElement(\"video\");\n  }; // static methods\n\n  /**\n   * Determines if the loader can load a specific item. This loader can only load items that are of type\n   * {{#crossLink \"AbstractLoader/VIDEO:property\"}}{{/crossLink}}.\n   * @method canLoadItem\n   * @param {LoadItem|Object} item The LoadItem that a LoadQueue is trying to load.\n   * @returns {Boolean} Whether the loader can load the item.\n   * @static\n   */\n\n\n  s.canLoadItem = function (item) {\n    return item.type == createjs.AbstractLoader.VIDEO;\n  };\n\n  createjs.VideoLoader = createjs.promote(VideoLoader, \"AbstractMediaLoader\");\n})(); //##############################################################################\n// SpriteSheetLoader.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor\n\n  /**\n   * A loader for EaselJS SpriteSheets. Images inside the spritesheet definition are loaded before the loader\n   * completes. To load SpriteSheets using JSONP, specify a {{#crossLink \"LoadItem/callback:property\"}}{{/crossLink}}\n   * as part of the {{#crossLink \"LoadItem\"}}{{/crossLink}}. Note that the {{#crossLink \"JSONLoader\"}}{{/crossLink}}\n   * and {{#crossLink \"JSONPLoader\"}}{{/crossLink}} are higher priority loaders, so SpriteSheets <strong>must</strong>\n   * set the {{#crossLink \"LoadItem\"}}{{/crossLink}} {{#crossLink \"LoadItem/type:property\"}}{{/crossLink}} property\n   * to {{#crossLink \"AbstractLoader/SPRITESHEET:property\"}}{{/crossLink}}.\n   *\n   * The {{#crossLink \"LoadItem\"}}{{/crossLink}} {{#crossLink \"LoadItem/crossOrigin:property\"}}{{/crossLink}} as well\n   * as the {{#crossLink \"LoadQueue's\"}}{{/crossLink}} `basePath` argument and {{#crossLink \"LoadQueue/_preferXHR\"}}{{/crossLink}}\n   * property supplied to the {{#crossLink \"LoadQueue\"}}{{/crossLink}} are passed on to the sub-manifest that loads\n   * the SpriteSheet images.\n   *\n   * Note that the SpriteSheet JSON does not respect the {{#crossLink \"LoadQueue/_preferXHR:property\"}}{{/crossLink}}\n   * property, which should instead be determined by the presence of a {{#crossLink \"LoadItem/callback:property\"}}{{/crossLink}}\n   * property on the SpriteSheet load item. This is because the JSON loaded will have a different format depending on\n   * if it is loaded as JSON, so just changing `preferXHR` is not enough to change how it is loaded.\n   * @class SpriteSheetLoader\n   * @param {LoadItem|Object} loadItem\n   * @extends AbstractLoader\n   * @constructor\n   */\n\n  function SpriteSheetLoader(loadItem, preferXHR) {\n    this.AbstractLoader_constructor(loadItem, preferXHR, createjs.AbstractLoader.SPRITESHEET); // protected properties\n\n    /**\n     * An internal queue which loads the SpriteSheet's images.\n     * @method _manifestQueue\n     * @type {LoadQueue}\n     * @private\n     */\n\n    this._manifestQueue = null;\n  }\n\n  var p = createjs.extend(SpriteSheetLoader, createjs.AbstractLoader);\n  var s = SpriteSheetLoader; // static properties\n\n  /**\n   * The amount of progress that the manifest itself takes up.\n   * @property SPRITESHEET_PROGRESS\n   * @type {number}\n   * @default 0.25 (25%)\n   * @private\n   * @static\n   */\n\n  s.SPRITESHEET_PROGRESS = 0.25; // static methods\n\n  /**\n   * Determines if the loader can load a specific item. This loader can only load items that are of type\n   * {{#crossLink \"AbstractLoader/SPRITESHEET:property\"}}{{/crossLink}}\n   * @method canLoadItem\n   * @param {LoadItem|Object} item The LoadItem that a LoadQueue is trying to load.\n   * @returns {Boolean} Whether the loader can load the item.\n   * @static\n   */\n\n  s.canLoadItem = function (item) {\n    return item.type == createjs.AbstractLoader.SPRITESHEET;\n  }; // public methods\n\n\n  p.destroy = function () {\n    this.AbstractLoader_destroy;\n\n    this._manifestQueue.close();\n  }; // protected methods\n\n\n  p._createRequest = function () {\n    var callback = this._item.callback;\n\n    if (callback != null) {\n      this._request = new createjs.JSONPLoader(this._item);\n    } else {\n      this._request = new createjs.JSONLoader(this._item);\n    }\n  };\n\n  p.handleEvent = function (event) {\n    switch (event.type) {\n      case \"complete\":\n        this._rawResult = event.target.getResult(true);\n        this._result = event.target.getResult();\n\n        this._sendProgress(s.SPRITESHEET_PROGRESS);\n\n        this._loadManifest(this._result);\n\n        return;\n\n      case \"progress\":\n        event.loaded *= s.SPRITESHEET_PROGRESS;\n        this.progress = event.loaded / event.total;\n\n        if (isNaN(this.progress) || this.progress == Infinity) {\n          this.progress = 0;\n        }\n\n        this._sendProgress(event);\n\n        return;\n    }\n\n    this.AbstractLoader_handleEvent(event);\n  };\n  /**\n   * Create and load the images once the SpriteSheet JSON has been loaded.\n   * @method _loadManifest\n   * @param {Object} json\n   * @private\n   */\n\n\n  p._loadManifest = function (json) {\n    if (json && json.images) {\n      var queue = this._manifestQueue = new createjs.LoadQueue(this._preferXHR, this._item.path, this._item.crossOrigin);\n      queue.on(\"complete\", this._handleManifestComplete, this, true);\n      queue.on(\"fileload\", this._handleManifestFileLoad, this);\n      queue.on(\"progress\", this._handleManifestProgress, this);\n      queue.on(\"error\", this._handleManifestError, this, true);\n      queue.loadManifest(json.images);\n    }\n  };\n  /**\n   * An item from the {{#crossLink \"_manifestQueue:property\"}}{{/crossLink}} has completed.\n   * @method _handleManifestFileLoad\n   * @param {Event} event\n   * @private\n   */\n\n\n  p._handleManifestFileLoad = function (event) {\n    var image = event.result;\n\n    if (image != null) {\n      var images = this.getResult().images;\n      var pos = images.indexOf(event.item.src);\n      images[pos] = image;\n    }\n  };\n  /**\n   * The images have completed loading. This triggers the {{#crossLink \"AbstractLoader/complete:event\"}}{{/crossLink}}\n   * {{#crossLink \"Event\"}}{{/crossLink}} from the SpriteSheetLoader.\n   * @method _handleManifestComplete\n   * @param {Event} event\n   * @private\n   */\n\n\n  p._handleManifestComplete = function (event) {\n    this._result = new createjs.SpriteSheet(this._result);\n    this._loadedItems = this._manifestQueue.getItems(true);\n\n    this._sendComplete();\n  };\n  /**\n   * The images {{#crossLink \"LoadQueue\"}}{{/crossLink}} has reported progress.\n   * @method _handleManifestProgress\n   * @param {ProgressEvent} event\n   * @private\n   */\n\n\n  p._handleManifestProgress = function (event) {\n    this.progress = event.progress * (1 - s.SPRITESHEET_PROGRESS) + s.SPRITESHEET_PROGRESS;\n\n    this._sendProgress(this.progress);\n  };\n  /**\n   * An image has reported an error.\n   * @method _handleManifestError\n   * @param {ErrorEvent} event\n   * @private\n   */\n\n\n  p._handleManifestError = function (event) {\n    var newEvent = new createjs.Event(\"fileerror\");\n    newEvent.item = event.data;\n    this.dispatchEvent(newEvent);\n  };\n\n  createjs.SpriteSheetLoader = createjs.promote(SpriteSheetLoader, \"AbstractLoader\");\n})(); //##############################################################################\n// SVGLoader.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor\n\n  /**\n   * A loader for SVG files.\n   * @class SVGLoader\n   * @param {LoadItem|Object} loadItem\n   * @param {Boolean} preferXHR\n   * @extends AbstractLoader\n   * @constructor\n   */\n\n  function SVGLoader(loadItem, preferXHR) {\n    this.AbstractLoader_constructor(loadItem, preferXHR, createjs.AbstractLoader.SVG); // public properties\n\n    this.resultFormatter = this._formatResult; // protected properties\n\n    this._tagSrcAttribute = \"data\";\n\n    if (preferXHR) {\n      this.setTag(document.createElement(\"svg\"));\n    } else {\n      this.setTag(document.createElement(\"object\"));\n      this.getTag().type = \"image/svg+xml\";\n    }\n  }\n\n  ;\n  var p = createjs.extend(SVGLoader, createjs.AbstractLoader);\n  var s = SVGLoader; // static methods\n\n  /**\n   * Determines if the loader can load a specific item. This loader can only load items that are of type\n   * {{#crossLink \"AbstractLoader/SVG:property\"}}{{/crossLink}}\n   * @method canLoadItem\n   * @param {LoadItem|Object} item The LoadItem that a LoadQueue is trying to load.\n   * @returns {Boolean} Whether the loader can load the item.\n   * @static\n   */\n\n  s.canLoadItem = function (item) {\n    return item.type == createjs.AbstractLoader.SVG;\n  }; // protected methods\n\n  /**\n   * The result formatter for SVG files.\n   * @method _formatResult\n   * @param {AbstractLoader} loader\n   * @returns {Object}\n   * @private\n   */\n\n\n  p._formatResult = function (loader) {\n    // mime should be image/svg+xml, but Opera requires text/xml\n    var xml = createjs.DataUtils.parseXML(loader.getResult(true), \"text/xml\");\n    var tag = loader.getTag();\n\n    if (!this._preferXHR && document.body.contains(tag)) {\n      document.body.removeChild(tag);\n    }\n\n    if (xml.documentElement != null) {\n      tag.appendChild(xml.documentElement);\n      tag.style.visibility = \"visible\";\n      return tag;\n    } else {\n      // For browsers that don't support SVG, just give them the XML. (IE 9-8)\n      return xml;\n    }\n  };\n\n  createjs.SVGLoader = createjs.promote(SVGLoader, \"AbstractLoader\");\n})(); //##############################################################################\n// XMLLoader.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor\n\n  /**\n   * A loader for CSS files.\n   * @class XMLLoader\n   * @param {LoadItem|Object} loadItem\n   * @extends AbstractLoader\n   * @constructor\n   */\n\n  function XMLLoader(loadItem) {\n    this.AbstractLoader_constructor(loadItem, true, createjs.AbstractLoader.XML); // public properties\n\n    this.resultFormatter = this._formatResult;\n  }\n\n  ;\n  var p = createjs.extend(XMLLoader, createjs.AbstractLoader);\n  var s = XMLLoader; // static methods\n\n  /**\n   * Determines if the loader can load a specific item. This loader can only load items that are of type\n   * {{#crossLink \"AbstractLoader/XML:property\"}}{{/crossLink}}.\n   * @method canLoadItem\n   * @param {LoadItem|Object} item The LoadItem that a LoadQueue is trying to load.\n   * @returns {Boolean} Whether the loader can load the item.\n   * @static\n   */\n\n  s.canLoadItem = function (item) {\n    return item.type == createjs.AbstractLoader.XML;\n  }; // protected methods\n\n  /**\n   * The result formatter for XML files.\n   * @method _formatResult\n   * @param {AbstractLoader} loader\n   * @returns {XMLDocument}\n   * @private\n   */\n\n\n  p._formatResult = function (loader) {\n    return createjs.DataUtils.parseXML(loader.getResult(true), \"text/xml\");\n  };\n\n  createjs.XMLLoader = createjs.promote(XMLLoader, \"AbstractLoader\");\n})(); //##############################################################################\n// version.js\n//##############################################################################\n\n\n(function () {\n  /**\n   * Static class holding library specific information such as the version and buildDate of the library.\n   * The SoundJS class has been renamed {{#crossLink \"Sound\"}}{{/crossLink}}.  Please see {{#crossLink \"Sound\"}}{{/crossLink}}\n   * for information on using sound.\n   * @class SoundJS\n   **/\n  var s = createjs.SoundJS = createjs.SoundJS || {};\n  /**\n   * The version string for this release.\n   * @property version\n   * @type String\n   * @static\n   **/\n\n  s.version =\n  /*=version*/\n  \"0.6.2\"; // injected by build process\n\n  /**\n   * The build date for this release in UTC format.\n   * @property buildDate\n   * @type String\n   * @static\n   **/\n\n  s.buildDate =\n  /*=date*/\n  \"Thu, 26 Nov 2015 20:44:31 GMT\"; // injected by build process\n})(); //##############################################################################\n// IndexOf.js\n//##############################################################################\n\n/**\n * @class Utility Methods\n */\n\n/**\n * Finds the first occurrence of a specified value searchElement in the passed in array, and returns the index of\n * that value.  Returns -1 if value is not found.\n *\n *      var i = createjs.indexOf(myArray, myElementToFind);\n *\n * @method indexOf\n * @param {Array} array Array to search for searchElement\n * @param searchElement Element to find in array.\n * @return {Number} The first index of searchElement in array.\n */\n\n\ncreatejs.indexOf = function (array, searchElement) {\n  \"use strict\";\n\n  for (var i = 0, l = array.length; i < l; i++) {\n    if (searchElement === array[i]) {\n      return i;\n    }\n  }\n\n  return -1;\n}; //##############################################################################\n// Proxy.js\n//##############################################################################\n\n/**\n * Various utilities that the CreateJS Suite uses. Utilities are created as separate files, and will be available on the\n * createjs namespace directly.\n *\n * <h4>Example</h4>\n *\n *      myObject.addEventListener(\"change\", createjs.proxy(myMethod, scope));\n *\n * @class Utility Methods\n * @main Utility Methods\n */\n\n\n(function () {\n  \"use strict\";\n  /**\n   * A function proxy for methods. By default, JavaScript methods do not maintain scope, so passing a method as a\n   * callback will result in the method getting called in the scope of the caller. Using a proxy ensures that the\n   * method gets called in the correct scope.\n   *\n   * Additional arguments can be passed that will be applied to the function when it is called.\n   *\n   * <h4>Example</h4>\n   *\n   *      myObject.addEventListener(\"event\", createjs.proxy(myHandler, this, arg1, arg2));\n   *\n   *      function myHandler(arg1, arg2) {\n   *           // This gets called when myObject.myCallback is executed.\n   *      }\n   *\n   * @method proxy\n   * @param {Function} method The function to call\n   * @param {Object} scope The scope to call the method name on\n   * @param {mixed} [arg] * Arguments that are appended to the callback for additional params.\n   * @public\n   * @static\n   */\n\n  createjs.proxy = function (method, scope) {\n    var aArgs = Array.prototype.slice.call(arguments, 2);\n    return function () {\n      return method.apply(scope, Array.prototype.slice.call(arguments, 0).concat(aArgs));\n    };\n  };\n})(); //##############################################################################\n// BrowserDetect.js\n//##############################################################################\n\n/**\n * @class Utility Methods\n */\n\n\n(function () {\n  \"use strict\";\n  /**\n   * An object that determines the current browser, version, operating system, and other environment\n   * variables via user agent string.\n   *\n   * Used for audio because feature detection is unable to detect the many limitations of mobile devices.\n   *\n   * <h4>Example</h4>\n   *\n   *      if (createjs.BrowserDetect.isIOS) { // do stuff }\n   *\n   * @property BrowserDetect\n   * @type {Object}\n   * @param {Boolean} isFirefox True if our browser is Firefox.\n   * @param {Boolean} isOpera True if our browser is opera.\n   * @param {Boolean} isChrome True if our browser is Chrome.  Note that Chrome for Android returns true, but is a\n   * completely different browser with different abilities.\n   * @param {Boolean} isIOS True if our browser is safari for iOS devices (iPad, iPhone, and iPod).\n   * @param {Boolean} isAndroid True if our browser is Android.\n   * @param {Boolean} isBlackberry True if our browser is Blackberry.\n   * @constructor\n   * @static\n   */\n\n  function BrowserDetect() {\n    throw \"BrowserDetect cannot be instantiated\";\n  }\n\n  ;\n  var agent = BrowserDetect.agent = window.navigator.userAgent;\n  BrowserDetect.isWindowPhone = agent.indexOf(\"IEMobile\") > -1 || agent.indexOf(\"Windows Phone\") > -1;\n  BrowserDetect.isFirefox = agent.indexOf(\"Firefox\") > -1;\n  BrowserDetect.isOpera = window.opera != null;\n  BrowserDetect.isChrome = agent.indexOf(\"Chrome\") > -1; // NOTE that Chrome on Android returns true but is a completely different browser with different abilities\n\n  BrowserDetect.isIOS = (agent.indexOf(\"iPod\") > -1 || agent.indexOf(\"iPhone\") > -1 || agent.indexOf(\"iPad\") > -1) && !BrowserDetect.isWindowPhone;\n  BrowserDetect.isAndroid = agent.indexOf(\"Android\") > -1 && !BrowserDetect.isWindowPhone;\n  BrowserDetect.isBlackberry = agent.indexOf(\"Blackberry\") > -1;\n  createjs.BrowserDetect = BrowserDetect;\n})(); //##############################################################################\n// AudioSprite.js\n//##############################################################################\n//  NOTE this is \"Class\" is purely to document audioSprite Setup and usage.\n\n/**\n * <strong>Note: AudioSprite is not a class, but its usage is easily lost in the documentation, so it has been called\n * out here for quick reference.</strong>\n *\n * Audio sprites are much like CSS sprites or image sprite sheets: multiple audio assets grouped into a single file.\n * Audio sprites work around limitations in certain browsers, where only a single sound can be loaded and played at a\n * time. We recommend at least 300ms of silence between audio clips to deal with HTML audio tag inaccuracy, and to prevent\n * accidentally playing bits of the neighbouring clips.\n *\n * <strong>Benefits of Audio Sprites:</strong>\n * <ul>\n *     <li>More robust support for older browsers and devices that only allow a single audio instance, such as iOS 5.</li>\n *     <li>They provide a work around for the Internet Explorer 9 audio tag limit, which restricts how many different\n *     sounds that could be loaded at once.</li>\n *     <li>Faster loading by only requiring a single network request for several sounds, especially on mobile devices\n * where the network round trip for each file can add significant latency.</li>\n * </ul>\n *\n * <strong>Drawbacks of Audio Sprites</strong>\n * <ul>\n *     <li>No guarantee of smooth looping when using HTML or Flash audio. If you have a track that needs to loop\n * \t\tsmoothly and you are supporting non-web audio browsers, do not use audio sprites for that sound if you can avoid\n * \t\tit.</li>\n *     <li>No guarantee that HTML audio will play back immediately, especially the first time. In some browsers\n *     (Chrome!), HTML audio will only load enough to play through at the current download speed â€“ so we rely on the\n *     `canplaythrough` event to determine if the audio is loaded. Since audio sprites must jump ahead to play specific\n *     sounds, the audio may not yet have downloaded fully.</li>\n *     <li>Audio sprites share the same core source, so if you have a sprite with 5 sounds and are limited to 2\n * \t\tconcurrently playing instances, you can only play 2 of the sounds at the same time.</li>\n * </ul>\n *\n * <h4>Example</h4>\n *\n *\t\tcreatejs.Sound.initializeDefaultPlugins();\n *\t\tvar assetsPath = \"./assets/\";\n *\t\tvar sounds = [{\n *\t\t\tsrc:\"MyAudioSprite.ogg\", data: {\n *\t\t\t\taudioSprite: [\n *\t\t\t\t\t{id:\"sound1\", startTime:0, duration:500},\n *\t\t\t\t\t{id:\"sound2\", startTime:1000, duration:400},\n *\t\t\t\t\t{id:\"sound3\", startTime:1700, duration: 1000}\n *\t\t\t\t]}\n *\t\t\t}\n *\t\t];\n *\t\tcreatejs.Sound.alternateExtensions = [\"mp3\"];\n *\t\tcreatejs.Sound.on(\"fileload\", loadSound);\n *\t\tcreatejs.Sound.registerSounds(sounds, assetsPath);\n *\t\t// after load is complete\n *\t\tcreatejs.Sound.play(\"sound2\");\n *\n * You can also create audio sprites on the fly by setting the startTime and duration when creating an new AbstractSoundInstance.\n *\n * \t\tcreatejs.Sound.play(\"MyAudioSprite\", {startTime: 1000, duration: 400});\n *\n * The excellent CreateJS community has created a tool to create audio sprites, available at\n * <a href=\"https://github.com/tonistiigi/audiosprite\" target=\"_blank\">https://github.com/tonistiigi/audiosprite</a>,\n * as well as a <a href=\"http://jsfiddle.net/bharat_battu/g8fFP/12/\" target=\"_blank\">jsfiddle</a> to convert the output\n * to SoundJS format.\n *\n * @class AudioSprite\n * @since 0.6.0\n */\n//##############################################################################\n// PlayPropsConfig.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\";\n  /**\n   * A class to store the optional play properties passed in {{#crossLink \"Sound/play\"}}{{/crossLink}} and\n   * {{#crossLink \"AbstractSoundInstance/play\"}}{{/crossLink}} calls.\n   *\n   * Optional Play Properties Include:\n   * <ul>\n   * <li>interrupt - How to interrupt any currently playing instances of audio with the same source,\n   * if the maximum number of instances of the sound are already playing. Values are defined as <code>INTERRUPT_TYPE</code>\n   * constants on the Sound class, with the default defined by {{#crossLink \"Sound/defaultInterruptBehavior:property\"}}{{/crossLink}}.</li>\n   * <li>delay - The amount of time to delay the start of audio playback, in milliseconds.</li>\n   * <li>offset - The offset from the start of the audio to begin playback, in milliseconds.</li>\n   * <li>loop - How many times the audio loops when it reaches the end of playback. The default is 0 (no\n   * loops), and -1 can be used for infinite playback.</li>\n   * <li>volume - The volume of the sound, between 0 and 1. Note that the master volume is applied\n   * against the individual volume.</li>\n   * <li>pan - The left-right pan of the sound (if supported), between -1 (left) and 1 (right).</li>\n   * <li>startTime - To create an audio sprite (with duration), the initial offset to start playback and loop from, in milliseconds.</li>\n   * <li>duration - To create an audio sprite (with startTime), the amount of time to play the clip for, in milliseconds.</li>\n   * </ul>\n   *\n   * <h4>Example</h4>\n   *\n   * \tvar ppc = new createjs.PlayPropsConfig().set({interrupt: createjs.Sound.INTERRUPT_ANY, loop: -1, volume: 0.5})\n   * \tcreatejs.Sound.play(\"mySound\", ppc);\n   * \tmySoundInstance.play(ppc);\n   *\n   * @class PlayPropsConfig\n   * @constructor\n   * @since 0.6.1\n   */\n  // TODO think of a better name for this class\n\n  var PlayPropsConfig = function () {\n    // Public Properties\n\n    /**\n     * How to interrupt any currently playing instances of audio with the same source,\n     * if the maximum number of instances of the sound are already playing. Values are defined as\n     * <code>INTERRUPT_TYPE</code> constants on the Sound class, with the default defined by\n     * {{#crossLink \"Sound/defaultInterruptBehavior:property\"}}{{/crossLink}}.\n     * @property interrupt\n     * @type {string}\n     * @default null\n     */\n    this.interrupt = null;\n    /**\n     * The amount of time to delay the start of audio playback, in milliseconds.\n     * @property delay\n     * @type {Number}\n     * @default null\n     */\n\n    this.delay = null;\n    /**\n     * The offset from the start of the audio to begin playback, in milliseconds.\n     * @property offset\n     * @type {number}\n     * @default null\n     */\n\n    this.offset = null;\n    /**\n     * How many times the audio loops when it reaches the end of playback. The default is 0 (no\n     * loops), and -1 can be used for infinite playback.\n     * @property loop\n     * @type {number}\n     * @default null\n     */\n\n    this.loop = null;\n    /**\n     * The volume of the sound, between 0 and 1. Note that the master volume is applied\n     * against the individual volume.\n     * @property volume\n     * @type {number}\n     * @default null\n     */\n\n    this.volume = null;\n    /**\n     * The left-right pan of the sound (if supported), between -1 (left) and 1 (right).\n     * @property pan\n     * @type {number}\n     * @default null\n     */\n\n    this.pan = null;\n    /**\n     * Used to create an audio sprite (with duration), the initial offset to start playback and loop from, in milliseconds.\n     * @property startTime\n     * @type {number}\n     * @default null\n     */\n\n    this.startTime = null;\n    /**\n     * Used to create an audio sprite (with startTime), the amount of time to play the clip for, in milliseconds.\n     * @property duration\n     * @type {number}\n     * @default null\n     */\n\n    this.duration = null;\n  };\n\n  var p = PlayPropsConfig.prototype = {};\n  var s = PlayPropsConfig; // Static Methods\n\n  /**\n   * Creates a PlayPropsConfig from another PlayPropsConfig or an Object.\n   *\n   * @method create\n   * @param {PlayPropsConfig|Object} value The play properties\n   * @returns {PlayPropsConfig}\n   * @static\n   */\n\n  s.create = function (value) {\n    if (value instanceof s || value instanceof Object) {\n      var ppc = new createjs.PlayPropsConfig();\n      ppc.set(value);\n      return ppc;\n    } else {\n      throw new Error(\"Type not recognized.\");\n    }\n  }; // Public Methods\n\n  /**\n   * Provides a chainable shortcut method for setting a number of properties on the instance.\n   *\n   * <h4>Example</h4>\n   *\n   *      var PlayPropsConfig = new createjs.PlayPropsConfig().set({loop:-1, volume:0.7});\n   *\n   * @method set\n   * @param {Object} props A generic object containing properties to copy to the PlayPropsConfig instance.\n   * @return {PlayPropsConfig} Returns the instance the method is called on (useful for chaining calls.)\n  */\n\n\n  p.set = function (props) {\n    for (var n in props) {\n      this[n] = props[n];\n    }\n\n    return this;\n  };\n\n  p.toString = function () {\n    return \"[PlayPropsConfig]\";\n  };\n\n  createjs.PlayPropsConfig = s;\n})(); //##############################################################################\n// Sound.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\";\n  /**\n   * The Sound class is the public API for creating sounds, controlling the overall sound levels, and managing plugins.\n   * All Sound APIs on this class are static.\n   *\n   * <b>Registering and Preloading</b><br />\n   * Before you can play a sound, it <b>must</b> be registered. You can do this with {{#crossLink \"Sound/registerSound\"}}{{/crossLink}},\n   * or register multiple sounds using {{#crossLink \"Sound/registerSounds\"}}{{/crossLink}}. If you don't register a\n   * sound prior to attempting to play it using {{#crossLink \"Sound/play\"}}{{/crossLink}} or create it using {{#crossLink \"Sound/createInstance\"}}{{/crossLink}},\n   * the sound source will be automatically registered but playback will fail as the source will not be ready. If you use\n   * <a href=\"http://preloadjs.com\" target=\"_blank\">PreloadJS</a>, registration is handled for you when the sound is\n   * preloaded. It is recommended to preload sounds either internally using the register functions or externally using\n   * PreloadJS so they are ready when you want to use them.\n   *\n   * <b>Playback</b><br />\n   * To play a sound once it's been registered and preloaded, use the {{#crossLink \"Sound/play\"}}{{/crossLink}} method.\n   * This method returns a {{#crossLink \"AbstractSoundInstance\"}}{{/crossLink}} which can be paused, resumed, muted, etc.\n   * Please see the {{#crossLink \"AbstractSoundInstance\"}}{{/crossLink}} documentation for more on the instance control APIs.\n   *\n   * <b>Plugins</b><br />\n   * By default, the {{#crossLink \"WebAudioPlugin\"}}{{/crossLink}} or the {{#crossLink \"HTMLAudioPlugin\"}}{{/crossLink}}\n   * are used (when available), although developers can change plugin priority or add new plugins (such as the\n   * provided {{#crossLink \"FlashAudioPlugin\"}}{{/crossLink}}). Please see the {{#crossLink \"Sound\"}}{{/crossLink}} API\n   * methods for more on the playback and plugin APIs. To install plugins, or specify a different plugin order, see\n   * {{#crossLink \"Sound/installPlugins\"}}{{/crossLink}}.\n   *\n   * <h4>Example</h4>\n   *\n   *      createjs.FlashAudioPlugin.swfPath = \"../src/soundjs/flashaudio\";\n   *      createjs.Sound.registerPlugins([createjs.WebAudioPlugin, createjs.FlashAudioPlugin]);\n   *      createjs.Sound.alternateExtensions = [\"mp3\"];\n   *      createjs.Sound.on(\"fileload\", this.loadHandler, this);\n   *      createjs.Sound.registerSound(\"path/to/mySound.ogg\", \"sound\");\n   *      function loadHandler(event) {\n      *          // This is fired for each sound that is registered.\n      *          var instance = createjs.Sound.play(\"sound\");  // play using id.  Could also use full source path or event.src.\n      *          instance.on(\"complete\", this.handleComplete, this);\n      *          instance.volume = 0.5;\n   *      }\n   *\n   * The maximum number of concurrently playing instances of the same sound can be specified in the \"data\" argument\n   * of {{#crossLink \"Sound/registerSound\"}}{{/crossLink}}.  Note that if not specified, the active plugin will apply\n   * a default limit.  Currently HTMLAudioPlugin sets a default limit of 2, while WebAudioPlugin and FlashAudioPlugin set a\n   * default limit of 100.\n   *\n   *      createjs.Sound.registerSound(\"sound.mp3\", \"soundId\", 4);\n   *\n   * Sound can be used as a plugin with PreloadJS to help preload audio properly. Audio preloaded with PreloadJS is\n   * automatically registered with the Sound class. When audio is not preloaded, Sound will do an automatic internal\n   * load. As a result, it may fail to play the first time play is called if the audio is not finished loading. Use\n   * the {{#crossLink \"Sound/fileload:event\"}}{{/crossLink}} event to determine when a sound has finished internally\n   * preloading. It is recommended that all audio is preloaded before it is played.\n   *\n   *      var queue = new createjs.LoadQueue();\n   *\t\tqueue.installPlugin(createjs.Sound);\n   *\n   * <b>Audio Sprites</b><br />\n   * SoundJS has added support for {{#crossLink \"AudioSprite\"}}{{/crossLink}}, available as of version 0.6.0.\n   * For those unfamiliar with audio sprites, they are much like CSS sprites or sprite sheets: multiple audio assets\n   * grouped into a single file.\n   *\n   * <h4>Example</h4>\n   *\n   *\t\tvar assetsPath = \"./assets/\";\n   *\t\tvar sounds = [{\n   *\t\t\tsrc:\"MyAudioSprite.ogg\", data: {\n   *\t\t\t\taudioSprite: [\n   *\t\t\t\t\t{id:\"sound1\", startTime:0, duration:500},\n   *\t\t\t\t\t{id:\"sound2\", startTime:1000, duration:400},\n   *\t\t\t\t\t{id:\"sound3\", startTime:1700, duration: 1000}\n   *\t\t\t\t]}\n  \t *\t\t\t}\n   *\t\t];\n   *\t\tcreatejs.Sound.alternateExtensions = [\"mp3\"];\n   *\t\tcreatejs.Sound.on(\"fileload\", loadSound);\n   *\t\tcreatejs.Sound.registerSounds(sounds, assetsPath);\n   *\t\t// after load is complete\n   *\t\tcreatejs.Sound.play(\"sound2\");\n   *\n   * <b>Mobile Playback</b><br />\n   * Devices running iOS require the WebAudio context to be \"unlocked\" by playing at least one sound inside of a user-\n   * initiated event (such as touch/click). Earlier versions of SoundJS included a \"MobileSafe\" sample, but this is no\n   * longer necessary as of SoundJS 0.6.2.\n   * <ul>\n   *     <li>\n   *         In SoundJS 0.4.1 and above, you can either initialize plugins or use the {{#crossLink \"WebAudioPlugin/playEmptySound\"}}{{/crossLink}}\n   *         method in the call stack of a user input event to manually unlock the audio context.\n   *     </li>\n   *     <li>\n   *         In SoundJS 0.6.2 and above, SoundJS will automatically listen for the first document-level \"mousedown\"\n   *         and \"touchend\" event, and unlock WebAudio. This will continue to check these events until the WebAudio\n   *         context becomes \"unlocked\" (changes from \"suspended\" to \"running\")\n   *     </li>\n   *     <li>\n   *         Both the \"mousedown\" and \"touchend\" events can be used to unlock audio in iOS9+, the \"touchstart\" event\n   *         will work in iOS8 and below. The \"touchend\" event will only work in iOS9 when the gesture is interpreted\n   *         as a \"click\", so if the user long-presses the button, it will no longer work.\n   *     </li>\n   *     <li>\n   *         When using the <a href=\"http://www.createjs.com/docs/easeljs/classes/Touch.html\">EaselJS Touch class</a>,\n   *         the \"mousedown\" event will not fire when a canvas is clicked, since MouseEvents are prevented, to ensure\n   *         only touch events fire. To get around this, you can either rely on \"touchend\", or:\n   *         <ol>\n   *             <li>Set the `allowDefault` property on the Touch class constructor to `true` (defaults to `false`).</li>\n   *             <li>Set the `preventSelection` property on the EaselJS `Stage` to `false`.</li>\n   *         </ol>\n   *         These settings may change how your application behaves, and are not recommended.\n   *     </li>\n   * </ul>\n   *\n   * <b>Loading Alternate Paths and Extension-less Files</b><br />\n   * SoundJS supports loading alternate paths and extension-less files by passing an object instead of a string for\n   * the `src` property, which is a hash using the format `{extension:\"path\", extension2:\"path2\"}`. These labels are\n   * how SoundJS determines if the browser will support the sound. This also enables multiple formats to live in\n   * different folders, or on CDNs, which often has completely different filenames for each file.\n   *\n   * Priority is determined by the property order (first property is tried first).  This is supported by both internal loading\n   * and loading with PreloadJS.\n   *\n   * <em>Note: an id is required for playback.</em>\n   *\n   * <h4>Example</h4>\n   *\n   *\t\tvar sounds = {path:\"./audioPath/\",\n   * \t\t\t\tmanifest: [\n   *\t\t\t\t{id: \"cool\", src: {mp3:\"mp3/awesome.mp3\", ogg:\"noExtensionOggFile\"}}\n   *\t\t]};\n   *\n   *\t\tcreatejs.Sound.alternateExtensions = [\"mp3\"];\n   *\t\tcreatejs.Sound.addEventListener(\"fileload\", handleLoad);\n   *\t\tcreatejs.Sound.registerSounds(sounds);\n   *\n   * <h3>Known Browser and OS issues</h3>\n   * <b>IE 9 HTML Audio limitations</b><br />\n   * <ul><li>There is a delay in applying volume changes to tags that occurs once playback is started. So if you have\n   * muted all sounds, they will all play during this delay until the mute applies internally. This happens regardless of\n   * when or how you apply the volume change, as the tag seems to need to play to apply it.</li>\n      * <li>MP3 encoding will not always work for audio tags, particularly in Internet Explorer. We've found default\n   * encoding with 64kbps works.</li>\n   * <li>Occasionally very short samples will get cut off.</li>\n   * <li>There is a limit to how many audio tags you can load and play at once, which appears to be determined by\n   * hardware and browser settings.  See {{#crossLink \"HTMLAudioPlugin.MAX_INSTANCES\"}}{{/crossLink}} for a safe\n   * estimate.</li></ul>\n   *\n   * <b>Firefox 25 Web Audio limitations</b>\n   * <ul><li>mp3 audio files do not load properly on all windows machines, reported\n   * <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=929969\" target=\"_blank\">here</a>. </br>\n   * For this reason it is recommended to pass another FF supported type (ie ogg) first until this bug is resolved, if\n   * possible.</li></ul>\n  \t * <b>Safari limitations</b><br />\n   * <ul><li>Safari requires Quicktime to be installed for audio playback.</li></ul>\n   *\n   * <b>iOS 6 Web Audio limitations</b><br />\n   * <ul><li>Sound is initially locked, and must be unlocked via a user-initiated event. Please see the section on\n   * Mobile Playback above.</li>\n   * <li>A bug exists that will distort un-cached web audio when a video element is present in the DOM that has audio\n   * at a different sampleRate.</li>\n   * </ul>\n   *\n   * <b>Android HTML Audio limitations</b><br />\n   * <ul><li>We have no control over audio volume. Only the user can set volume on their device.</li>\n   * <li>We can only play audio inside a user event (touch/click).  This currently means you cannot loop sound or use\n   * a delay.</li></ul>\n   *\n   * <b>Web Audio and PreloadJS</b><br />\n   * <ul><li>Web Audio must be loaded through XHR, therefore when used with PreloadJS, tag loading is not possible.\n   * This means that tag loading can not be used to avoid cross domain issues.</li><ul>\n   *\n   * @class Sound\n   * @static\n   * @uses EventDispatcher\n   */\n\n  function Sound() {\n    throw \"Sound cannot be instantiated\";\n  }\n\n  var s = Sound; // Static Properties\n\n  /**\n   * The interrupt value to interrupt any currently playing instance with the same source, if the maximum number of\n   * instances of the sound are already playing.\n   * @property INTERRUPT_ANY\n   * @type {String}\n   * @default any\n   * @static\n   */\n\n  s.INTERRUPT_ANY = \"any\";\n  /**\n   * The interrupt value to interrupt the earliest currently playing instance with the same source that progressed the\n   * least distance in the audio track, if the maximum number of instances of the sound are already playing.\n   * @property INTERRUPT_EARLY\n   * @type {String}\n   * @default early\n   * @static\n   */\n\n  s.INTERRUPT_EARLY = \"early\";\n  /**\n   * The interrupt value to interrupt the currently playing instance with the same source that progressed the most\n   * distance in the audio track, if the maximum number of instances of the sound are already playing.\n   * @property INTERRUPT_LATE\n   * @type {String}\n   * @default late\n   * @static\n   */\n\n  s.INTERRUPT_LATE = \"late\";\n  /**\n   * The interrupt value to not interrupt any currently playing instances with the same source, if the maximum number of\n   * instances of the sound are already playing.\n   * @property INTERRUPT_NONE\n   * @type {String}\n   * @default none\n   * @static\n   */\n\n  s.INTERRUPT_NONE = \"none\";\n  /**\n   * Defines the playState of an instance that is still initializing.\n   * @property PLAY_INITED\n   * @type {String}\n   * @default playInited\n   * @static\n   */\n\n  s.PLAY_INITED = \"playInited\";\n  /**\n   * Defines the playState of an instance that is currently playing or paused.\n   * @property PLAY_SUCCEEDED\n   * @type {String}\n   * @default playSucceeded\n   * @static\n   */\n\n  s.PLAY_SUCCEEDED = \"playSucceeded\";\n  /**\n   * Defines the playState of an instance that was interrupted by another instance.\n   * @property PLAY_INTERRUPTED\n   * @type {String}\n   * @default playInterrupted\n   * @static\n   */\n\n  s.PLAY_INTERRUPTED = \"playInterrupted\";\n  /**\n   * Defines the playState of an instance that completed playback.\n   * @property PLAY_FINISHED\n   * @type {String}\n   * @default playFinished\n   * @static\n   */\n\n  s.PLAY_FINISHED = \"playFinished\";\n  /**\n   * Defines the playState of an instance that failed to play. This is usually caused by a lack of available channels\n   * when the interrupt mode was \"INTERRUPT_NONE\", the playback stalled, or the sound could not be found.\n   * @property PLAY_FAILED\n   * @type {String}\n   * @default playFailed\n   * @static\n   */\n\n  s.PLAY_FAILED = \"playFailed\";\n  /**\n   * A list of the default supported extensions that Sound will <i>try</i> to play. Plugins will check if the browser\n   * can play these types, so modifying this list before a plugin is initialized will allow the plugins to try to\n   * support additional media types.\n   *\n   * NOTE this does not currently work for {{#crossLink \"FlashAudioPlugin\"}}{{/crossLink}}.\n   *\n   * More details on file formats can be found at <a href=\"http://en.wikipedia.org/wiki/Audio_file_format\" target=\"_blank\">http://en.wikipedia.org/wiki/Audio_file_format</a>.<br />\n   * A very detailed list of file formats can be found at <a href=\"http://www.fileinfo.com/filetypes/audio\" target=\"_blank\">http://www.fileinfo.com/filetypes/audio</a>.\n   * @property SUPPORTED_EXTENSIONS\n   * @type {Array[String]}\n   * @default [\"mp3\", \"ogg\", \"opus\", \"mpeg\", \"wav\", \"m4a\", \"mp4\", \"aiff\", \"wma\", \"mid\"]\n   * @since 0.4.0\n   * @static\n   */\n\n  s.SUPPORTED_EXTENSIONS = [\"mp3\", \"ogg\", \"opus\", \"mpeg\", \"wav\", \"m4a\", \"mp4\", \"aiff\", \"wma\", \"mid\"];\n  /**\n   * Some extensions use another type of extension support to play (one of them is a codex).  This allows you to map\n   * that support so plugins can accurately determine if an extension is supported.  Adding to this list can help\n   * plugins determine more accurately if an extension is supported.\n   *\n  \t * A useful list of extensions for each format can be found at <a href=\"http://html5doctor.com/html5-audio-the-state-of-play/\" target=\"_blank\">http://html5doctor.com/html5-audio-the-state-of-play/</a>.\n   * @property EXTENSION_MAP\n   * @type {Object}\n   * @since 0.4.0\n   * @default {m4a:\"mp4\"}\n   * @static\n   */\n\n  s.EXTENSION_MAP = {\n    m4a: \"mp4\"\n  };\n  /**\n   * The RegExp pattern used to parse file URIs. This supports simple file names, as well as full domain URIs with\n   * query strings. The resulting match is: protocol:$1 domain:$2 path:$3 file:$4 extension:$5 query:$6.\n   * @property FILE_PATTERN\n   * @type {RegExp}\n   * @static\n   * @protected\n   */\n\n  s.FILE_PATTERN = /^(?:(\\w+:)\\/{2}(\\w+(?:\\.\\w+)*\\/?))?([/.]*?(?:[^?]+)?\\/)?((?:[^/?]+)\\.(\\w+))(?:\\?(\\S+)?)?$/; // Class Public properties\n\n  /**\n   * Determines the default behavior for interrupting other currently playing instances with the same source, if the\n   * maximum number of instances of the sound are already playing.  Currently the default is {{#crossLink \"Sound/INTERRUPT_NONE:property\"}}{{/crossLink}}\n   * but this can be set and will change playback behavior accordingly.  This is only used when {{#crossLink \"Sound/play\"}}{{/crossLink}}\n   * is called without passing a value for interrupt.\n   * @property defaultInterruptBehavior\n   * @type {String}\n   * @default Sound.INTERRUPT_NONE, or \"none\"\n   * @static\n   * @since 0.4.0\n   */\n\n  s.defaultInterruptBehavior = s.INTERRUPT_NONE; // OJR does s.INTERRUPT_ANY make more sense as default?  Needs game dev testing to see which case makes more sense.\n\n  /**\n   * An array of extensions to attempt to use when loading sound, if the default is unsupported by the active plugin.\n   * These are applied in order, so if you try to Load Thunder.ogg in a browser that does not support ogg, and your\n   * extensions array is [\"mp3\", \"m4a\", \"wav\"] it will check mp3 support, then m4a, then wav. The audio files need\n   * to exist in the same location, as only the extension is altered.\n   *\n   * Note that regardless of which file is loaded, you can call {{#crossLink \"Sound/createInstance\"}}{{/crossLink}}\n   * and {{#crossLink \"Sound/play\"}}{{/crossLink}} using the same id or full source path passed for loading.\n   *\n   * <h4>Example</h4>\n   *\n   *\tvar sounds = [\n   *\t\t{src:\"myPath/mySound.ogg\", id:\"example\"},\n   *\t];\n   *\tcreatejs.Sound.alternateExtensions = [\"mp3\"]; // now if ogg is not supported, SoundJS will try asset0.mp3\n   *\tcreatejs.Sound.on(\"fileload\", handleLoad); // call handleLoad when each sound loads\n   *\tcreatejs.Sound.registerSounds(sounds, assetPath);\n   *\t// ...\n   *\tcreatejs.Sound.play(\"myPath/mySound.ogg\"); // works regardless of what extension is supported.  Note calling with ID is a better approach\n   *\n   * @property alternateExtensions\n   * @type {Array}\n   * @since 0.5.2\n   * @static\n   */\n\n  s.alternateExtensions = [];\n  /**\n   * The currently active plugin. If this is null, then no plugin could be initialized. If no plugin was specified,\n   * Sound attempts to apply the default plugins: {{#crossLink \"WebAudioPlugin\"}}{{/crossLink}}, followed by\n   * {{#crossLink \"HTMLAudioPlugin\"}}{{/crossLink}}.\n   * @property activePlugin\n   * @type {Object}\n   * @static\n   */\n\n  s.activePlugin = null; // class getter / setter properties\n\n  /**\n   * Set the master volume of Sound. The master volume is multiplied against each sound's individual volume.  For\n   * example, if master volume is 0.5 and a sound's volume is 0.5, the resulting volume is 0.25. To set individual\n   * sound volume, use AbstractSoundInstance {{#crossLink \"AbstractSoundInstance/volume:property\"}}{{/crossLink}} instead.\n   *\n   * <h4>Example</h4>\n   *\n   *     createjs.Sound.volume = 0.5;\n   *\n   *\n   * @property volume\n   * @type {Number}\n   * @default 1\n   * @since 0.6.1\n   */\n\n  s._masterVolume = 1;\n  Object.defineProperty(s, \"volume\", {\n    get: function () {\n      return this._masterVolume;\n    },\n    set: function (value) {\n      if (Number(value) == null) {\n        return false;\n      }\n\n      value = Math.max(0, Math.min(1, value));\n      s._masterVolume = value;\n\n      if (!this.activePlugin || !this.activePlugin.setVolume || !this.activePlugin.setVolume(value)) {\n        var instances = this._instances;\n\n        for (var i = 0, l = instances.length; i < l; i++) {\n          instances[i].setMasterVolume(value);\n        }\n      }\n    }\n  });\n  /**\n   * Mute/Unmute all audio. Note that muted audio still plays at 0 volume. This global mute value is maintained\n   * separately and when set will override, but not change the mute property of individual instances. To mute an individual\n   * instance, use AbstractSoundInstance {{#crossLink \"AbstractSoundInstance/muted:property\"}}{{/crossLink}} instead.\n   *\n   * <h4>Example</h4>\n   *\n   *     createjs.Sound.muted = true;\n   *\n   *\n   * @property muted\n   * @type {Boolean}\n   * @default false\n   * @since 0.6.1\n   */\n\n  s._masterMute = false; // OJR references to the methods were not working, so the code had to be duplicated here\n\n  Object.defineProperty(s, \"muted\", {\n    get: function () {\n      return this._masterMute;\n    },\n    set: function (value) {\n      if (value == null) {\n        return false;\n      }\n\n      this._masterMute = value;\n\n      if (!this.activePlugin || !this.activePlugin.setMute || !this.activePlugin.setMute(value)) {\n        var instances = this._instances;\n\n        for (var i = 0, l = instances.length; i < l; i++) {\n          instances[i].setMasterMute(value);\n        }\n      }\n\n      return true;\n    }\n  });\n  /**\n   * Get the active plugins capabilities, which help determine if a plugin can be used in the current environment,\n   * or if the plugin supports a specific feature. Capabilities include:\n   * <ul>\n   *     <li><b>panning:</b> If the plugin can pan audio from left to right</li>\n   *     <li><b>volume;</b> If the plugin can control audio volume.</li>\n   *     <li><b>tracks:</b> The maximum number of audio tracks that can be played back at a time. This will be -1\n   *     if there is no known limit.</li>\n   * <br />An entry for each file type in {{#crossLink \"Sound/SUPPORTED_EXTENSIONS:property\"}}{{/crossLink}}:\n   *     <li><b>mp3:</b> If MP3 audio is supported.</li>\n   *     <li><b>ogg:</b> If OGG audio is supported.</li>\n   *     <li><b>wav:</b> If WAV audio is supported.</li>\n   *     <li><b>mpeg:</b> If MPEG audio is supported.</li>\n   *     <li><b>m4a:</b> If M4A audio is supported.</li>\n   *     <li><b>mp4:</b> If MP4 audio is supported.</li>\n   *     <li><b>aiff:</b> If aiff audio is supported.</li>\n   *     <li><b>wma:</b> If wma audio is supported.</li>\n   *     <li><b>mid:</b> If mid audio is supported.</li>\n   * </ul>\n   *\n   * You can get a specific capability of the active plugin using standard object notation\n   *\n   * <h4>Example</h4>\n   *\n   *      var mp3 = createjs.Sound.capabilities.mp3;\n   *\n   * Note this property is read only.\n   *\n   * @property capabilities\n   * @type {Object}\n   * @static\n   * @readOnly\n   * @since 0.6.1\n   */\n\n  Object.defineProperty(s, \"capabilities\", {\n    get: function () {\n      if (s.activePlugin == null) {\n        return null;\n      }\n\n      return s.activePlugin._capabilities;\n    },\n    set: function (value) {\n      return false;\n    }\n  }); // Class Private properties\n\n  /**\n   * Determines if the plugins have been registered. If false, the first call to play() will instantiate the default\n   * plugins ({{#crossLink \"WebAudioPlugin\"}}{{/crossLink}}, followed by {{#crossLink \"HTMLAudioPlugin\"}}{{/crossLink}}).\n   * If plugins have been registered, but none are applicable, then sound playback will fail.\n   * @property _pluginsRegistered\n   * @type {Boolean}\n   * @default false\n   * @static\n   * @protected\n   */\n\n  s._pluginsRegistered = false;\n  /**\n   * Used internally to assign unique IDs to each AbstractSoundInstance.\n   * @property _lastID\n   * @type {Number}\n   * @static\n   * @protected\n   */\n\n  s._lastID = 0;\n  /**\n   * An array containing all currently playing instances. This allows Sound to control the volume, mute, and playback of\n   * all instances when using static APIs like {{#crossLink \"Sound/stop\"}}{{/crossLink}} and {{#crossLink \"Sound/setVolume\"}}{{/crossLink}}.\n   * When an instance has finished playback, it gets removed via the {{#crossLink \"Sound/finishedPlaying\"}}{{/crossLink}}\n   * method. If the user replays an instance, it gets added back in via the {{#crossLink \"Sound/_beginPlaying\"}}{{/crossLink}}\n   * method.\n   * @property _instances\n   * @type {Array}\n   * @protected\n   * @static\n   */\n\n  s._instances = [];\n  /**\n   * An object hash storing objects with sound sources, startTime, and duration via there corresponding ID.\n   * @property _idHash\n   * @type {Object}\n   * @protected\n   * @static\n   */\n\n  s._idHash = {};\n  /**\n   * An object hash that stores preloading sound sources via the parsed source that is passed to the plugin.  Contains the\n   * source, id, and data that was passed in by the user.  Parsed sources can contain multiple instances of source, id,\n   * and data.\n   * @property _preloadHash\n   * @type {Object}\n   * @protected\n   * @static\n   */\n\n  s._preloadHash = {};\n  /**\n   * An object hash storing {{#crossLink \"PlayPropsConfig\"}}{{/crossLink}} via the parsed source that is passed as defaultPlayProps in\n   * {{#crossLink \"Sound/registerSound\"}}{{/crossLink}} and {{#crossLink \"Sound/registerSounds\"}}{{/crossLink}}.\n   * @property _defaultPlayPropsHash\n   * @type {Object}\n   * @protected\n   * @static\n   * @since 0.6.1\n   */\n\n  s._defaultPlayPropsHash = {}; // EventDispatcher methods:\n\n  s.addEventListener = null;\n  s.removeEventListener = null;\n  s.removeAllEventListeners = null;\n  s.dispatchEvent = null;\n  s.hasEventListener = null;\n  s._listeners = null;\n  createjs.EventDispatcher.initialize(s); // inject EventDispatcher methods.\n  // Events\n\n  /**\n   * This event is fired when a file finishes loading internally. This event is fired for each loaded sound,\n   * so any handler methods should look up the <code>event.src</code> to handle a particular sound.\n   * @event fileload\n   * @param {Object} target The object that dispatched the event.\n   * @param {String} type The event type.\n   * @param {String} src The source of the sound that was loaded.\n   * @param {String} [id] The id passed in when the sound was registered. If one was not provided, it will be null.\n   * @param {Number|Object} [data] Any additional data associated with the item. If not provided, it will be undefined.\n   * @since 0.4.1\n   */\n\n  /**\n   * This event is fired when a file fails loading internally. This event is fired for each loaded sound,\n   * so any handler methods should look up the <code>event.src</code> to handle a particular sound.\n   * @event fileerror\n   * @param {Object} target The object that dispatched the event.\n   * @param {String} type The event type.\n   * @param {String} src The source of the sound that was loaded.\n   * @param {String} [id] The id passed in when the sound was registered. If one was not provided, it will be null.\n   * @param {Number|Object} [data] Any additional data associated with the item. If not provided, it will be undefined.\n   * @since 0.6.0\n   */\n  // Class Public Methods\n\n  /**\n   * Get the preload rules to allow Sound to be used as a plugin by <a href=\"http://preloadjs.com\" target=\"_blank\">PreloadJS</a>.\n   * Any load calls that have the matching type or extension will fire the callback method, and use the resulting\n   * object, which is potentially modified by Sound. This helps when determining the correct path, as well as\n   * registering the audio instance(s) with Sound. This method should not be called, except by PreloadJS.\n   * @method getPreloadHandlers\n   * @return {Object} An object containing:\n   * <ul><li>callback: A preload callback that is fired when a file is added to PreloadJS, which provides\n   *      Sound a mechanism to modify the load parameters, select the correct file format, register the sound, etc.</li>\n   *      <li>types: A list of file types that are supported by Sound (currently supports \"sound\").</li>\n   *      <li>extensions: A list of file extensions that are supported by Sound (see {{#crossLink \"Sound/SUPPORTED_EXTENSIONS:property\"}}{{/crossLink}}).</li></ul>\n   * @static\n   * @protected\n   */\n\n  s.getPreloadHandlers = function () {\n    return {\n      callback: createjs.proxy(s.initLoad, s),\n      types: [\"sound\"],\n      extensions: s.SUPPORTED_EXTENSIONS\n    };\n  };\n  /**\n   * Used to dispatch fileload events from internal loading.\n   * @method _handleLoadComplete\n   * @param event A loader event.\n   * @protected\n   * @static\n   * @since 0.6.0\n   */\n\n\n  s._handleLoadComplete = function (event) {\n    var src = event.target.getItem().src;\n\n    if (!s._preloadHash[src]) {\n      return;\n    }\n\n    for (var i = 0, l = s._preloadHash[src].length; i < l; i++) {\n      var item = s._preloadHash[src][i];\n      s._preloadHash[src][i] = true;\n\n      if (!s.hasEventListener(\"fileload\")) {\n        continue;\n      }\n\n      var event = new createjs.Event(\"fileload\");\n      event.src = item.src;\n      event.id = item.id;\n      event.data = item.data;\n      event.sprite = item.sprite;\n      s.dispatchEvent(event);\n    }\n  };\n  /**\n   * Used to dispatch error events from internal preloading.\n   * @param event\n   * @protected\n   * @since 0.6.0\n   * @static\n   */\n\n\n  s._handleLoadError = function (event) {\n    var src = event.target.getItem().src;\n\n    if (!s._preloadHash[src]) {\n      return;\n    }\n\n    for (var i = 0, l = s._preloadHash[src].length; i < l; i++) {\n      var item = s._preloadHash[src][i];\n      s._preloadHash[src][i] = false;\n\n      if (!s.hasEventListener(\"fileerror\")) {\n        continue;\n      }\n\n      var event = new createjs.Event(\"fileerror\");\n      event.src = item.src;\n      event.id = item.id;\n      event.data = item.data;\n      event.sprite = item.sprite;\n      s.dispatchEvent(event);\n    }\n  };\n  /**\n   * Used by {{#crossLink \"Sound/registerPlugins\"}}{{/crossLink}} to register a Sound plugin.\n   *\n   * @method _registerPlugin\n   * @param {Object} plugin The plugin class to install.\n   * @return {Boolean} Whether the plugin was successfully initialized.\n   * @static\n   * @private\n   */\n\n\n  s._registerPlugin = function (plugin) {\n    // Note: Each plugin is passed in as a class reference, but we store the activePlugin as an instance\n    if (plugin.isSupported()) {\n      s.activePlugin = new plugin();\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * Register a list of Sound plugins, in order of precedence. To register a single plugin, pass a single element in the array.\n   *\n   * <h4>Example</h4>\n   *\n   *      createjs.FlashAudioPlugin.swfPath = \"../src/soundjs/flashaudio/\";\n   *      createjs.Sound.registerPlugins([createjs.WebAudioPlugin, createjs.HTMLAudioPlugin, createjs.FlashAudioPlugin]);\n   *\n   * @method registerPlugins\n   * @param {Array} plugins An array of plugins classes to install.\n   * @return {Boolean} Whether a plugin was successfully initialized.\n   * @static\n   */\n\n\n  s.registerPlugins = function (plugins) {\n    s._pluginsRegistered = true;\n\n    for (var i = 0, l = plugins.length; i < l; i++) {\n      if (s._registerPlugin(plugins[i])) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Initialize the default plugins. This method is automatically called when any audio is played or registered before\n   * the user has manually registered plugins, and enables Sound to work without manual plugin setup. Currently, the\n   * default plugins are {{#crossLink \"WebAudioPlugin\"}}{{/crossLink}} followed by {{#crossLink \"HTMLAudioPlugin\"}}{{/crossLink}}.\n   *\n   * <h4>Example</h4>\n   *\n   * \tif (!createjs.initializeDefaultPlugins()) { return; }\n   *\n   * @method initializeDefaultPlugins\n   * @returns {Boolean} True if a plugin was initialized, false otherwise.\n   * @since 0.4.0\n   * @static\n   */\n\n\n  s.initializeDefaultPlugins = function () {\n    if (s.activePlugin != null) {\n      return true;\n    }\n\n    if (s._pluginsRegistered) {\n      return false;\n    }\n\n    if (s.registerPlugins([createjs.WebAudioPlugin, createjs.HTMLAudioPlugin])) {\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * Determines if Sound has been initialized, and a plugin has been activated.\n   *\n   * <h4>Example</h4>\n   * This example sets up a Flash fallback, but only if there is no plugin specified yet.\n   *\n   * \tif (!createjs.Sound.isReady()) {\n   *\t\tcreatejs.FlashAudioPlugin.swfPath = \"../src/soundjs/flashaudio/\";\n   * \t\tcreatejs.Sound.registerPlugins([createjs.WebAudioPlugin, createjs.HTMLAudioPlugin, createjs.FlashAudioPlugin]);\n   *\t}\n   *\n   * @method isReady\n   * @return {Boolean} If Sound has initialized a plugin.\n   * @static\n   */\n\n\n  s.isReady = function () {\n    return s.activePlugin != null;\n  };\n  /**\n   * Deprecated, please use {{#crossLink \"Sound/capabilities:property\"}}{{/crossLink}} instead.\n   *\n   * @method getCapabilities\n   * @return {Object} An object containing the capabilities of the active plugin.\n   * @static\n   * @deprecated\n   */\n\n\n  s.getCapabilities = function () {\n    if (s.activePlugin == null) {\n      return null;\n    }\n\n    return s.activePlugin._capabilities;\n  };\n  /**\n   * Deprecated, please use {{#crossLink \"Sound/capabilities:property\"}}{{/crossLink}} instead.\n   *\n   * @method getCapability\n   * @param {String} key The capability to retrieve\n   * @return {Number|Boolean} The value of the capability.\n   * @static\n   * @see getCapabilities\n   * @deprecated\n   */\n\n\n  s.getCapability = function (key) {\n    if (s.activePlugin == null) {\n      return null;\n    }\n\n    return s.activePlugin._capabilities[key];\n  };\n  /**\n   * Process manifest items from <a href=\"http://preloadjs.com\" target=\"_blank\">PreloadJS</a>. This method is intended\n   * for usage by a plugin, and not for direct interaction.\n   * @method initLoad\n   * @param {Object} src The object to load.\n   * @return {Object|AbstractLoader} An instance of AbstractLoader.\n   * @protected\n   * @static\n   */\n\n\n  s.initLoad = function (loadItem) {\n    return s._registerSound(loadItem);\n  };\n  /**\n   * Internal method for loading sounds.  This should not be called directly.\n   *\n   * @method _registerSound\n   * @param {Object} src The object to load, containing src property and optionally containing id and data.\n   * @return {Object} An object with the modified values that were passed in, which defines the sound.\n   * Returns false if the source cannot be parsed or no plugins can be initialized.\n   * Returns true if the source is already loaded.\n   * @static\n   * @private\n   * @since 0.6.0\n   */\n\n\n  s._registerSound = function (loadItem) {\n    if (!s.initializeDefaultPlugins()) {\n      return false;\n    }\n\n    var details;\n\n    if (loadItem.src instanceof Object) {\n      details = s._parseSrc(loadItem.src);\n      details.src = loadItem.path + details.src;\n    } else {\n      details = s._parsePath(loadItem.src);\n    }\n\n    if (details == null) {\n      return false;\n    }\n\n    loadItem.src = details.src;\n    loadItem.type = \"sound\";\n    var data = loadItem.data;\n    var numChannels = null;\n\n    if (data != null) {\n      if (!isNaN(data.channels)) {\n        numChannels = parseInt(data.channels);\n      } else if (!isNaN(data)) {\n        numChannels = parseInt(data);\n      }\n\n      if (data.audioSprite) {\n        var sp;\n\n        for (var i = data.audioSprite.length; i--;) {\n          sp = data.audioSprite[i];\n          s._idHash[sp.id] = {\n            src: loadItem.src,\n            startTime: parseInt(sp.startTime),\n            duration: parseInt(sp.duration)\n          };\n\n          if (sp.defaultPlayProps) {\n            s._defaultPlayPropsHash[sp.id] = createjs.PlayPropsConfig.create(sp.defaultPlayProps);\n          }\n        }\n      }\n    }\n\n    if (loadItem.id != null) {\n      s._idHash[loadItem.id] = {\n        src: loadItem.src\n      };\n    }\n\n    ;\n    var loader = s.activePlugin.register(loadItem);\n    SoundChannel.create(loadItem.src, numChannels); // return the number of instances to the user.  This will also be returned in the load event.\n\n    if (data == null || !isNaN(data)) {\n      loadItem.data = numChannels || SoundChannel.maxPerChannel();\n    } else {\n      loadItem.data.channels = numChannels || SoundChannel.maxPerChannel();\n    }\n\n    if (loader.type) {\n      loadItem.type = loader.type;\n    }\n\n    if (loadItem.defaultPlayProps) {\n      s._defaultPlayPropsHash[loadItem.src] = createjs.PlayPropsConfig.create(loadItem.defaultPlayProps);\n    }\n\n    return loader;\n  };\n  /**\n   * Register an audio file for loading and future playback in Sound. This is automatically called when using\n   * <a href=\"http://preloadjs.com\" target=\"_blank\">PreloadJS</a>.  It is recommended to register all sounds that\n   * need to be played back in order to properly prepare and preload them. Sound does internal preloading when required.\n   *\n   * <h4>Example</h4>\n   *\n   *      createjs.Sound.alternateExtensions = [\"mp3\"];\n   *      createjs.Sound.on(\"fileload\", handleLoad); // add an event listener for when load is completed\n   *      createjs.Sound.registerSound(\"myAudioPath/mySound.ogg\", \"myID\", 3);\n   *      createjs.Sound.registerSound({ogg:\"path1/mySound.ogg\", mp3:\"path2/mySoundNoExtension\"}, \"myID\", 3);\n   *\n   *\n   * @method registerSound\n   * @param {String | Object} src The source or an Object with a \"src\" property or an Object with multiple extension labeled src properties.\n   * @param {String} [id] An id specified by the user to play the sound later.  Note id is required for when src is multiple extension labeled src properties.\n   * @param {Number | Object} [data] Data associated with the item. Sound uses the data parameter as the number of\n   * channels for an audio instance, however a \"channels\" property can be appended to the data object if it is used\n   * for other information. The audio channels will set a default based on plugin if no value is found.\n   * Sound also uses the data property to hold an {{#crossLink \"AudioSprite\"}}{{/crossLink}} array of objects in the following format {id, startTime, duration}.<br/>\n   *   id used to play the sound later, in the same manner as a sound src with an id.<br/>\n   *   startTime is the initial offset to start playback and loop from, in milliseconds.<br/>\n   *   duration is the amount of time to play the clip for, in milliseconds.<br/>\n   * This allows Sound to support audio sprites that are played back by id.\n   * @param {string} basePath Set a path that will be prepended to src for loading.\n   * @param {Object | PlayPropsConfig} defaultPlayProps Optional Playback properties that will be set as the defaults on any new AbstractSoundInstance.\n   * See {{#crossLink \"PlayPropsConfig\"}}{{/crossLink}} for options.\n   * @return {Object} An object with the modified values that were passed in, which defines the sound.\n   * Returns false if the source cannot be parsed or no plugins can be initialized.\n   * Returns true if the source is already loaded.\n   * @static\n   * @since 0.4.0\n   */\n\n\n  s.registerSound = function (src, id, data, basePath, defaultPlayProps) {\n    var loadItem = {\n      src: src,\n      id: id,\n      data: data,\n      defaultPlayProps: defaultPlayProps\n    };\n\n    if (src instanceof Object && src.src) {\n      basePath = id;\n      loadItem = src;\n    }\n\n    loadItem = createjs.LoadItem.create(loadItem);\n    loadItem.path = basePath;\n\n    if (basePath != null && !(loadItem.src instanceof Object)) {\n      loadItem.src = basePath + src;\n    }\n\n    var loader = s._registerSound(loadItem);\n\n    if (!loader) {\n      return false;\n    }\n\n    if (!s._preloadHash[loadItem.src]) {\n      s._preloadHash[loadItem.src] = [];\n    }\n\n    s._preloadHash[loadItem.src].push(loadItem);\n\n    if (s._preloadHash[loadItem.src].length == 1) {\n      // OJR note this will disallow reloading a sound if loading fails or the source changes\n      loader.on(\"complete\", createjs.proxy(this._handleLoadComplete, this));\n      loader.on(\"error\", createjs.proxy(this._handleLoadError, this));\n      s.activePlugin.preload(loader);\n    } else {\n      if (s._preloadHash[loadItem.src][0] == true) {\n        return true;\n      }\n    }\n\n    return loadItem;\n  };\n  /**\n   * Register an array of audio files for loading and future playback in Sound. It is recommended to register all\n   * sounds that need to be played back in order to properly prepare and preload them. Sound does internal preloading\n   * when required.\n   *\n   * <h4>Example</h4>\n   *\n   * \t\tvar assetPath = \"./myAudioPath/\";\n   *      var sounds = [\n   *          {src:\"asset0.ogg\", id:\"example\"},\n   *          {src:\"asset1.ogg\", id:\"1\", data:6},\n   *          {src:\"asset2.mp3\", id:\"works\"}\n   *          {src:{mp3:\"path1/asset3.mp3\", ogg:\"path2/asset3NoExtension}, id:\"better\"}\n   *      ];\n   *      createjs.Sound.alternateExtensions = [\"mp3\"];\t// if the passed extension is not supported, try this extension\n   *      createjs.Sound.on(\"fileload\", handleLoad); // call handleLoad when each sound loads\n   *      createjs.Sound.registerSounds(sounds, assetPath);\n   *\n   * @method registerSounds\n   * @param {Array} sounds An array of objects to load. Objects are expected to be in the format needed for\n   * {{#crossLink \"Sound/registerSound\"}}{{/crossLink}}: <code>{src:srcURI, id:ID, data:Data}</code>\n   * with \"id\" and \"data\" being optional.\n   * You can also pass an object with path and manifest properties, where path is a basePath and manifest is an array of objects to load.\n   * Note id is required if src is an object with extension labeled src properties.\n   * @param {string} basePath Set a path that will be prepended to each src when loading.  When creating, playing, or removing\n   * audio that was loaded with a basePath by src, the basePath must be included.\n   * @return {Object} An array of objects with the modified values that were passed in, which defines each sound.\n   * Like registerSound, it will return false for any values when the source cannot be parsed or if no plugins can be initialized.\n   * Also, it will return true for any values when the source is already loaded.\n   * @static\n   * @since 0.6.0\n   */\n\n\n  s.registerSounds = function (sounds, basePath) {\n    var returnValues = [];\n\n    if (sounds.path) {\n      if (!basePath) {\n        basePath = sounds.path;\n      } else {\n        basePath = basePath + sounds.path;\n      }\n\n      sounds = sounds.manifest; // TODO document this feature\n    }\n\n    for (var i = 0, l = sounds.length; i < l; i++) {\n      returnValues[i] = createjs.Sound.registerSound(sounds[i].src, sounds[i].id, sounds[i].data, basePath, sounds[i].defaultPlayProps);\n    }\n\n    return returnValues;\n  };\n  /**\n   * Remove a sound that has been registered with {{#crossLink \"Sound/registerSound\"}}{{/crossLink}} or\n   * {{#crossLink \"Sound/registerSounds\"}}{{/crossLink}}.\n   * <br />Note this will stop playback on active instances playing this sound before deleting them.\n   * <br />Note if you passed in a basePath, you need to pass it or prepend it to the src here.\n   *\n   * <h4>Example</h4>\n   *\n   *      createjs.Sound.removeSound(\"myID\");\n   *      createjs.Sound.removeSound(\"myAudioBasePath/mySound.ogg\");\n   *      createjs.Sound.removeSound(\"myPath/myOtherSound.mp3\", \"myBasePath/\");\n   *      createjs.Sound.removeSound({mp3:\"musicNoExtension\", ogg:\"music.ogg\"}, \"myBasePath/\");\n   *\n   * @method removeSound\n   * @param {String | Object} src The src or ID of the audio, or an Object with a \"src\" property, or an Object with multiple extension labeled src properties.\n   * @param {string} basePath Set a path that will be prepended to each src when removing.\n   * @return {Boolean} True if sound is successfully removed.\n   * @static\n   * @since 0.4.1\n   */\n\n\n  s.removeSound = function (src, basePath) {\n    if (s.activePlugin == null) {\n      return false;\n    }\n\n    if (src instanceof Object && src.src) {\n      src = src.src;\n    }\n\n    var details;\n\n    if (src instanceof Object) {\n      details = s._parseSrc(src);\n    } else {\n      src = s._getSrcById(src).src;\n      details = s._parsePath(src);\n    }\n\n    if (details == null) {\n      return false;\n    }\n\n    src = details.src;\n\n    if (basePath != null) {\n      src = basePath + src;\n    }\n\n    for (var prop in s._idHash) {\n      if (s._idHash[prop].src == src) {\n        delete s._idHash[prop];\n      }\n    } // clear from SoundChannel, which also stops and deletes all instances\n\n\n    SoundChannel.removeSrc(src);\n    delete s._preloadHash[src];\n    s.activePlugin.removeSound(src);\n    return true;\n  };\n  /**\n   * Remove an array of audio files that have been registered with {{#crossLink \"Sound/registerSound\"}}{{/crossLink}} or\n   * {{#crossLink \"Sound/registerSounds\"}}{{/crossLink}}.\n   * <br />Note this will stop playback on active instances playing this audio before deleting them.\n   * <br />Note if you passed in a basePath, you need to pass it or prepend it to the src here.\n   *\n   * <h4>Example</h4>\n   *\n   * \t\tassetPath = \"./myPath/\";\n   *      var sounds = [\n   *          {src:\"asset0.ogg\", id:\"example\"},\n   *          {src:\"asset1.ogg\", id:\"1\", data:6},\n   *          {src:\"asset2.mp3\", id:\"works\"}\n   *      ];\n   *      createjs.Sound.removeSounds(sounds, assetPath);\n   *\n   * @method removeSounds\n   * @param {Array} sounds An array of objects to remove. Objects are expected to be in the format needed for\n   * {{#crossLink \"Sound/removeSound\"}}{{/crossLink}}: <code>{srcOrID:srcURIorID}</code>.\n   * You can also pass an object with path and manifest properties, where path is a basePath and manifest is an array of objects to remove.\n   * @param {string} basePath Set a path that will be prepended to each src when removing.\n   * @return {Object} An array of Boolean values representing if the sounds with the same array index were\n   * successfully removed.\n   * @static\n   * @since 0.4.1\n   */\n\n\n  s.removeSounds = function (sounds, basePath) {\n    var returnValues = [];\n\n    if (sounds.path) {\n      if (!basePath) {\n        basePath = sounds.path;\n      } else {\n        basePath = basePath + sounds.path;\n      }\n\n      sounds = sounds.manifest;\n    }\n\n    for (var i = 0, l = sounds.length; i < l; i++) {\n      returnValues[i] = createjs.Sound.removeSound(sounds[i].src, basePath);\n    }\n\n    return returnValues;\n  };\n  /**\n   * Remove all sounds that have been registered with {{#crossLink \"Sound/registerSound\"}}{{/crossLink}} or\n   * {{#crossLink \"Sound/registerSounds\"}}{{/crossLink}}.\n   * <br />Note this will stop playback on all active sound instances before deleting them.\n   *\n   * <h4>Example</h4>\n   *\n   *     createjs.Sound.removeAllSounds();\n   *\n   * @method removeAllSounds\n   * @static\n   * @since 0.4.1\n   */\n\n\n  s.removeAllSounds = function () {\n    s._idHash = {};\n    s._preloadHash = {};\n    SoundChannel.removeAll();\n\n    if (s.activePlugin) {\n      s.activePlugin.removeAllSounds();\n    }\n  };\n  /**\n   * Check if a source has been loaded by internal preloaders. This is necessary to ensure that sounds that are\n   * not completed preloading will not kick off a new internal preload if they are played.\n   *\n   * <h4>Example</h4>\n   *\n   *     var mySound = \"assetPath/asset0.ogg\";\n   *     if(createjs.Sound.loadComplete(mySound) {\n   *         createjs.Sound.play(mySound);\n   *     }\n   *\n   * @method loadComplete\n   * @param {String} src The src or id that is being loaded.\n   * @return {Boolean} If the src is already loaded.\n   * @since 0.4.0\n   * @static\n   */\n\n\n  s.loadComplete = function (src) {\n    if (!s.isReady()) {\n      return false;\n    }\n\n    var details = s._parsePath(src);\n\n    if (details) {\n      src = s._getSrcById(details.src).src;\n    } else {\n      src = s._getSrcById(src).src;\n    }\n\n    if (s._preloadHash[src] == undefined) {\n      return false;\n    }\n\n    return s._preloadHash[src][0] == true; // src only loads once, so if it's true for the first it's true for all\n  };\n  /**\n   * Parse the path of a sound. Alternate extensions will be attempted in order if the\n   * current extension is not supported\n   * @method _parsePath\n   * @param {String} value The path to an audio source.\n   * @return {Object} A formatted object that can be registered with the {{#crossLink \"Sound/activePlugin:property\"}}{{/crossLink}}\n   * and returned to a preloader like <a href=\"http://preloadjs.com\" target=\"_blank\">PreloadJS</a>.\n   * @protected\n   * @static\n   */\n\n\n  s._parsePath = function (value) {\n    if (typeof value != \"string\") {\n      value = value.toString();\n    }\n\n    var match = value.match(s.FILE_PATTERN);\n\n    if (match == null) {\n      return false;\n    }\n\n    var name = match[4];\n    var ext = match[5];\n    var c = s.capabilities;\n    var i = 0;\n\n    while (!c[ext]) {\n      ext = s.alternateExtensions[i++];\n\n      if (i > s.alternateExtensions.length) {\n        return null;\n      } // no extensions are supported\n\n    }\n\n    value = value.replace(\".\" + match[5], \".\" + ext);\n    var ret = {\n      name: name,\n      src: value,\n      extension: ext\n    };\n    return ret;\n  };\n  /**\n   * Parse the path of a sound based on properties of src matching with supported extensions.\n   * Returns false if none of the properties are supported\n   * @method _parseSrc\n   * @param {Object} value The paths to an audio source, indexed by extension type.\n   * @return {Object} A formatted object that can be registered with the {{#crossLink \"Sound/activePlugin:property\"}}{{/crossLink}}\n   * and returned to a preloader like <a href=\"http://preloadjs.com\" target=\"_blank\">PreloadJS</a>.\n   * @protected\n   * @static\n   */\n\n\n  s._parseSrc = function (value) {\n    var ret = {\n      name: undefined,\n      src: undefined,\n      extension: undefined\n    };\n    var c = s.capabilities;\n\n    for (var prop in value) {\n      if (value.hasOwnProperty(prop) && c[prop]) {\n        ret.src = value[prop];\n        ret.extension = prop;\n        break;\n      }\n    }\n\n    if (!ret.src) {\n      return false;\n    } // no matches\n\n\n    var i = ret.src.lastIndexOf(\"/\");\n\n    if (i != -1) {\n      ret.name = ret.src.slice(i + 1);\n    } else {\n      ret.name = ret.src;\n    }\n\n    return ret;\n  };\n  /* ---------------\n   Static API.\n   --------------- */\n\n  /**\n   * Play a sound and get a {{#crossLink \"AbstractSoundInstance\"}}{{/crossLink}} to control. If the sound fails to play, a\n   * AbstractSoundInstance will still be returned, and have a playState of {{#crossLink \"Sound/PLAY_FAILED:property\"}}{{/crossLink}}.\n   * Note that even on sounds with failed playback, you may still be able to call AbstractSoundInstance {{#crossLink \"AbstractSoundInstance/play\"}}{{/crossLink}},\n   * since the failure could be due to lack of available channels. If the src does not have a supported extension or\n   * if there is no available plugin, a default AbstractSoundInstance will be returned which will not play any audio, but will not generate errors.\n   *\n   * <h4>Example</h4>\n   *\n   *      createjs.Sound.on(\"fileload\", handleLoad);\n   *      createjs.Sound.registerSound(\"myAudioPath/mySound.mp3\", \"myID\", 3);\n   *      function handleLoad(event) {\n   *      \tcreatejs.Sound.play(\"myID\");\n   *      \t// store off AbstractSoundInstance for controlling\n   *      \tvar myInstance = createjs.Sound.play(\"myID\", {interrupt: createjs.Sound.INTERRUPT_ANY, loop:-1});\n   *      }\n   *\n   * NOTE to create an audio sprite that has not already been registered, both startTime and duration need to be set.\n   * This is only when creating a new audio sprite, not when playing using the id of an already registered audio sprite.\n   *\n   * <b>Parameters Deprecated</b><br />\n   * The parameters for this method are deprecated in favor of a single parameter that is an Object or {{#crossLink \"PlayPropsConfig\"}}{{/crossLink}}.\n   *\n   * @method play\n   * @param {String} src The src or ID of the audio.\n   * @param {String | Object} [interrupt=\"none\"|options] <b>This parameter will be renamed playProps in the next release.</b><br />\n   * This parameter can be an instance of {{#crossLink \"PlayPropsConfig\"}}{{/crossLink}} or an Object that contains any or all optional properties by name,\n   * including: interrupt, delay, offset, loop, volume, pan, startTime, and duration (see the above code sample).\n   * <br /><strong>OR</strong><br />\n   * <b>Deprecated</b> How to interrupt any currently playing instances of audio with the same source,\n   * if the maximum number of instances of the sound are already playing. Values are defined as <code>INTERRUPT_TYPE</code>\n   * constants on the Sound class, with the default defined by {{#crossLink \"Sound/defaultInterruptBehavior:property\"}}{{/crossLink}}.\n   * @param {Number} [delay=0] <b>Deprecated</b> The amount of time to delay the start of audio playback, in milliseconds.\n   * @param {Number} [offset=0] <b>Deprecated</b> The offset from the start of the audio to begin playback, in milliseconds.\n   * @param {Number} [loop=0] <b>Deprecated</b> How many times the audio loops when it reaches the end of playback. The default is 0 (no\n   * loops), and -1 can be used for infinite playback.\n   * @param {Number} [volume=1] <b>Deprecated</b> The volume of the sound, between 0 and 1. Note that the master volume is applied\n   * against the individual volume.\n   * @param {Number} [pan=0] <b>Deprecated</b> The left-right pan of the sound (if supported), between -1 (left) and 1 (right).\n   * @param {Number} [startTime=null] <b>Deprecated</b> To create an audio sprite (with duration), the initial offset to start playback and loop from, in milliseconds.\n   * @param {Number} [duration=null] <b>Deprecated</b> To create an audio sprite (with startTime), the amount of time to play the clip for, in milliseconds.\n   * @return {AbstractSoundInstance} A {{#crossLink \"AbstractSoundInstance\"}}{{/crossLink}} that can be controlled after it is created.\n   * @static\n   */\n\n\n  s.play = function (src, interrupt, delay, offset, loop, volume, pan, startTime, duration) {\n    var playProps;\n\n    if (interrupt instanceof Object || interrupt instanceof createjs.PlayPropsConfig) {\n      playProps = createjs.PlayPropsConfig.create(interrupt);\n    } else {\n      playProps = createjs.PlayPropsConfig.create({\n        interrupt: interrupt,\n        delay: delay,\n        offset: offset,\n        loop: loop,\n        volume: volume,\n        pan: pan,\n        startTime: startTime,\n        duration: duration\n      });\n    }\n\n    var instance = s.createInstance(src, playProps.startTime, playProps.duration);\n\n    var ok = s._playInstance(instance, playProps);\n\n    if (!ok) {\n      instance._playFailed();\n    }\n\n    return instance;\n  };\n  /**\n   * Creates a {{#crossLink \"AbstractSoundInstance\"}}{{/crossLink}} using the passed in src. If the src does not have a\n   * supported extension or if there is no available plugin, a default AbstractSoundInstance will be returned that can be\n   * called safely but does nothing.\n   *\n   * <h4>Example</h4>\n   *\n   *      var myInstance = null;\n   *      createjs.Sound.on(\"fileload\", handleLoad);\n   *      createjs.Sound.registerSound(\"myAudioPath/mySound.mp3\", \"myID\", 3);\n   *      function handleLoad(event) {\n   *      \tmyInstance = createjs.Sound.createInstance(\"myID\");\n   *      \t// alternately we could call the following\n   *      \tmyInstance = createjs.Sound.createInstance(\"myAudioPath/mySound.mp3\");\n   *      }\n   *\n   * NOTE to create an audio sprite that has not already been registered, both startTime and duration need to be set.\n   * This is only when creating a new audio sprite, not when playing using the id of an already registered audio sprite.\n   *\n   * @method createInstance\n   * @param {String} src The src or ID of the audio.\n   * @param {Number} [startTime=null] To create an audio sprite (with duration), the initial offset to start playback and loop from, in milliseconds.\n   * @param {Number} [duration=null] To create an audio sprite (with startTime), the amount of time to play the clip for, in milliseconds.\n   * @return {AbstractSoundInstance} A {{#crossLink \"AbstractSoundInstance\"}}{{/crossLink}} that can be controlled after it is created.\n   * Unsupported extensions will return the default AbstractSoundInstance.\n   * @since 0.4.0\n   * @static\n   */\n\n\n  s.createInstance = function (src, startTime, duration) {\n    if (!s.initializeDefaultPlugins()) {\n      return new createjs.DefaultSoundInstance(src, startTime, duration);\n    }\n\n    var defaultPlayProps = s._defaultPlayPropsHash[src]; // for audio sprites, which create and store defaults by id\n\n    src = s._getSrcById(src);\n\n    var details = s._parsePath(src.src);\n\n    var instance = null;\n\n    if (details != null && details.src != null) {\n      SoundChannel.create(details.src);\n\n      if (startTime == null) {\n        startTime = src.startTime;\n      }\n\n      instance = s.activePlugin.create(details.src, startTime, duration || src.duration);\n      defaultPlayProps = defaultPlayProps || s._defaultPlayPropsHash[details.src];\n\n      if (defaultPlayProps) {\n        instance.applyPlayProps(defaultPlayProps);\n      }\n    } else {\n      instance = new createjs.DefaultSoundInstance(src, startTime, duration);\n    }\n\n    instance.uniqueId = s._lastID++;\n    return instance;\n  };\n  /**\n   * Stop all audio (global stop). Stopped audio is reset, and not paused. To play audio that has been stopped,\n   * call AbstractSoundInstance {{#crossLink \"AbstractSoundInstance/play\"}}{{/crossLink}}.\n   *\n   * <h4>Example</h4>\n   *\n   *     createjs.Sound.stop();\n   *\n   * @method stop\n   * @static\n   */\n\n\n  s.stop = function () {\n    var instances = this._instances;\n\n    for (var i = instances.length; i--;) {\n      instances[i].stop(); // NOTE stop removes instance from this._instances\n    }\n  };\n  /**\n   * Deprecated, please use {{#crossLink \"Sound/volume:property\"}}{{/crossLink}} instead.\n   *\n   * @method setVolume\n   * @param {Number} value The master volume value. The acceptable range is 0-1.\n   * @static\n   * @deprecated\n   */\n\n\n  s.setVolume = function (value) {\n    if (Number(value) == null) {\n      return false;\n    }\n\n    value = Math.max(0, Math.min(1, value));\n    s._masterVolume = value;\n\n    if (!this.activePlugin || !this.activePlugin.setVolume || !this.activePlugin.setVolume(value)) {\n      var instances = this._instances;\n\n      for (var i = 0, l = instances.length; i < l; i++) {\n        instances[i].setMasterVolume(value);\n      }\n    }\n  };\n  /**\n   * Deprecated, please use {{#crossLink \"Sound/volume:property\"}}{{/crossLink}} instead.\n   *\n   * @method getVolume\n   * @return {Number} The master volume, in a range of 0-1.\n   * @static\n   * @deprecated\n   */\n\n\n  s.getVolume = function () {\n    return this._masterVolume;\n  };\n  /**\n   * Deprecated, please use {{#crossLink \"Sound/muted:property\"}}{{/crossLink}} instead.\n   *\n   * @method setMute\n   * @param {Boolean} value Whether the audio should be muted or not.\n   * @return {Boolean} If the mute was set.\n   * @static\n   * @since 0.4.0\n   * @deprecated\n   */\n\n\n  s.setMute = function (value) {\n    if (value == null) {\n      return false;\n    }\n\n    this._masterMute = value;\n\n    if (!this.activePlugin || !this.activePlugin.setMute || !this.activePlugin.setMute(value)) {\n      var instances = this._instances;\n\n      for (var i = 0, l = instances.length; i < l; i++) {\n        instances[i].setMasterMute(value);\n      }\n    }\n\n    return true;\n  };\n  /**\n   * Deprecated, please use {{#crossLink \"Sound/muted:property\"}}{{/crossLink}} instead.\n   *\n   * @method getMute\n   * @return {Boolean} The mute value of Sound.\n   * @static\n   * @since 0.4.0\n   * @deprecated\n   */\n\n\n  s.getMute = function () {\n    return this._masterMute;\n  };\n  /**\n   * Set the default playback properties for all new SoundInstances of the passed in src or ID.\n   * See {{#crossLink \"PlayPropsConfig\"}}{{/crossLink}} for available properties.\n   *\n   * @method setDefaultPlayProps\n   * @param {String} src The src or ID used to register the audio.\n   * @param {Object | PlayPropsConfig} playProps The playback properties you would like to set.\n   * @since 0.6.1\n   */\n\n\n  s.setDefaultPlayProps = function (src, playProps) {\n    src = s._getSrcById(src);\n    s._defaultPlayPropsHash[s._parsePath(src.src).src] = createjs.PlayPropsConfig.create(playProps);\n  };\n  /**\n   * Get the default playback properties for the passed in src or ID.  These properties are applied to all\n   * new SoundInstances.  Returns null if default does not exist.\n   *\n   * @method getDefaultPlayProps\n   * @param {String} src The src or ID used to register the audio.\n   * @returns {PlayPropsConfig} returns an existing PlayPropsConfig or null if one does not exist\n   * @since 0.6.1\n   */\n\n\n  s.getDefaultPlayProps = function (src) {\n    src = s._getSrcById(src);\n    return s._defaultPlayPropsHash[s._parsePath(src.src).src];\n  };\n  /* ---------------\n   Internal methods\n   --------------- */\n\n  /**\n   * Play an instance. This is called by the static API, as well as from plugins. This allows the core class to\n   * control delays.\n   * @method _playInstance\n   * @param {AbstractSoundInstance} instance The {{#crossLink \"AbstractSoundInstance\"}}{{/crossLink}} to start playing.\n   * @param {PlayPropsConfig} playProps A PlayPropsConfig object.\n   * @return {Boolean} If the sound can start playing. Sounds that fail immediately will return false. Sounds that\n   * have a delay will return true, but may still fail to play.\n   * @protected\n   * @static\n   */\n\n\n  s._playInstance = function (instance, playProps) {\n    var defaultPlayProps = s._defaultPlayPropsHash[instance.src] || {};\n\n    if (playProps.interrupt == null) {\n      playProps.interrupt = defaultPlayProps.interrupt || s.defaultInterruptBehavior;\n    }\n\n    ;\n\n    if (playProps.delay == null) {\n      playProps.delay = defaultPlayProps.delay || 0;\n    }\n\n    if (playProps.offset == null) {\n      playProps.offset = instance.getPosition();\n    }\n\n    if (playProps.loop == null) {\n      playProps.loop = instance.loop;\n    }\n\n    if (playProps.volume == null) {\n      playProps.volume = instance.volume;\n    }\n\n    if (playProps.pan == null) {\n      playProps.pan = instance.pan;\n    }\n\n    if (playProps.delay == 0) {\n      var ok = s._beginPlaying(instance, playProps);\n\n      if (!ok) {\n        return false;\n      }\n    } else {\n      //Note that we can't pass arguments to proxy OR setTimeout (IE only), so just wrap the function call.\n      // OJR WebAudio may want to handle this differently, so it might make sense to move this functionality into the plugins in the future\n      var delayTimeoutId = setTimeout(function () {\n        s._beginPlaying(instance, playProps);\n      }, playProps.delay);\n      instance.delayTimeoutId = delayTimeoutId;\n    }\n\n    this._instances.push(instance);\n\n    return true;\n  };\n  /**\n   * Begin playback. This is called immediately or after delay by {{#crossLink \"Sound/playInstance\"}}{{/crossLink}}.\n   * @method _beginPlaying\n   * @param {AbstractSoundInstance} instance A {{#crossLink \"AbstractSoundInstance\"}}{{/crossLink}} to begin playback.\n   * @param {PlayPropsConfig} playProps A PlayPropsConfig object.\n   * @return {Boolean} If the sound can start playing. If there are no available channels, or the instance fails to\n   * start, this will return false.\n   * @protected\n   * @static\n   */\n\n\n  s._beginPlaying = function (instance, playProps) {\n    if (!SoundChannel.add(instance, playProps.interrupt)) {\n      return false;\n    }\n\n    var result = instance._beginPlaying(playProps);\n\n    if (!result) {\n      var index = createjs.indexOf(this._instances, instance);\n\n      if (index > -1) {\n        this._instances.splice(index, 1);\n      }\n\n      return false;\n    }\n\n    return true;\n  };\n  /**\n   * Get the source of a sound via the ID passed in with a register call. If no ID is found the value is returned\n   * instead.\n   * @method _getSrcById\n   * @param {String} value The ID the sound was registered with.\n   * @return {String} The source of the sound if it has been registered with this ID or the value that was passed in.\n   * @protected\n   * @static\n   */\n\n\n  s._getSrcById = function (value) {\n    return s._idHash[value] || {\n      src: value\n    };\n  };\n  /**\n   * A sound has completed playback, been interrupted, failed, or been stopped. This method removes the instance from\n   * Sound management. It will be added again, if the sound re-plays. Note that this method is called from the\n   * instances themselves.\n   * @method _playFinished\n   * @param {AbstractSoundInstance} instance The instance that finished playback.\n   * @protected\n   * @static\n   */\n\n\n  s._playFinished = function (instance) {\n    SoundChannel.remove(instance);\n    var index = createjs.indexOf(this._instances, instance);\n\n    if (index > -1) {\n      this._instances.splice(index, 1);\n    } // OJR this will always be > -1, there is no way for an instance to exist without being added to this._instances\n\n  };\n\n  createjs.Sound = Sound;\n  /**\n   * An internal class that manages the number of active {{#crossLink \"AbstractSoundInstance\"}}{{/crossLink}} instances for\n   * each sound type. This method is only used internally by the {{#crossLink \"Sound\"}}{{/crossLink}} class.\n   *\n   * The number of sounds is artificially limited by Sound in order to prevent over-saturation of a\n   * single sound, as well as to stay within hardware limitations, although the latter may disappear with better\n   * browser support.\n   *\n   * When a sound is played, this class ensures that there is an available instance, or interrupts an appropriate\n   * sound that is already playing.\n   * #class SoundChannel\n   * @param {String} src The source of the instances\n   * @param {Number} [max=1] The number of instances allowed\n   * @constructor\n   * @protected\n   */\n\n  function SoundChannel(src, max) {\n    this.init(src, max);\n  }\n  /* ------------\n   Static API\n   ------------ */\n\n  /**\n   * A hash of channel instances indexed by source.\n   * #property channels\n   * @type {Object}\n   * @static\n   */\n\n\n  SoundChannel.channels = {};\n  /**\n   * Create a sound channel. Note that if the sound channel already exists, this will fail.\n   * #method create\n   * @param {String} src The source for the channel\n   * @param {Number} max The maximum amount this channel holds. The default is {{#crossLink \"SoundChannel.maxDefault\"}}{{/crossLink}}.\n   * @return {Boolean} If the channels were created.\n   * @static\n   */\n\n  SoundChannel.create = function (src, max) {\n    var channel = SoundChannel.get(src);\n\n    if (channel == null) {\n      SoundChannel.channels[src] = new SoundChannel(src, max);\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * Delete a sound channel, stop and delete all related instances. Note that if the sound channel does not exist, this will fail.\n   * #method remove\n   * @param {String} src The source for the channel\n   * @return {Boolean} If the channels were deleted.\n   * @static\n   */\n\n\n  SoundChannel.removeSrc = function (src) {\n    var channel = SoundChannel.get(src);\n\n    if (channel == null) {\n      return false;\n    }\n\n    channel._removeAll(); // this stops and removes all active instances\n\n\n    delete SoundChannel.channels[src];\n    return true;\n  };\n  /**\n   * Delete all sound channels, stop and delete all related instances.\n   * #method removeAll\n   * @static\n   */\n\n\n  SoundChannel.removeAll = function () {\n    for (var channel in SoundChannel.channels) {\n      SoundChannel.channels[channel]._removeAll(); // this stops and removes all active instances\n\n    }\n\n    SoundChannel.channels = {};\n  };\n  /**\n   * Add an instance to a sound channel.\n   * #method add\n   * @param {AbstractSoundInstance} instance The instance to add to the channel\n   * @param {String} interrupt The interrupt value to use. Please see the {{#crossLink \"Sound/play\"}}{{/crossLink}}\n   * for details on interrupt modes.\n   * @return {Boolean} The success of the method call. If the channel is full, it will return false.\n   * @static\n   */\n\n\n  SoundChannel.add = function (instance, interrupt) {\n    var channel = SoundChannel.get(instance.src);\n\n    if (channel == null) {\n      return false;\n    }\n\n    return channel._add(instance, interrupt);\n  };\n  /**\n   * Remove an instance from the channel.\n   * #method remove\n   * @param {AbstractSoundInstance} instance The instance to remove from the channel\n   * @return The success of the method call. If there is no channel, it will return false.\n   * @static\n   */\n\n\n  SoundChannel.remove = function (instance) {\n    var channel = SoundChannel.get(instance.src);\n\n    if (channel == null) {\n      return false;\n    }\n\n    channel._remove(instance);\n\n    return true;\n  };\n  /**\n   * Get the maximum number of sounds you can have in a channel.\n   * #method maxPerChannel\n   * @return {Number} The maximum number of sounds you can have in a channel.\n   */\n\n\n  SoundChannel.maxPerChannel = function () {\n    return p.maxDefault;\n  };\n  /**\n   * Get a channel instance by its src.\n   * #method get\n   * @param {String} src The src to use to look up the channel\n   * @static\n   */\n\n\n  SoundChannel.get = function (src) {\n    return SoundChannel.channels[src];\n  };\n\n  var p = SoundChannel.prototype;\n  p.constructor = SoundChannel;\n  /**\n   * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n   * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n   * for details.\n   *\n   * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n   *\n   * @method initialize\n   * @protected\n   * @deprecated\n   */\n  // p.initialize = function() {}; // searchable for devs wondering where it is.\n\n  /**\n   * The source of the channel.\n   * #property src\n   * @type {String}\n   */\n\n  p.src = null;\n  /**\n   * The maximum number of instances in this channel.  -1 indicates no limit\n   * #property max\n   * @type {Number}\n   */\n\n  p.max = null;\n  /**\n   * The default value to set for max, if it isn't passed in.  Also used if -1 is passed.\n   * #property maxDefault\n   * @type {Number}\n   * @default 100\n   * @since 0.4.0\n   */\n\n  p.maxDefault = 100;\n  /**\n   * The current number of active instances.\n   * #property length\n   * @type {Number}\n   */\n\n  p.length = 0;\n  /**\n   * Initialize the channel.\n   * #method init\n   * @param {String} src The source of the channel\n   * @param {Number} max The maximum number of instances in the channel\n   * @protected\n   */\n\n  p.init = function (src, max) {\n    this.src = src;\n    this.max = max || this.maxDefault;\n\n    if (this.max == -1) {\n      this.max = this.maxDefault;\n    }\n\n    this._instances = [];\n  };\n  /**\n   * Get an instance by index.\n   * #method get\n   * @param {Number} index The index to return.\n   * @return {AbstractSoundInstance} The AbstractSoundInstance at a specific instance.\n   */\n\n\n  p._get = function (index) {\n    return this._instances[index];\n  };\n  /**\n   * Add a new instance to the channel.\n   * #method add\n   * @param {AbstractSoundInstance} instance The instance to add.\n   * @return {Boolean} The success of the method call. If the channel is full, it will return false.\n   */\n\n\n  p._add = function (instance, interrupt) {\n    if (!this._getSlot(interrupt, instance)) {\n      return false;\n    }\n\n    this._instances.push(instance);\n\n    this.length++;\n    return true;\n  };\n  /**\n   * Remove an instance from the channel, either when it has finished playing, or it has been interrupted.\n   * #method remove\n   * @param {AbstractSoundInstance} instance The instance to remove\n   * @return {Boolean} The success of the remove call. If the instance is not found in this channel, it will\n   * return false.\n   */\n\n\n  p._remove = function (instance) {\n    var index = createjs.indexOf(this._instances, instance);\n\n    if (index == -1) {\n      return false;\n    }\n\n    this._instances.splice(index, 1);\n\n    this.length--;\n    return true;\n  };\n  /**\n   * Stop playback and remove all instances from the channel.  Usually in response to a delete call.\n   * #method removeAll\n   */\n\n\n  p._removeAll = function () {\n    // Note that stop() removes the item from the list\n    for (var i = this.length - 1; i >= 0; i--) {\n      this._instances[i].stop();\n    }\n  };\n  /**\n   * Get an available slot depending on interrupt value and if slots are available.\n   * #method getSlot\n   * @param {String} interrupt The interrupt value to use.\n   * @param {AbstractSoundInstance} instance The sound instance that will go in the channel if successful.\n   * @return {Boolean} Determines if there is an available slot. Depending on the interrupt mode, if there are no slots,\n   * an existing AbstractSoundInstance may be interrupted. If there are no slots, this method returns false.\n   */\n\n\n  p._getSlot = function (interrupt, instance) {\n    var target, replacement;\n\n    if (interrupt != Sound.INTERRUPT_NONE) {\n      // First replacement candidate\n      replacement = this._get(0);\n\n      if (replacement == null) {\n        return true;\n      }\n    }\n\n    for (var i = 0, l = this.max; i < l; i++) {\n      target = this._get(i); // Available Space\n\n      if (target == null) {\n        return true;\n      } // Audio is complete or not playing\n\n\n      if (target.playState == Sound.PLAY_FINISHED || target.playState == Sound.PLAY_INTERRUPTED || target.playState == Sound.PLAY_FAILED) {\n        replacement = target;\n        break;\n      }\n\n      if (interrupt == Sound.INTERRUPT_NONE) {\n        continue;\n      } // Audio is a better candidate than the current target, according to playhead\n\n\n      if (interrupt == Sound.INTERRUPT_EARLY && target.getPosition() < replacement.getPosition() || interrupt == Sound.INTERRUPT_LATE && target.getPosition() > replacement.getPosition()) {\n        replacement = target;\n      }\n    }\n\n    if (replacement != null) {\n      replacement._interrupt();\n\n      this._remove(replacement);\n\n      return true;\n    }\n\n    return false;\n  };\n\n  p.toString = function () {\n    return \"[Sound SoundChannel]\";\n  }; // do not add SoundChannel to namespace\n\n})(); //##############################################################################\n// AbstractSoundInstance.js\n//##############################################################################\n\n/**\n * A AbstractSoundInstance is created when any calls to the Sound API method {{#crossLink \"Sound/play\"}}{{/crossLink}} or\n * {{#crossLink \"Sound/createInstance\"}}{{/crossLink}} are made. The AbstractSoundInstance is returned by the active plugin\n * for control by the user.\n *\n * <h4>Example</h4>\n *\n *      var myInstance = createjs.Sound.play(\"myAssetPath/mySrcFile.mp3\");\n *\n * A number of additional parameters provide a quick way to determine how a sound is played. Please see the Sound\n * API method {{#crossLink \"Sound/play\"}}{{/crossLink}} for a list of arguments.\n *\n * Once a AbstractSoundInstance is created, a reference can be stored that can be used to control the audio directly through\n * the AbstractSoundInstance. If the reference is not stored, the AbstractSoundInstance will play out its audio (and any loops), and\n * is then de-referenced from the {{#crossLink \"Sound\"}}{{/crossLink}} class so that it can be cleaned up. If audio\n * playback has completed, a simple call to the {{#crossLink \"AbstractSoundInstance/play\"}}{{/crossLink}} instance method\n * will rebuild the references the Sound class need to control it.\n *\n *      var myInstance = createjs.Sound.play(\"myAssetPath/mySrcFile.mp3\", {loop:2});\n *      myInstance.on(\"loop\", handleLoop);\n *      function handleLoop(event) {\n *          myInstance.volume = myInstance.volume * 0.5;\n *      }\n *\n * Events are dispatched from the instance to notify when the sound has completed, looped, or when playback fails\n *\n *      var myInstance = createjs.Sound.play(\"myAssetPath/mySrcFile.mp3\");\n *      myInstance.on(\"complete\", handleComplete);\n *      myInstance.on(\"loop\", handleLoop);\n *      myInstance.on(\"failed\", handleFailed);\n *\n *\n * @class AbstractSoundInstance\n * @param {String} src The path to and file name of the sound.\n * @param {Number} startTime Audio sprite property used to apply an offset, in milliseconds.\n * @param {Number} duration Audio sprite property used to set the time the clip plays for, in milliseconds.\n * @param {Object} playbackResource Any resource needed by plugin to support audio playback.\n * @extends EventDispatcher\n * @constructor\n */\n\n\n(function () {\n  \"use strict\"; // Constructor:\n\n  var AbstractSoundInstance = function (src, startTime, duration, playbackResource) {\n    this.EventDispatcher_constructor(); // public properties:\n\n    /**\n     * The source of the sound.\n     * @property src\n     * @type {String}\n     * @default null\n     */\n\n    this.src = src;\n    /**\n     * The unique ID of the instance. This is set by {{#crossLink \"Sound\"}}{{/crossLink}}.\n     * @property uniqueId\n     * @type {String} | Number\n     * @default -1\n     */\n\n    this.uniqueId = -1;\n    /**\n     * The play state of the sound. Play states are defined as constants on {{#crossLink \"Sound\"}}{{/crossLink}}.\n     * @property playState\n     * @type {String}\n     * @default null\n     */\n\n    this.playState = null;\n    /**\n     * A Timeout created by {{#crossLink \"Sound\"}}{{/crossLink}} when this AbstractSoundInstance is played with a delay.\n     * This allows AbstractSoundInstance to remove the delay if stop, pause, or cleanup are called before playback begins.\n     * @property delayTimeoutId\n     * @type {timeoutVariable}\n     * @default null\n     * @protected\n     * @since 0.4.0\n     */\n\n    this.delayTimeoutId = null; // TODO consider moving delay into AbstractSoundInstance so it can be handled by plugins\n    // private properties\n    // Getter / Setter Properties\n    // OJR TODO find original reason that we didn't use defined functions.  I think it was performance related\n\n    /**\n     * The volume of the sound, between 0 and 1.\n     *\n     * The actual output volume of a sound can be calculated using:\n     * <code>myInstance.volume * createjs.Sound.getVolume();</code>\n     *\n     * @property volume\n     * @type {Number}\n     * @default 1\n     */\n\n    this._volume = 1;\n    Object.defineProperty(this, \"volume\", {\n      get: this.getVolume,\n      set: this.setVolume\n    });\n    /**\n     * The pan of the sound, between -1 (left) and 1 (right). Note that pan is not supported by HTML Audio.\n     *\n     * <br />Note in WebAudioPlugin this only gives us the \"x\" value of what is actually 3D audio.\n     *\n     * @property pan\n     * @type {Number}\n     * @default 0\n     */\n\n    this._pan = 0;\n    Object.defineProperty(this, \"pan\", {\n      get: this.getPan,\n      set: this.setPan\n    });\n    /**\n     * Audio sprite property used to determine the starting offset.\n     * @property startTime\n     * @type {Number}\n     * @default 0\n     * @since 0.6.1\n     */\n\n    this._startTime = Math.max(0, startTime || 0);\n    Object.defineProperty(this, \"startTime\", {\n      get: this.getStartTime,\n      set: this.setStartTime\n    });\n    /**\n     * Sets or gets the length of the audio clip, value is in milliseconds.\n     *\n     * @property duration\n     * @type {Number}\n     * @default 0\n     * @since 0.6.0\n     */\n\n    this._duration = Math.max(0, duration || 0);\n    Object.defineProperty(this, \"duration\", {\n      get: this.getDuration,\n      set: this.setDuration\n    });\n    /**\n     * Object that holds plugin specific resource need for audio playback.\n     * This is set internally by the plugin.  For example, WebAudioPlugin will set an array buffer,\n     * HTMLAudioPlugin will set a tag, FlashAudioPlugin will set a flash reference.\n     *\n     * @property playbackResource\n     * @type {Object}\n     * @default null\n     */\n\n    this._playbackResource = null;\n    Object.defineProperty(this, \"playbackResource\", {\n      get: this.getPlaybackResource,\n      set: this.setPlaybackResource\n    });\n\n    if (playbackResource !== false && playbackResource !== true) {\n      this.setPlaybackResource(playbackResource);\n    }\n    /**\n     * The position of the playhead in milliseconds. This can be set while a sound is playing, paused, or stopped.\n     *\n     * @property position\n     * @type {Number}\n     * @default 0\n     * @since 0.6.0\n     */\n\n\n    this._position = 0;\n    Object.defineProperty(this, \"position\", {\n      get: this.getPosition,\n      set: this.setPosition\n    });\n    /**\n     * The number of play loops remaining. Negative values will loop infinitely.\n     *\n     * @property loop\n     * @type {Number}\n     * @default 0\n     * @public\n     * @since 0.6.0\n     */\n\n    this._loop = 0;\n    Object.defineProperty(this, \"loop\", {\n      get: this.getLoop,\n      set: this.setLoop\n    });\n    /**\n     * Mutes or unmutes the current audio instance.\n     *\n     * @property muted\n     * @type {Boolean}\n     * @default false\n     * @since 0.6.0\n     */\n\n    this._muted = false;\n    Object.defineProperty(this, \"muted\", {\n      get: this.getMuted,\n      set: this.setMuted\n    });\n    /**\n     * Pauses or resumes the current audio instance.\n     *\n     * @property paused\n     * @type {Boolean}\n     */\n\n    this._paused = false;\n    Object.defineProperty(this, \"paused\", {\n      get: this.getPaused,\n      set: this.setPaused\n    }); // Events\n\n    /**\n     * The event that is fired when playback has started successfully.\n     * @event succeeded\n     * @param {Object} target The object that dispatched the event.\n     * @param {String} type The event type.\n     * @since 0.4.0\n     */\n\n    /**\n     * The event that is fired when playback is interrupted. This happens when another sound with the same\n     * src property is played using an interrupt value that causes this instance to stop playing.\n     * @event interrupted\n     * @param {Object} target The object that dispatched the event.\n     * @param {String} type The event type.\n     * @since 0.4.0\n     */\n\n    /**\n     * The event that is fired when playback has failed. This happens when there are too many channels with the same\n     * src property already playing (and the interrupt value doesn't cause an interrupt of another instance), or\n     * the sound could not be played, perhaps due to a 404 error.\n     * @event failed\n     * @param {Object} target The object that dispatched the event.\n     * @param {String} type The event type.\n     * @since 0.4.0\n     */\n\n    /**\n     * The event that is fired when a sound has completed playing but has loops remaining.\n     * @event loop\n     * @param {Object} target The object that dispatched the event.\n     * @param {String} type The event type.\n     * @since 0.4.0\n     */\n\n    /**\n     * The event that is fired when playback completes. This means that the sound has finished playing in its\n     * entirety, including its loop iterations.\n     * @event complete\n     * @param {Object} target The object that dispatched the event.\n     * @param {String} type The event type.\n     * @since 0.4.0\n     */\n  };\n\n  var p = createjs.extend(AbstractSoundInstance, createjs.EventDispatcher); // TODO: deprecated\n  // p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n  // Public Methods:\n\n  /**\n   * Play an instance. This method is intended to be called on SoundInstances that already exist (created\n   * with the Sound API {{#crossLink \"Sound/createInstance\"}}{{/crossLink}} or {{#crossLink \"Sound/play\"}}{{/crossLink}}).\n   *\n   * <h4>Example</h4>\n   *\n   *      var myInstance = createjs.Sound.createInstance(mySrc);\n   *      myInstance.play({interrupt:createjs.Sound.INTERRUPT_ANY, loop:2, pan:0.5});\n   *\n   * Note that if this sound is already playing, this call will still set the passed in parameters.\n  \t * <b>Parameters Deprecated</b><br />\n   * The parameters for this method are deprecated in favor of a single parameter that is an Object or {{#crossLink \"PlayPropsConfig\"}}{{/crossLink}}.\n   *\n   * @method play\n   * @param {String | Object} [interrupt=\"none\"|options] <b>This parameter will be renamed playProps in the next release.</b><br />\n   * This parameter can be an instance of {{#crossLink \"PlayPropsConfig\"}}{{/crossLink}} or an Object that contains any or all optional properties by name,\n   * including: interrupt, delay, offset, loop, volume, pan, startTime, and duration (see the above code sample).\n   * <br /><strong>OR</strong><br />\n   * <b>Deprecated</b> How to interrupt any currently playing instances of audio with the same source,\n   * if the maximum number of instances of the sound are already playing. Values are defined as <code>INTERRUPT_TYPE</code>\n   * constants on the Sound class, with the default defined by {{#crossLink \"Sound/defaultInterruptBehavior:property\"}}{{/crossLink}}.\n   * @param {Number} [delay=0] <b>Deprecated</b> The amount of time to delay the start of audio playback, in milliseconds.\n   * @param {Number} [offset=0] <b>Deprecated</b> The offset from the start of the audio to begin playback, in milliseconds.\n   * @param {Number} [loop=0] <b>Deprecated</b> How many times the audio loops when it reaches the end of playback. The default is 0 (no\n   * loops), and -1 can be used for infinite playback.\n   * @param {Number} [volume=1] <b>Deprecated</b> The volume of the sound, between 0 and 1. Note that the master volume is applied\n   * against the individual volume.\n   * @param {Number} [pan=0] <b>Deprecated</b> The left-right pan of the sound (if supported), between -1 (left) and 1 (right).\n   * Note that pan is not supported for HTML Audio.\n   * @return {AbstractSoundInstance} A reference to itself, intended for chaining calls.\n   */\n\n  p.play = function (interrupt, delay, offset, loop, volume, pan) {\n    var playProps;\n\n    if (interrupt instanceof Object || interrupt instanceof createjs.PlayPropsConfig) {\n      playProps = createjs.PlayPropsConfig.create(interrupt);\n    } else {\n      playProps = createjs.PlayPropsConfig.create({\n        interrupt: interrupt,\n        delay: delay,\n        offset: offset,\n        loop: loop,\n        volume: volume,\n        pan: pan\n      });\n    }\n\n    if (this.playState == createjs.Sound.PLAY_SUCCEEDED) {\n      this.applyPlayProps(playProps);\n\n      if (this._paused) {\n        this.setPaused(false);\n      }\n\n      return;\n    }\n\n    this._cleanUp();\n\n    createjs.Sound._playInstance(this, playProps); // make this an event dispatch??\n\n\n    return this;\n  };\n  /**\n   * Stop playback of the instance. Stopped sounds will reset their position to 0, and calls to {{#crossLink \"AbstractSoundInstance/resume\"}}{{/crossLink}}\n   * will fail. To start playback again, call {{#crossLink \"AbstractSoundInstance/play\"}}{{/crossLink}}.\n      *\n      * If you don't want to lose your position use yourSoundInstance.paused = true instead. {{#crossLink \"AbstractSoundInstance/paused\"}}{{/crossLink}}.\n   *\n   * <h4>Example</h4>\n   *\n   *     myInstance.stop();\n   *\n   * @method stop\n   * @return {AbstractSoundInstance} A reference to itself, intended for chaining calls.\n   */\n\n\n  p.stop = function () {\n    this._position = 0;\n    this._paused = false;\n\n    this._handleStop();\n\n    this._cleanUp();\n\n    this.playState = createjs.Sound.PLAY_FINISHED;\n    return this;\n  };\n  /**\n   * Remove all external references and resources from AbstractSoundInstance.  Note this is irreversible and AbstractSoundInstance will no longer work\n   * @method destroy\n   * @since 0.6.0\n   */\n\n\n  p.destroy = function () {\n    this._cleanUp();\n\n    this.src = null;\n    this.playbackResource = null;\n    this.removeAllEventListeners();\n  };\n  /**\n   * Takes an PlayPropsConfig or Object with the same properties and sets them on this instance.\n   * @method applyPlayProps\n   * @param {PlayPropsConfig | Object} playProps A PlayPropsConfig or object containing the same properties.\n   * @since 0.6.1\n   * @return {AbstractSoundInstance} A reference to itself, intended for chaining calls.\n   */\n\n\n  p.applyPlayProps = function (playProps) {\n    if (playProps.offset != null) {\n      this.setPosition(playProps.offset);\n    }\n\n    if (playProps.loop != null) {\n      this.setLoop(playProps.loop);\n    }\n\n    if (playProps.volume != null) {\n      this.setVolume(playProps.volume);\n    }\n\n    if (playProps.pan != null) {\n      this.setPan(playProps.pan);\n    }\n\n    if (playProps.startTime != null) {\n      this.setStartTime(playProps.startTime);\n      this.setDuration(playProps.duration);\n    }\n\n    return this;\n  };\n\n  p.toString = function () {\n    return \"[AbstractSoundInstance]\";\n  }; // get/set methods that allow support for IE8\n\n  /**\n   * DEPRECATED, please use {{#crossLink \"AbstractSoundInstance/paused:property\"}}{{/crossLink}} directly as a property,\n   *\n   * @deprecated\n   * @method getPaused\n   * @returns {boolean} If the instance is currently paused\n   * @since 0.6.0\n   */\n\n\n  p.getPaused = function () {\n    return this._paused;\n  };\n  /**\n   * DEPRECATED, please use {{#crossLink \"AbstractSoundInstance/paused:property\"}}{{/crossLink}} directly as a property\n   *\n   * @deprecated\n   * @method setPaused\n   * @param {boolean} value\n   * @since 0.6.0\n   * @return {AbstractSoundInstance} A reference to itself, intended for chaining calls.\n   */\n\n\n  p.setPaused = function (value) {\n    if (value !== true && value !== false || this._paused == value) {\n      return;\n    }\n\n    if (value == true && this.playState != createjs.Sound.PLAY_SUCCEEDED) {\n      return;\n    }\n\n    this._paused = value;\n\n    if (value) {\n      this._pause();\n    } else {\n      this._resume();\n    }\n\n    clearTimeout(this.delayTimeoutId);\n    return this;\n  };\n  /**\n   * DEPRECATED, please use {{#crossLink \"AbstractSoundInstance/volume:property\"}}{{/crossLink}} directly as a property\n   *\n   * @deprecated\n   * @method setVolume\n   * @param {Number} value The volume to set, between 0 and 1.\n   * @return {AbstractSoundInstance} A reference to itself, intended for chaining calls.\n   */\n\n\n  p.setVolume = function (value) {\n    if (value == this._volume) {\n      return this;\n    }\n\n    this._volume = Math.max(0, Math.min(1, value));\n\n    if (!this._muted) {\n      this._updateVolume();\n    }\n\n    return this;\n  };\n  /**\n   * DEPRECATED, please use {{#crossLink \"AbstractSoundInstance/volume:property\"}}{{/crossLink}} directly as a property\n   *\n   * @deprecated\n   * @method getVolume\n   * @return {Number} The current volume of the sound instance.\n   */\n\n\n  p.getVolume = function () {\n    return this._volume;\n  };\n  /**\n   * DEPRECATED, please use {{#crossLink \"AbstractSoundInstance/muted:property\"}}{{/crossLink}} directly as a property\n   *\n   * @deprecated\n   * @method setMuted\n   * @param {Boolean} value If the sound should be muted.\n   * @return {AbstractSoundInstance} A reference to itself, intended for chaining calls.\n   * @since 0.6.0\n   */\n\n\n  p.setMuted = function (value) {\n    if (value !== true && value !== false) {\n      return;\n    }\n\n    this._muted = value;\n\n    this._updateVolume();\n\n    return this;\n  };\n  /**\n   * DEPRECATED, please use {{#crossLink \"AbstractSoundInstance/muted:property\"}}{{/crossLink}} directly as a property\n   *\n   * @deprecated\n   * @method getMuted\n   * @return {Boolean} If the sound is muted.\n   * @since 0.6.0\n   */\n\n\n  p.getMuted = function () {\n    return this._muted;\n  };\n  /**\n   * DEPRECATED, please use {{#crossLink \"AbstractSoundInstance/pan:property\"}}{{/crossLink}} directly as a property\n   *\n   * @deprecated\n   * @method setPan\n   * @param {Number} value The pan value, between -1 (left) and 1 (right).\n   * @return {AbstractSoundInstance} Returns reference to itself for chaining calls\n   */\n\n\n  p.setPan = function (value) {\n    if (value == this._pan) {\n      return this;\n    }\n\n    this._pan = Math.max(-1, Math.min(1, value));\n\n    this._updatePan();\n\n    return this;\n  };\n  /**\n   * DEPRECATED, please use {{#crossLink \"AbstractSoundInstance/pan:property\"}}{{/crossLink}} directly as a property\n   *\n   * @deprecated\n   * @method getPan\n   * @return {Number} The value of the pan, between -1 (left) and 1 (right).\n   */\n\n\n  p.getPan = function () {\n    return this._pan;\n  };\n  /**\n   * DEPRECATED, please use {{#crossLink \"AbstractSoundInstance/position:property\"}}{{/crossLink}} directly as a property\n   *\n   * @deprecated\n   * @method getPosition\n   * @return {Number} The position of the playhead in the sound, in milliseconds.\n   */\n\n\n  p.getPosition = function () {\n    if (!this._paused && this.playState == createjs.Sound.PLAY_SUCCEEDED) {\n      this._position = this._calculateCurrentPosition();\n    }\n\n    return this._position;\n  };\n  /**\n   * DEPRECATED, please use {{#crossLink \"AbstractSoundInstance/position:property\"}}{{/crossLink}} directly as a property\n   *\n   * @deprecated\n   * @method setPosition\n   * @param {Number} value The position to place the playhead, in milliseconds.\n   * @return {AbstractSoundInstance} Returns reference to itself for chaining calls\n   */\n\n\n  p.setPosition = function (value) {\n    this._position = Math.max(0, value);\n\n    if (this.playState == createjs.Sound.PLAY_SUCCEEDED) {\n      this._updatePosition();\n    }\n\n    return this;\n  };\n  /**\n   * DEPRECATED, please use {{#crossLink \"AbstractSoundInstance/startTime:property\"}}{{/crossLink}} directly as a property\n   *\n   * @deprecated\n   * @method getStartTime\n   * @return {Number} The startTime of the sound instance in milliseconds.\n   */\n\n\n  p.getStartTime = function () {\n    return this._startTime;\n  };\n  /**\n   * DEPRECATED, please use {{#crossLink \"AbstractSoundInstance/startTime:property\"}}{{/crossLink}} directly as a property\n   *\n   * @deprecated\n   * @method setStartTime\n   * @param {number} value The new startTime time in milli seconds.\n   * @return {AbstractSoundInstance} Returns reference to itself for chaining calls\n   */\n\n\n  p.setStartTime = function (value) {\n    if (value == this._startTime) {\n      return this;\n    }\n\n    this._startTime = Math.max(0, value || 0);\n\n    this._updateStartTime();\n\n    return this;\n  };\n  /**\n   * DEPRECATED, please use {{#crossLink \"AbstractSoundInstance/duration:property\"}}{{/crossLink}} directly as a property\n   *\n   * @deprecated\n   * @method getDuration\n   * @return {Number} The duration of the sound instance in milliseconds.\n   */\n\n\n  p.getDuration = function () {\n    return this._duration;\n  };\n  /**\n   * DEPRECATED, please use {{#crossLink \"AbstractSoundInstance/duration:property\"}}{{/crossLink}} directly as a property\n   *\n   * @deprecated\n   * @method setDuration\n   * @param {number} value The new duration time in milli seconds.\n   * @return {AbstractSoundInstance} Returns reference to itself for chaining calls\n   * @since 0.6.0\n   */\n\n\n  p.setDuration = function (value) {\n    if (value == this._duration) {\n      return this;\n    }\n\n    this._duration = Math.max(0, value || 0);\n\n    this._updateDuration();\n\n    return this;\n  };\n  /**\n   * DEPRECATED, please use {{#crossLink \"AbstractSoundInstance/playbackResource:property\"}}{{/crossLink}} directly as a property\n   *\n   * @deprecated\n   * @method setPlayback\n   * @param {Object} value The new playback resource.\n   * @return {AbstractSoundInstance} Returns reference to itself for chaining calls\n   * @since 0.6.0\n   **/\n\n\n  p.setPlaybackResource = function (value) {\n    this._playbackResource = value;\n\n    if (this._duration == 0) {\n      this._setDurationFromSource();\n    }\n\n    return this;\n  };\n  /**\n   * DEPRECATED, please use {{#crossLink \"AbstractSoundInstance/playbackResource:property\"}}{{/crossLink}} directly as a property\n   *\n   * @deprecated\n   * @method setPlayback\n   * @param {Object} value The new playback resource.\n   * @return {Object} playback resource used for playing audio\n   * @since 0.6.0\n   **/\n\n\n  p.getPlaybackResource = function () {\n    return this._playbackResource;\n  };\n  /**\n   * DEPRECATED, please use {{#crossLink \"AbstractSoundInstance/loop:property\"}}{{/crossLink}} directly as a property\n   *\n   * @deprecated\n   * @method getLoop\n   * @return {number}\n   * @since 0.6.0\n   **/\n\n\n  p.getLoop = function () {\n    return this._loop;\n  };\n  /**\n   * DEPRECATED, please use {{#crossLink \"AbstractSoundInstance/loop:property\"}}{{/crossLink}} directly as a property,\n   *\n   * @deprecated\n   * @method setLoop\n   * @param {number} value The number of times to loop after play.\n   * @since 0.6.0\n   */\n\n\n  p.setLoop = function (value) {\n    if (this._playbackResource != null) {\n      // remove looping\n      if (this._loop != 0 && value == 0) {\n        this._removeLooping(value);\n      } // add looping\n      else if (this._loop == 0 && value != 0) {\n        this._addLooping(value);\n      }\n    }\n\n    this._loop = value;\n  }; // Private Methods:\n\n  /**\n   * A helper method that dispatches all events for AbstractSoundInstance.\n   * @method _sendEvent\n   * @param {String} type The event type\n   * @protected\n   */\n\n\n  p._sendEvent = function (type) {\n    var event = new createjs.Event(type);\n    this.dispatchEvent(event);\n  };\n  /**\n   * Clean up the instance. Remove references and clean up any additional properties such as timers.\n   * @method _cleanUp\n   * @protected\n   */\n\n\n  p._cleanUp = function () {\n    clearTimeout(this.delayTimeoutId); // clear timeout that plays delayed sound\n\n    this._handleCleanUp();\n\n    this._paused = false;\n\n    createjs.Sound._playFinished(this); // TODO change to an event\n\n  };\n  /**\n   * The sound has been interrupted.\n   * @method _interrupt\n   * @protected\n   */\n\n\n  p._interrupt = function () {\n    this._cleanUp();\n\n    this.playState = createjs.Sound.PLAY_INTERRUPTED;\n\n    this._sendEvent(\"interrupted\");\n  };\n  /**\n   * Called by the Sound class when the audio is ready to play (delay has completed). Starts sound playing if the\n   * src is loaded, otherwise playback will fail.\n   * @method _beginPlaying\n   * @param {PlayPropsConfig} playProps A PlayPropsConfig object.\n   * @return {Boolean} If playback succeeded.\n   * @protected\n   */\n  // OJR FlashAudioSoundInstance overwrites\n\n\n  p._beginPlaying = function (playProps) {\n    this.setPosition(playProps.offset);\n    this.setLoop(playProps.loop);\n    this.setVolume(playProps.volume);\n    this.setPan(playProps.pan);\n\n    if (playProps.startTime != null) {\n      this.setStartTime(playProps.startTime);\n      this.setDuration(playProps.duration);\n    }\n\n    if (this._playbackResource != null && this._position < this._duration) {\n      this._paused = false;\n\n      this._handleSoundReady();\n\n      this.playState = createjs.Sound.PLAY_SUCCEEDED;\n\n      this._sendEvent(\"succeeded\");\n\n      return true;\n    } else {\n      this._playFailed();\n\n      return false;\n    }\n  };\n  /**\n   * Play has failed, which can happen for a variety of reasons.\n   * Cleans up instance and dispatches failed event\n   * @method _playFailed\n   * @private\n   */\n\n\n  p._playFailed = function () {\n    this._cleanUp();\n\n    this.playState = createjs.Sound.PLAY_FAILED;\n\n    this._sendEvent(\"failed\");\n  };\n  /**\n   * Audio has finished playing. Manually loop it if required.\n   * @method _handleSoundComplete\n   * @param event\n   * @protected\n   */\n\n\n  p._handleSoundComplete = function (event) {\n    this._position = 0; // have to set this as it can be set by pause during playback\n\n    if (this._loop != 0) {\n      this._loop--; // NOTE this introduces a theoretical limit on loops = float max size x 2 - 1\n\n      this._handleLoop();\n\n      this._sendEvent(\"loop\");\n\n      return;\n    }\n\n    this._cleanUp();\n\n    this.playState = createjs.Sound.PLAY_FINISHED;\n\n    this._sendEvent(\"complete\");\n  }; // Plugin specific code\n\n  /**\n   * Handles starting playback when the sound is ready for playing.\n   * @method _handleSoundReady\n   * @protected\n  \t */\n\n\n  p._handleSoundReady = function () {// plugin specific code\n  };\n  /**\n   * Internal function used to update the volume based on the instance volume, master volume, instance mute value,\n   * and master mute value.\n   * @method _updateVolume\n   * @protected\n   */\n\n\n  p._updateVolume = function () {// plugin specific code\n  };\n  /**\n   * Internal function used to update the pan\n   * @method _updatePan\n   * @protected\n   * @since 0.6.0\n   */\n\n\n  p._updatePan = function () {// plugin specific code\n  };\n  /**\n   * Internal function used to update the startTime of the audio.\n   * @method _updateStartTime\n   * @protected\n   * @since 0.6.1\n   */\n\n\n  p._updateStartTime = function () {// plugin specific code\n  };\n  /**\n   * Internal function used to update the duration of the audio.\n   * @method _updateDuration\n   * @protected\n   * @since 0.6.0\n   */\n\n\n  p._updateDuration = function () {// plugin specific code\n  };\n  /**\n   * Internal function used to get the duration of the audio from the source we'll be playing.\n   * @method _updateDuration\n   * @protected\n   * @since 0.6.0\n   */\n\n\n  p._setDurationFromSource = function () {// plugin specific code\n  };\n  /**\n   * Internal function that calculates the current position of the playhead and sets this._position to that value\n   * @method _calculateCurrentPosition\n   * @protected\n   * @since 0.6.0\n   */\n\n\n  p._calculateCurrentPosition = function () {// plugin specific code that sets this.position\n  };\n  /**\n   * Internal function used to update the position of the playhead.\n   * @method _updatePosition\n   * @protected\n   * @since 0.6.0\n   */\n\n\n  p._updatePosition = function () {// plugin specific code\n  };\n  /**\n   * Internal function called when looping is removed during playback.\n   * @method _removeLooping\n   * @param {number} value The number of times to loop after play.\n   * @protected\n   * @since 0.6.0\n   */\n\n\n  p._removeLooping = function (value) {// plugin specific code\n  };\n  /**\n   * Internal function called when looping is added during playback.\n   * @method _addLooping\n   * @param {number} value The number of times to loop after play.\n   * @protected\n   * @since 0.6.0\n   */\n\n\n  p._addLooping = function (value) {// plugin specific code\n  };\n  /**\n   * Internal function called when pausing playback\n   * @method _pause\n   * @protected\n   * @since 0.6.0\n   */\n\n\n  p._pause = function () {// plugin specific code\n  };\n  /**\n   * Internal function called when resuming playback\n   * @method _resume\n   * @protected\n   * @since 0.6.0\n   */\n\n\n  p._resume = function () {// plugin specific code\n  };\n  /**\n   * Internal function called when stopping playback\n   * @method _handleStop\n   * @protected\n   * @since 0.6.0\n   */\n\n\n  p._handleStop = function () {// plugin specific code\n  };\n  /**\n   * Internal function called when AbstractSoundInstance is being cleaned up\n   * @method _handleCleanUp\n   * @protected\n   * @since 0.6.0\n   */\n\n\n  p._handleCleanUp = function () {// plugin specific code\n  };\n  /**\n   * Internal function called when AbstractSoundInstance has played to end and is looping\n   * @method _handleLoop\n   * @protected\n   * @since 0.6.0\n   */\n\n\n  p._handleLoop = function () {// plugin specific code\n  };\n\n  createjs.AbstractSoundInstance = createjs.promote(AbstractSoundInstance, \"EventDispatcher\");\n  createjs.DefaultSoundInstance = createjs.AbstractSoundInstance; // used when no plugin is supported\n})(); //##############################################################################\n// AbstractPlugin.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor:\n\n  /**\n  * A default plugin class used as a base for all other plugins.\n  * @class AbstractPlugin\n  * @constructor\n  * @since 0.6.0\n  */\n\n  var AbstractPlugin = function () {\n    // private properties:\n\n    /**\n     * The capabilities of the plugin.\n     * method and is used internally.\n     * @property _capabilities\n     * @type {Object}\n     * @default null\n     * @protected\n     * @static\n     */\n    this._capabilities = null;\n    /**\n     * Object hash indexed by the source URI of all created loaders, used to properly destroy them if sources are removed.\n     * @type {Object}\n     * @protected\n     */\n\n    this._loaders = {};\n    /**\n     * Object hash indexed by the source URI of each file to indicate if an audio source has begun loading,\n     * is currently loading, or has completed loading.  Can be used to store non boolean data after loading\n     * is complete (for example arrayBuffers for web audio).\n     * @property _audioSources\n     * @type {Object}\n     * @protected\n     */\n\n    this._audioSources = {};\n    /**\n     * Object hash indexed by the source URI of all created SoundInstances, updates the playbackResource if it loads after they are created,\n     * and properly destroy them if sources are removed\n     * @type {Object}\n     * @protected\n     */\n\n    this._soundInstances = {};\n    /**\n     * The internal master volume value of the plugin.\n     * @property _volume\n     * @type {Number}\n     * @default 1\n     * @protected\n     */\n\n    this._volume = 1;\n    /**\n     * A reference to a loader class used by a plugin that must be set.\n     * @type {Object}\n     * @protected\n     */\n\n    this._loaderClass;\n    /**\n     * A reference to an AbstractSoundInstance class used by a plugin that must be set.\n     * @type {Object}\n     * @protected;\n     */\n\n    this._soundInstanceClass;\n  };\n\n  var p = AbstractPlugin.prototype;\n  /**\n   * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n   * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n   * for details.\n   *\n   * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n   *\n   * @method initialize\n   * @protected\n   * @deprecated\n   */\n  // p.initialize = function() {}; // searchable for devs wondering where it is.\n  // Static Properties:\n  // NOTE THESE PROPERTIES NEED TO BE ADDED TO EACH PLUGIN\n\n  /**\n   * The capabilities of the plugin. This is generated via the _generateCapabilities method and is used internally.\n   * @property _capabilities\n   * @type {Object}\n   * @default null\n   * @protected\n   * @static\n   */\n\n  AbstractPlugin._capabilities = null;\n  /**\n   * Determine if the plugin can be used in the current browser/OS.\n   * @method isSupported\n   * @return {Boolean} If the plugin can be initialized.\n   * @static\n   */\n\n  AbstractPlugin.isSupported = function () {\n    return true;\n  }; // public methods:\n\n  /**\n   * Pre-register a sound for preloading and setup. This is called by {{#crossLink \"Sound\"}}{{/crossLink}}.\n   * Note all plugins provide a <code>Loader</code> instance, which <a href=\"http://preloadjs.com\" target=\"_blank\">PreloadJS</a>\n   * can use to assist with preloading.\n   * @method register\n   * @param {String} loadItem An Object containing the source of the audio\n   * Note that not every plugin will manage this value.\n   * @return {Object} A result object, containing a \"tag\" for preloading purposes.\n   */\n\n\n  p.register = function (loadItem) {\n    var loader = this._loaders[loadItem.src];\n\n    if (loader && !loader.canceled) {\n      return this._loaders[loadItem.src];\n    } // already loading/loaded this, so don't load twice\n    // OJR potential issue that we won't be firing loaded event, might need to trigger if this is already loaded?\n\n\n    this._audioSources[loadItem.src] = true;\n    this._soundInstances[loadItem.src] = [];\n    loader = new this._loaderClass(loadItem);\n    loader.on(\"complete\", this._handlePreloadComplete, this);\n    this._loaders[loadItem.src] = loader;\n    return loader;\n  }; // note sound calls register before calling preload\n\n  /**\n   * Internally preload a sound.\n   * @method preload\n   * @param {Loader} loader The sound URI to load.\n   */\n\n\n  p.preload = function (loader) {\n    loader.on(\"error\", this._handlePreloadError, this);\n    loader.load();\n  };\n  /**\n   * Checks if preloading has started for a specific source. If the source is found, we can assume it is loading,\n   * or has already finished loading.\n   * @method isPreloadStarted\n   * @param {String} src The sound URI to check.\n   * @return {Boolean}\n   */\n\n\n  p.isPreloadStarted = function (src) {\n    return this._audioSources[src] != null;\n  };\n  /**\n   * Checks if preloading has finished for a specific source.\n   * @method isPreloadComplete\n   * @param {String} src The sound URI to load.\n   * @return {Boolean}\n   */\n\n\n  p.isPreloadComplete = function (src) {\n    return !(this._audioSources[src] == null || this._audioSources[src] == true);\n  };\n  /**\n   * Remove a sound added using {{#crossLink \"WebAudioPlugin/register\"}}{{/crossLink}}. Note this does not cancel a preload.\n   * @method removeSound\n   * @param {String} src The sound URI to unload.\n   */\n\n\n  p.removeSound = function (src) {\n    if (!this._soundInstances[src]) {\n      return;\n    }\n\n    for (var i = this._soundInstances[src].length; i--;) {\n      var item = this._soundInstances[src][i];\n      item.destroy();\n    }\n\n    delete this._soundInstances[src];\n    delete this._audioSources[src];\n\n    if (this._loaders[src]) {\n      this._loaders[src].destroy();\n    }\n\n    delete this._loaders[src];\n  };\n  /**\n   * Remove all sounds added using {{#crossLink \"WebAudioPlugin/register\"}}{{/crossLink}}. Note this does not cancel a preload.\n   * @method removeAllSounds\n   * @param {String} src The sound URI to unload.\n   */\n\n\n  p.removeAllSounds = function () {\n    for (var key in this._audioSources) {\n      this.removeSound(key);\n    }\n  };\n  /**\n   * Create a sound instance. If the sound has not been preloaded, it is internally preloaded here.\n   * @method create\n   * @param {String} src The sound source to use.\n   * @param {Number} startTime Audio sprite property used to apply an offset, in milliseconds.\n   * @param {Number} duration Audio sprite property used to set the time the clip plays for, in milliseconds.\n   * @return {AbstractSoundInstance} A sound instance for playback and control.\n   */\n\n\n  p.create = function (src, startTime, duration) {\n    if (!this.isPreloadStarted(src)) {\n      this.preload(this.register(src));\n    }\n\n    var si = new this._soundInstanceClass(src, startTime, duration, this._audioSources[src]);\n\n    this._soundInstances[src].push(si);\n\n    return si;\n  }; // if a plugin does not support volume and mute, it should set these to null\n\n  /**\n   * Set the master volume of the plugin, which affects all SoundInstances.\n   * @method setVolume\n   * @param {Number} value The volume to set, between 0 and 1.\n   * @return {Boolean} If the plugin processes the setVolume call (true). The Sound class will affect all the\n   * instances manually otherwise.\n   */\n\n\n  p.setVolume = function (value) {\n    this._volume = value;\n\n    this._updateVolume();\n\n    return true;\n  };\n  /**\n   * Get the master volume of the plugin, which affects all SoundInstances.\n   * @method getVolume\n   * @return {Number} The volume level, between 0 and 1.\n   */\n\n\n  p.getVolume = function () {\n    return this._volume;\n  };\n  /**\n   * Mute all sounds via the plugin.\n   * @method setMute\n   * @param {Boolean} value If all sound should be muted or not. Note that plugin-level muting just looks up\n   * the mute value of Sound {{#crossLink \"Sound/getMute\"}}{{/crossLink}}, so this property is not used here.\n   * @return {Boolean} If the mute call succeeds.\n   */\n\n\n  p.setMute = function (value) {\n    this._updateVolume();\n\n    return true;\n  }; // plugins should overwrite this method\n\n\n  p.toString = function () {\n    return \"[AbstractPlugin]\";\n  }; // private methods:\n\n  /**\n   * Handles internal preload completion.\n   * @method _handlePreloadComplete\n   * @protected\n   */\n\n\n  p._handlePreloadComplete = function (event) {\n    var src = event.target.getItem().src;\n    this._audioSources[src] = event.result;\n\n    for (var i = 0, l = this._soundInstances[src].length; i < l; i++) {\n      var item = this._soundInstances[src][i];\n      item.setPlaybackResource(this._audioSources[src]); // ToDo consider adding play call here if playstate == playfailed\n    }\n  };\n  /**\n   * Handles internal preload erros\n   * @method _handlePreloadError\n   * @param event\n   * @protected\n   */\n\n\n  p._handlePreloadError = function (event) {//delete(this._audioSources[src]);\n  };\n  /**\n   * Set the gain value for master audio. Should not be called externally.\n   * @method _updateVolume\n   * @protected\n   */\n\n\n  p._updateVolume = function () {// Plugin Specific code\n  };\n\n  createjs.AbstractPlugin = AbstractPlugin;\n})(); //##############################################################################\n// WebAudioLoader.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\";\n  /**\n   * Loader provides a mechanism to preload Web Audio content via PreloadJS or internally. Instances are returned to\n   * the preloader, and the load method is called when the asset needs to be requested.\n   *\n   * @class WebAudioLoader\n   * @param {String} loadItem The item to be loaded\n   * @extends XHRRequest\n   * @protected\n   */\n\n  function Loader(loadItem) {\n    this.AbstractLoader_constructor(loadItem, true, createjs.AbstractLoader.SOUND);\n  }\n\n  ;\n  var p = createjs.extend(Loader, createjs.AbstractLoader); // TODO: deprecated\n  // p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n\n  /**\n   * web audio context required for decoding audio\n   * @property context\n   * @type {AudioContext}\n   * @static\n   */\n\n  Loader.context = null; // public methods\n\n  p.toString = function () {\n    return \"[WebAudioLoader]\";\n  }; // private methods\n\n\n  p._createRequest = function () {\n    this._request = new createjs.XHRRequest(this._item, false);\n\n    this._request.setResponseType(\"arraybuffer\");\n  };\n\n  p._sendComplete = function (event) {\n    // OJR we leave this wrapped in Loader because we need to reference src and the handler only receives a single argument, the decodedAudio\n    Loader.context.decodeAudioData(this._rawResult, createjs.proxy(this._handleAudioDecoded, this), createjs.proxy(this._sendError, this));\n  };\n  /**\n  * The audio has been decoded.\n  * @method handleAudioDecoded\n  * @param decoded\n  * @protected\n  */\n\n\n  p._handleAudioDecoded = function (decodedAudio) {\n    this._result = decodedAudio;\n    this.AbstractLoader__sendComplete();\n  };\n\n  createjs.WebAudioLoader = createjs.promote(Loader, \"AbstractLoader\");\n})(); //##############################################################################\n// WebAudioSoundInstance.js\n//##############################################################################\n\n/**\n * WebAudioSoundInstance extends the base api of {{#crossLink \"AbstractSoundInstance\"}}{{/crossLink}} and is used by\n * {{#crossLink \"WebAudioPlugin\"}}{{/crossLink}}.\n *\n * WebAudioSoundInstance exposes audioNodes for advanced users.\n *\n * @param {String} src The path to and file name of the sound.\n * @param {Number} startTime Audio sprite property used to apply an offset, in milliseconds.\n * @param {Number} duration Audio sprite property used to set the time the clip plays for, in milliseconds.\n * @param {Object} playbackResource Any resource needed by plugin to support audio playback.\n * @class WebAudioSoundInstance\n * @extends AbstractSoundInstance\n * @constructor\n */\n\n\n(function () {\n  \"use strict\";\n\n  function WebAudioSoundInstance(src, startTime, duration, playbackResource) {\n    this.AbstractSoundInstance_constructor(src, startTime, duration, playbackResource); // public properties\n\n    /**\n     * NOTE this is only intended for use by advanced users.\n     * <br />GainNode for controlling <code>WebAudioSoundInstance</code> volume. Connected to the {{#crossLink \"WebAudioSoundInstance/destinationNode:property\"}}{{/crossLink}}.\n     * @property gainNode\n     * @type {AudioGainNode}\n     * @since 0.4.0\n     *\n     */\n\n    this.gainNode = s.context.createGain();\n    /**\n     * NOTE this is only intended for use by advanced users.\n     * <br />A panNode allowing left and right audio channel panning only. Connected to WebAudioSoundInstance {{#crossLink \"WebAudioSoundInstance/gainNode:property\"}}{{/crossLink}}.\n     * @property panNode\n     * @type {AudioPannerNode}\n     * @since 0.4.0\n     */\n\n    this.panNode = s.context.createPanner();\n    this.panNode.panningModel = s._panningModel;\n    this.panNode.connect(this.gainNode);\n\n    this._updatePan();\n    /**\n     * NOTE this is only intended for use by advanced users.\n     * <br />sourceNode is the audio source. Connected to WebAudioSoundInstance {{#crossLink \"WebAudioSoundInstance/panNode:property\"}}{{/crossLink}}.\n     * @property sourceNode\n     * @type {AudioNode}\n     * @since 0.4.0\n     *\n     */\n\n\n    this.sourceNode = null; // private properties\n\n    /**\n     * Timeout that is created internally to handle sound playing to completion.\n     * Stored so we can remove it when stop, pause, or cleanup are called\n     * @property _soundCompleteTimeout\n     * @type {timeoutVariable}\n     * @default null\n     * @protected\n     * @since 0.4.0\n     */\n\n    this._soundCompleteTimeout = null;\n    /**\n     * NOTE this is only intended for use by very advanced users.\n     * _sourceNodeNext is the audio source for the next loop, inserted in a look ahead approach to allow for smooth\n     * looping. Connected to {{#crossLink \"WebAudioSoundInstance/gainNode:property\"}}{{/crossLink}}.\n     * @property _sourceNodeNext\n     * @type {AudioNode}\n     * @default null\n     * @protected\n     * @since 0.4.1\n     *\n     */\n\n    this._sourceNodeNext = null;\n    /**\n     * Time audio started playback, in seconds. Used to handle set position, get position, and resuming from paused.\n     * @property _playbackStartTime\n     * @type {Number}\n     * @default 0\n     * @protected\n     * @since 0.4.0\n     */\n\n    this._playbackStartTime = 0; // Proxies, make removing listeners easier.\n\n    this._endedHandler = createjs.proxy(this._handleSoundComplete, this);\n  }\n\n  ;\n  var p = createjs.extend(WebAudioSoundInstance, createjs.AbstractSoundInstance);\n  var s = WebAudioSoundInstance; // TODO: deprecated\n  // p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n\n  /**\n   * Note this is only intended for use by advanced users.\n   * <br />Audio context used to create nodes.  This is and needs to be the same context used by {{#crossLink \"WebAudioPlugin\"}}{{/crossLink}}.\n   \t * @property context\n   * @type {AudioContext}\n   * @static\n   * @since 0.6.0\n   */\n\n  s.context = null;\n  /**\n   * Note this is only intended for use by advanced users.\n   * <br />The scratch buffer that will be assigned to the buffer property of a source node on close.  \n   * This is and should be the same scratch buffer referenced by {{#crossLink \"WebAudioPlugin\"}}{{/crossLink}}.\n   \t * @property _scratchBuffer\n   * @type {AudioBufferSourceNode}\n   * @static\n   */\n\n  s._scratchBuffer = null;\n  /**\n   * Note this is only intended for use by advanced users.\n   * <br /> Audio node from WebAudioPlugin that sequences to <code>context.destination</code>\n   * @property destinationNode\n   * @type {AudioNode}\n   * @static\n   * @since 0.6.0\n   */\n\n  s.destinationNode = null;\n  /**\n   * Value to set panning model to equal power for WebAudioSoundInstance.  Can be \"equalpower\" or 0 depending on browser implementation.\n   * @property _panningModel\n   * @type {Number / String}\n   * @protected\n   * @static\n   * @since 0.6.0\n   */\n\n  s._panningModel = \"equalpower\"; // Public methods\n\n  p.destroy = function () {\n    this.AbstractSoundInstance_destroy();\n    this.panNode.disconnect(0);\n    this.panNode = null;\n    this.gainNode.disconnect(0);\n    this.gainNode = null;\n  };\n\n  p.toString = function () {\n    return \"[WebAudioSoundInstance]\";\n  }; // Private Methods\n\n\n  p._updatePan = function () {\n    this.panNode.setPosition(this._pan, 0, -0.5); // z need to be -0.5 otherwise the sound only plays in left, right, or center\n  };\n\n  p._removeLooping = function (value) {\n    this._sourceNodeNext = this._cleanUpAudioNode(this._sourceNodeNext);\n  };\n\n  p._addLooping = function (value) {\n    if (this.playState != createjs.Sound.PLAY_SUCCEEDED) {\n      return;\n    }\n\n    this._sourceNodeNext = this._createAndPlayAudioNode(this._playbackStartTime, 0);\n  };\n\n  p._setDurationFromSource = function () {\n    this._duration = this.playbackResource.duration * 1000;\n  };\n\n  p._handleCleanUp = function () {\n    if (this.sourceNode && this.playState == createjs.Sound.PLAY_SUCCEEDED) {\n      this.sourceNode = this._cleanUpAudioNode(this.sourceNode);\n      this._sourceNodeNext = this._cleanUpAudioNode(this._sourceNodeNext);\n    }\n\n    if (this.gainNode.numberOfOutputs != 0) {\n      this.gainNode.disconnect(0);\n    } // OJR there appears to be a bug that this doesn't always work in webkit (Chrome and Safari). According to the documentation, this should work.\n\n\n    clearTimeout(this._soundCompleteTimeout);\n    this._playbackStartTime = 0; // This is used by getPosition\n  };\n  /**\n   * Turn off and disconnect an audioNode, then set reference to null to release it for garbage collection\n   * @method _cleanUpAudioNode\n   * @param audioNode\n   * @return {audioNode}\n   * @protected\n   * @since 0.4.1\n   */\n\n\n  p._cleanUpAudioNode = function (audioNode) {\n    if (audioNode) {\n      audioNode.stop(0);\n      audioNode.disconnect(0); // necessary to prevent leak on iOS Safari 7-9. will throw in almost all other\n      // browser implementations.\n\n      try {\n        audioNode.buffer = s._scratchBuffer;\n      } catch (e) {}\n\n      audioNode = null;\n    }\n\n    return audioNode;\n  };\n\n  p._handleSoundReady = function (event) {\n    this.gainNode.connect(s.destinationNode); // this line can cause a memory leak.  Nodes need to be disconnected from the audioDestination or any sequence that leads to it.\n\n    var dur = this._duration * 0.001;\n    var pos = this._position * 0.001;\n\n    if (pos > dur) {\n      pos = dur;\n    }\n\n    this.sourceNode = this._createAndPlayAudioNode(s.context.currentTime - dur, pos);\n    this._playbackStartTime = this.sourceNode.startTime - pos;\n    this._soundCompleteTimeout = setTimeout(this._endedHandler, (dur - pos) * 1000);\n\n    if (this._loop != 0) {\n      this._sourceNodeNext = this._createAndPlayAudioNode(this._playbackStartTime, 0);\n    }\n  };\n  /**\n   * Creates an audio node using the current src and context, connects it to the gain node, and starts playback.\n   * @method _createAndPlayAudioNode\n   * @param {Number} startTime The time to add this to the web audio context, in seconds.\n   * @param {Number} offset The amount of time into the src audio to start playback, in seconds.\n   * @return {audioNode}\n   * @protected\n   * @since 0.4.1\n   */\n\n\n  p._createAndPlayAudioNode = function (startTime, offset) {\n    var audioNode = s.context.createBufferSource();\n    audioNode.buffer = this.playbackResource;\n    audioNode.connect(this.panNode);\n    var dur = this._duration * 0.001;\n    audioNode.startTime = startTime + dur;\n    audioNode.start(audioNode.startTime, offset + this._startTime * 0.001, dur - offset);\n    return audioNode;\n  };\n\n  p._pause = function () {\n    this._position = (s.context.currentTime - this._playbackStartTime) * 1000; // * 1000 to give milliseconds, lets us restart at same point\n\n    this.sourceNode = this._cleanUpAudioNode(this.sourceNode);\n    this._sourceNodeNext = this._cleanUpAudioNode(this._sourceNodeNext);\n\n    if (this.gainNode.numberOfOutputs != 0) {\n      this.gainNode.disconnect(0);\n    }\n\n    clearTimeout(this._soundCompleteTimeout);\n  };\n\n  p._resume = function () {\n    this._handleSoundReady();\n  };\n  /*\n  p._handleStop = function () {\n  \t// web audio does not need to do anything extra\n  };\n  */\n\n\n  p._updateVolume = function () {\n    var newVolume = this._muted ? 0 : this._volume;\n\n    if (newVolume != this.gainNode.gain.value) {\n      this.gainNode.gain.value = newVolume;\n    }\n  };\n\n  p._calculateCurrentPosition = function () {\n    return (s.context.currentTime - this._playbackStartTime) * 1000; // pos in seconds * 1000 to give milliseconds\n  };\n\n  p._updatePosition = function () {\n    this.sourceNode = this._cleanUpAudioNode(this.sourceNode);\n    this._sourceNodeNext = this._cleanUpAudioNode(this._sourceNodeNext);\n    clearTimeout(this._soundCompleteTimeout);\n\n    if (!this._paused) {\n      this._handleSoundReady();\n    }\n  }; // OJR we are using a look ahead approach to ensure smooth looping.\n  // We add _sourceNodeNext to the audio context so that it starts playing even if this callback is delayed.\n  // This technique is described here:  http://www.html5rocks.com/en/tutorials/audio/scheduling/\n  // NOTE the cost of this is that our audio loop may not always match the loop event timing precisely.\n\n\n  p._handleLoop = function () {\n    this._cleanUpAudioNode(this.sourceNode);\n\n    this.sourceNode = this._sourceNodeNext;\n    this._playbackStartTime = this.sourceNode.startTime;\n    this._sourceNodeNext = this._createAndPlayAudioNode(this._playbackStartTime, 0);\n    this._soundCompleteTimeout = setTimeout(this._endedHandler, this._duration);\n  };\n\n  p._updateDuration = function () {\n    if (this.playState == createjs.Sound.PLAY_SUCCEEDED) {\n      this._pause();\n\n      this._resume();\n    }\n  };\n\n  createjs.WebAudioSoundInstance = createjs.promote(WebAudioSoundInstance, \"AbstractSoundInstance\");\n})(); //##############################################################################\n// WebAudioPlugin.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\";\n  /**\n   * Play sounds using Web Audio in the browser. The WebAudioPlugin is currently the default plugin, and will be used\n   * anywhere that it is supported. To change plugin priority, check out the Sound API\n   * {{#crossLink \"Sound/registerPlugins\"}}{{/crossLink}} method.\n  \t * <h4>Known Browser and OS issues for Web Audio</h4>\n   * <b>Firefox 25</b>\n   * <li>\n   *     mp3 audio files do not load properly on all windows machines, reported <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=929969\" target=\"_blank\">here</a>.\n   *     <br />For this reason it is recommended to pass another FireFox-supported type (i.e. ogg) as the default\n   *     extension, until this bug is resolved\n   * </li>\n   *\n   * <b>Webkit (Chrome and Safari)</b>\n   * <li>\n   *     AudioNode.disconnect does not always seem to work.  This can cause the file size to grow over time if you\n   * \t   are playing a lot of audio files.\n   * </li>\n   *\n   * <b>iOS 6 limitations</b>\n   * <ul>\n   *     <li>\n   *         Sound is initially muted and will only unmute through play being called inside a user initiated event\n   *         (touch/click). Please read the mobile playback notes in the the {{#crossLink \"Sound\"}}{{/crossLink}}\n   *         class for a full overview of the limitations, and how to get around them.\n   *     </li>\n   *\t   <li>\n   *\t       A bug exists that will distort un-cached audio when a video element is present in the DOM. You can avoid\n   *\t       this bug by ensuring the audio and video audio share the same sample rate.\n   *\t   </li>\n   * </ul>\n   * @class WebAudioPlugin\n   * @extends AbstractPlugin\n   * @constructor\n   * @since 0.4.0\n   */\n\n  function WebAudioPlugin() {\n    this.AbstractPlugin_constructor(); // Private Properties\n\n    /**\n     * Value to set panning model to equal power for WebAudioSoundInstance.  Can be \"equalpower\" or 0 depending on browser implementation.\n     * @property _panningModel\n     * @type {Number / String}\n     * @protected\n     */\n\n    this._panningModel = s._panningModel;\n    ;\n    /**\n     * The web audio context, which WebAudio uses to play audio. All nodes that interact with the WebAudioPlugin\n     * need to be created within this context.\n     * @property context\n     * @type {AudioContext}\n     */\n\n    this.context = s.context;\n    /**\n     * A DynamicsCompressorNode, which is used to improve sound quality and prevent audio distortion.\n     * It is connected to <code>context.destination</code>.\n     *\n     * Can be accessed by advanced users through createjs.Sound.activePlugin.dynamicsCompressorNode.\n     * @property dynamicsCompressorNode\n     * @type {AudioNode}\n     */\n\n    this.dynamicsCompressorNode = this.context.createDynamicsCompressor();\n    this.dynamicsCompressorNode.connect(this.context.destination);\n    /**\n     * A GainNode for controlling master volume. It is connected to {{#crossLink \"WebAudioPlugin/dynamicsCompressorNode:property\"}}{{/crossLink}}.\n     *\n     * Can be accessed by advanced users through createjs.Sound.activePlugin.gainNode.\n     * @property gainNode\n     * @type {AudioGainNode}\n     */\n\n    this.gainNode = this.context.createGain();\n    this.gainNode.connect(this.dynamicsCompressorNode);\n    createjs.WebAudioSoundInstance.destinationNode = this.gainNode;\n    this._capabilities = s._capabilities;\n    this._loaderClass = createjs.WebAudioLoader;\n    this._soundInstanceClass = createjs.WebAudioSoundInstance;\n\n    this._addPropsToClasses();\n  }\n\n  var p = createjs.extend(WebAudioPlugin, createjs.AbstractPlugin); // TODO: deprecated\n  // p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n  // Static Properties\n\n  var s = WebAudioPlugin;\n  /**\n   * The capabilities of the plugin. This is generated via the {{#crossLink \"WebAudioPlugin/_generateCapabilities:method\"}}{{/crossLink}}\n   * method and is used internally.\n   * @property _capabilities\n   * @type {Object}\n   * @default null\n   * @protected\n   * @static\n   */\n\n  s._capabilities = null;\n  /**\n   * Value to set panning model to equal power for WebAudioSoundInstance.  Can be \"equalpower\" or 0 depending on browser implementation.\n   * @property _panningModel\n   * @type {Number / String}\n   * @protected\n   * @static\n   */\n\n  s._panningModel = \"equalpower\";\n  /**\n   * The web audio context, which WebAudio uses to play audio. All nodes that interact with the WebAudioPlugin\n   * need to be created within this context.\n   *\n   * Advanced users can set this to an existing context, but <b>must</b> do so before they call\n   * {{#crossLink \"Sound/registerPlugins\"}}{{/crossLink}} or {{#crossLink \"Sound/initializeDefaultPlugins\"}}{{/crossLink}}.\n   *\n   * @property context\n   * @type {AudioContext}\n   * @static\n   */\n\n  s.context = null;\n  /**\n   * The scratch buffer that will be assigned to the buffer property of a source node on close.\n   * Works around an iOS Safari bug: https://github.com/CreateJS/SoundJS/issues/102\n   *\n   * Advanced users can set this to an existing source node, but <b>must</b> do so before they call\n   * {{#crossLink \"Sound/registerPlugins\"}}{{/crossLink}} or {{#crossLink \"Sound/initializeDefaultPlugins\"}}{{/crossLink}}.\n   *\n   * @property _scratchBuffer\n   * @type {AudioBuffer}\n   * @protected\n   * @static\n   */\n\n  s._scratchBuffer = null;\n  /**\n   * Indicated whether audio on iOS has been unlocked, which requires a touchend/mousedown event that plays an\n   * empty sound.\n   * @property _unlocked\n   * @type {boolean}\n   * @since 0.6.2\n   * @private\n   */\n\n  s._unlocked = false; // Static Public Methods\n\n  /**\n   * Determine if the plugin can be used in the current browser/OS.\n   * @method isSupported\n   * @return {Boolean} If the plugin can be initialized.\n   * @static\n   */\n\n  s.isSupported = function () {\n    // check if this is some kind of mobile device, Web Audio works with local protocol under PhoneGap and it is unlikely someone is trying to run a local file\n    var isMobilePhoneGap = createjs.BrowserDetect.isIOS || createjs.BrowserDetect.isAndroid || createjs.BrowserDetect.isBlackberry; // OJR isMobile may be redundant with _isFileXHRSupported available.  Consider removing.\n\n    if (location.protocol == \"file:\" && !isMobilePhoneGap && !this._isFileXHRSupported()) {\n      return false;\n    } // Web Audio requires XHR, which is not usually available locally\n\n\n    s._generateCapabilities();\n\n    if (s.context == null) {\n      return false;\n    }\n\n    return true;\n  };\n  /**\n   * Plays an empty sound in the web audio context.  This is used to enable web audio on iOS devices, as they\n   * require the first sound to be played inside of a user initiated event (touch/click).  This is called when\n   * {{#crossLink \"WebAudioPlugin\"}}{{/crossLink}} is initialized (by Sound {{#crossLink \"Sound/initializeDefaultPlugins\"}}{{/crossLink}}\n   * for example).\n   *\n   * <h4>Example</h4>\n   *\n   *     function handleTouch(event) {\n   *         createjs.WebAudioPlugin.playEmptySound();\n   *     }\n   *\n   * @method playEmptySound\n   * @static\n   * @since 0.4.1\n   */\n\n\n  s.playEmptySound = function () {\n    if (s.context == null) {\n      return;\n    }\n\n    var source = s.context.createBufferSource();\n    source.buffer = s._scratchBuffer;\n    source.connect(s.context.destination);\n    source.start(0, 0, 0);\n  }; // Static Private Methods\n\n  /**\n   * Determine if XHR is supported, which is necessary for web audio.\n   * @method _isFileXHRSupported\n   * @return {Boolean} If XHR is supported.\n   * @since 0.4.2\n   * @protected\n   * @static\n   */\n\n\n  s._isFileXHRSupported = function () {\n    // it's much easier to detect when something goes wrong, so let's start optimistically\n    var supported = true;\n    var xhr = new XMLHttpRequest();\n\n    try {\n      xhr.open(\"GET\", \"WebAudioPluginTest.fail\", false); // loading non-existant file triggers 404 only if it could load (synchronous call)\n    } catch (error) {\n      // catch errors in cases where the onerror is passed by\n      supported = false;\n      return supported;\n    }\n\n    xhr.onerror = function () {\n      supported = false;\n    }; // cause irrelevant\n    // with security turned off, we can get empty success results, which is actually a failed read (status code 0?)\n\n\n    xhr.onload = function () {\n      supported = this.status == 404 || this.status == 200 || this.status == 0 && this.response != \"\";\n    };\n\n    try {\n      xhr.send();\n    } catch (error) {\n      // catch errors in cases where the onerror is passed by\n      supported = false;\n    }\n\n    return supported;\n  };\n  /**\n   * Determine the capabilities of the plugin. Used internally. Please see the Sound API {{#crossLink \"Sound/getCapabilities\"}}{{/crossLink}}\n   * method for an overview of plugin capabilities.\n   * @method _generateCapabilities\n   * @static\n   * @protected\n   */\n\n\n  s._generateCapabilities = function () {\n    if (s._capabilities != null) {\n      return;\n    } // Web Audio can be in any formats supported by the audio element, from http://www.w3.org/TR/webaudio/#AudioContext-section\n\n\n    var t = document.createElement(\"audio\");\n\n    if (t.canPlayType == null) {\n      return null;\n    }\n\n    if (s.context == null) {\n      if (window.AudioContext) {\n        s.context = new AudioContext();\n      } else if (window.webkitAudioContext) {\n        s.context = new webkitAudioContext();\n      } else {\n        return null;\n      }\n    }\n\n    if (s._scratchBuffer == null) {\n      s._scratchBuffer = s.context.createBuffer(1, 1, 22050);\n    }\n\n    s._compatibilitySetUp(); // Listen for document level clicks to unlock WebAudio on iOS. See the _unlock method.\n\n\n    if (\"ontouchstart\" in window && s.context.state != \"running\") {\n      s._unlock(); // When played inside of a touch event, this will enable audio on iOS immediately.\n\n\n      document.addEventListener(\"mousedown\", s._unlock, true);\n      document.addEventListener(\"touchend\", s._unlock, true);\n    }\n\n    s._capabilities = {\n      panning: true,\n      volume: true,\n      tracks: -1\n    }; // determine which extensions our browser supports for this plugin by iterating through Sound.SUPPORTED_EXTENSIONS\n\n    var supportedExtensions = createjs.Sound.SUPPORTED_EXTENSIONS;\n    var extensionMap = createjs.Sound.EXTENSION_MAP;\n\n    for (var i = 0, l = supportedExtensions.length; i < l; i++) {\n      var ext = supportedExtensions[i];\n      var playType = extensionMap[ext] || ext;\n      s._capabilities[ext] = t.canPlayType(\"audio/\" + ext) != \"no\" && t.canPlayType(\"audio/\" + ext) != \"\" || t.canPlayType(\"audio/\" + playType) != \"no\" && t.canPlayType(\"audio/\" + playType) != \"\";\n    } // OJR another way to do this might be canPlayType:\"m4a\", codex: mp4\n    // 0=no output, 1=mono, 2=stereo, 4=surround, 6=5.1 surround.\n    // See http://www.w3.org/TR/webaudio/#AudioChannelSplitter for more details on channels.\n\n\n    if (s.context.destination.numberOfChannels < 2) {\n      s._capabilities.panning = false;\n    }\n  };\n  /**\n   * Set up compatibility if only deprecated web audio calls are supported.\n   * See http://www.w3.org/TR/webaudio/#DeprecationNotes\n   * Needed so we can support new browsers that don't support deprecated calls (Firefox) as well as old browsers that\n   * don't support new calls.\n   *\n   * @method _compatibilitySetUp\n   * @static\n   * @protected\n   * @since 0.4.2\n   */\n\n\n  s._compatibilitySetUp = function () {\n    s._panningModel = \"equalpower\"; //assume that if one new call is supported, they all are\n\n    if (s.context.createGain) {\n      return;\n    } // simple name change, functionality the same\n\n\n    s.context.createGain = s.context.createGainNode; // source node, add to prototype\n\n    var audioNode = s.context.createBufferSource();\n    audioNode.__proto__.start = audioNode.__proto__.noteGrainOn; // note that noteGrainOn requires all 3 parameters\n\n    audioNode.__proto__.stop = audioNode.__proto__.noteOff; // panningModel\n\n    s._panningModel = 0;\n  };\n  /**\n   * Try to unlock audio on iOS. This is triggered from either WebAudio plugin setup (which will work if inside of\n   * a `mousedown` or `touchend` event stack), or the first document touchend/mousedown event. If it fails (touchend\n   * will fail if the user presses for too long, indicating a scroll event instead of a click event.\n   *\n   * Note that earlier versions of iOS supported `touchstart` for this, but iOS9 removed this functionality. Adding\n   * a `touchstart` event to support older platforms may preclude a `mousedown` even from getting fired on iOS9, so we\n   * stick with `mousedown` and `touchend`.\n   * @method _unlock\n   * @since 0.6.2\n   * @private\n   */\n\n\n  s._unlock = function () {\n    if (s._unlocked) {\n      return;\n    }\n\n    s.playEmptySound();\n\n    if (s.context.state == \"running\") {\n      document.removeEventListener(\"mousedown\", s._unlock, true);\n      document.removeEventListener(\"touchend\", s._unlock, true);\n      s._unlocked = true;\n    }\n  }; // Public Methods\n\n\n  p.toString = function () {\n    return \"[WebAudioPlugin]\";\n  }; // Private Methods\n\n  /**\n   * Set up needed properties on supported classes WebAudioSoundInstance and WebAudioLoader.\n   * @method _addPropsToClasses\n   * @static\n   * @protected\n   * @since 0.6.0\n   */\n\n\n  p._addPropsToClasses = function () {\n    var c = this._soundInstanceClass;\n    c.context = this.context;\n    c._scratchBuffer = s._scratchBuffer;\n    c.destinationNode = this.gainNode;\n    c._panningModel = this._panningModel;\n    this._loaderClass.context = this.context;\n  };\n  /**\n   * Set the gain value for master audio. Should not be called externally.\n   * @method _updateVolume\n   * @protected\n   */\n\n\n  p._updateVolume = function () {\n    var newVolume = createjs.Sound._masterMute ? 0 : this._volume;\n\n    if (newVolume != this.gainNode.gain.value) {\n      this.gainNode.gain.value = newVolume;\n    }\n  };\n\n  createjs.WebAudioPlugin = createjs.promote(WebAudioPlugin, \"AbstractPlugin\");\n})(); //##############################################################################\n// HTMLAudioTagPool.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\";\n  /**\n   * HTMLAudioTagPool is an object pool for HTMLAudio tag instances.\n   * @class HTMLAudioTagPool\n   * @param {String} src The source of the channel.\n   * @protected\n   */\n\n  function HTMLAudioTagPool() {\n    throw \"HTMLAudioTagPool cannot be instantiated\";\n  }\n\n  var s = HTMLAudioTagPool; // Static Properties\n\n  /**\n   * A hash lookup of each base audio tag, indexed by the audio source.\n   * @property _tags\n   * @type {{}}\n   * @static\n   * @protected\n   */\n\n  s._tags = {};\n  /**\n   * An object pool for html audio tags\n   * @property _tagPool\n   * @type {TagPool}\n   * @static\n   * @protected\n   */\n\n  s._tagPool = new TagPool();\n  /**\n   * A hash lookup of if a base audio tag is available, indexed by the audio source\n   * @property _tagsUsed\n   * @type {{}}\n   * @protected\n   * @static\n   */\n\n  s._tagUsed = {}; // Static Methods\n\n  /**\n    * Get an audio tag with the given source.\n    * @method get\n    * @param {String} src The source file used by the audio tag.\n    * @static\n    */\n\n  s.get = function (src) {\n    var t = s._tags[src];\n\n    if (t == null) {\n      // create new base tag\n      t = s._tags[src] = s._tagPool.get();\n      t.src = src;\n    } else {\n      // get base or pool\n      if (s._tagUsed[src]) {\n        t = s._tagPool.get();\n        t.src = src;\n      } else {\n        s._tagUsed[src] = true;\n      }\n    }\n\n    return t;\n  };\n  /**\n   * Return an audio tag to the pool.\n   * @method set\n   * @param {String} src The source file used by the audio tag.\n   * @param {HTMLElement} tag Audio tag to set.\n   * @static\n   */\n\n\n  s.set = function (src, tag) {\n    // check if this is base, if yes set boolean if not return to pool\n    if (tag == s._tags[src]) {\n      s._tagUsed[src] = false;\n    } else {\n      s._tagPool.set(tag);\n    }\n  };\n  /**\n   * Delete stored tag reference and return them to pool. Note that if the tag reference does not exist, this will fail.\n   * @method remove\n   * @param {String} src The source for the tag\n   * @return {Boolean} If the TagPool was deleted.\n   * @static\n   */\n\n\n  s.remove = function (src) {\n    var tag = s._tags[src];\n\n    if (tag == null) {\n      return false;\n    }\n\n    s._tagPool.set(tag);\n\n    delete s._tags[src];\n    delete s._tagUsed[src];\n    return true;\n  };\n  /**\n   * Gets the duration of the src audio in milliseconds\n   * @method getDuration\n   * @param {String} src The source file used by the audio tag.\n   * @return {Number} Duration of src in milliseconds\n   * @static\n   */\n\n\n  s.getDuration = function (src) {\n    var t = s._tags[src];\n\n    if (t == null || !t.duration) {\n      return 0;\n    } // OJR duration is NaN if loading has not completed\n\n\n    return t.duration * 1000;\n  };\n\n  createjs.HTMLAudioTagPool = HTMLAudioTagPool; // ************************************************************************************************************\n\n  /**\n   * The TagPool is an object pool for HTMLAudio tag instances.\n   * #class TagPool\n   * @param {String} src The source of the channel.\n   * @protected\n   */\n\n  function TagPool(src) {\n    // Public Properties\n\n    /**\n     * A list of all available tags in the pool.\n     * #property tags\n     * @type {Array}\n     * @protected\n     */\n    this._tags = [];\n  }\n\n  ;\n  var p = TagPool.prototype;\n  p.constructor = TagPool; // Public Methods\n\n  /**\n   * Get an HTMLAudioElement for immediate playback. This takes it out of the pool.\n   * #method get\n   * @return {HTMLAudioElement} An HTML audio tag.\n   */\n\n  p.get = function () {\n    var tag;\n\n    if (this._tags.length == 0) {\n      tag = this._createTag();\n    } else {\n      tag = this._tags.pop();\n    }\n\n    if (tag.parentNode == null) {\n      document.body.appendChild(tag);\n    }\n\n    return tag;\n  };\n  /**\n   * Put an HTMLAudioElement back in the pool for use.\n   * #method set\n   * @param {HTMLAudioElement} tag HTML audio tag\n   */\n\n\n  p.set = function (tag) {\n    // OJR this first step seems unnecessary\n    var index = createjs.indexOf(this._tags, tag);\n\n    if (index == -1) {\n      this._tags.src = null;\n\n      this._tags.push(tag);\n    }\n  };\n\n  p.toString = function () {\n    return \"[TagPool]\";\n  }; // Private Methods\n\n  /**\n   * Create an HTML audio tag.\n   * #method _createTag\n   * @param {String} src The source file to set for the audio tag.\n   * @return {HTMLElement} Returns an HTML audio tag.\n   * @protected\n   */\n\n\n  p._createTag = function () {\n    var tag = document.createElement(\"audio\");\n    tag.autoplay = false;\n    tag.preload = \"none\"; //LM: Firefox fails when this the preload=\"none\" for other tags, but it needs to be \"none\" to ensure PreloadJS works.\n\n    return tag;\n  };\n})(); //##############################################################################\n// HTMLAudioSoundInstance.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\";\n  /**\n   * HTMLAudioSoundInstance extends the base api of {{#crossLink \"AbstractSoundInstance\"}}{{/crossLink}} and is used by\n   * {{#crossLink \"HTMLAudioPlugin\"}}{{/crossLink}}.\n   *\n   * @param {String} src The path to and file name of the sound.\n   * @param {Number} startTime Audio sprite property used to apply an offset, in milliseconds.\n   * @param {Number} duration Audio sprite property used to set the time the clip plays for, in milliseconds.\n   * @param {Object} playbackResource Any resource needed by plugin to support audio playback.\n   * @class HTMLAudioSoundInstance\n   * @extends AbstractSoundInstance\n   * @constructor\n   */\n\n  function HTMLAudioSoundInstance(src, startTime, duration, playbackResource) {\n    this.AbstractSoundInstance_constructor(src, startTime, duration, playbackResource); // Private Properties\n\n    this._audioSpriteStopTime = null;\n    this._delayTimeoutId = null; // Proxies, make removing listeners easier.\n\n    this._endedHandler = createjs.proxy(this._handleSoundComplete, this);\n    this._readyHandler = createjs.proxy(this._handleTagReady, this);\n    this._stalledHandler = createjs.proxy(this._playFailed, this);\n    this._audioSpriteEndHandler = createjs.proxy(this._handleAudioSpriteLoop, this);\n    this._loopHandler = createjs.proxy(this._handleSoundComplete, this);\n\n    if (duration) {\n      this._audioSpriteStopTime = (startTime + duration) * 0.001;\n    } else {\n      this._duration = createjs.HTMLAudioTagPool.getDuration(this.src);\n    }\n  }\n\n  var p = createjs.extend(HTMLAudioSoundInstance, createjs.AbstractSoundInstance); // TODO: deprecated\n  // p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n  // Public Methods\n\n  /**\n   * Called by {{#crossLink \"Sound\"}}{{/crossLink}} when plugin does not handle master volume.\n   * undoc'd because it is not meant to be used outside of Sound\n   * #method setMasterVolume\n   * @param value\n   */\n\n  p.setMasterVolume = function (value) {\n    this._updateVolume();\n  };\n  /**\n   * Called by {{#crossLink \"Sound\"}}{{/crossLink}} when plugin does not handle master mute.\n   * undoc'd because it is not meant to be used outside of Sound\n   * #method setMasterMute\n   * @param value\n   */\n\n\n  p.setMasterMute = function (isMuted) {\n    this._updateVolume();\n  };\n\n  p.toString = function () {\n    return \"[HTMLAudioSoundInstance]\";\n  }; //Private Methods\n\n\n  p._removeLooping = function () {\n    if (this._playbackResource == null) {\n      return;\n    }\n\n    this._playbackResource.loop = false;\n\n    this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._loopHandler, false);\n  };\n\n  p._addLooping = function () {\n    if (this._playbackResource == null || this._audioSpriteStopTime) {\n      return;\n    }\n\n    this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._loopHandler, false);\n\n    this._playbackResource.loop = true;\n  };\n\n  p._handleCleanUp = function () {\n    var tag = this._playbackResource;\n\n    if (tag != null) {\n      tag.pause();\n      tag.loop = false;\n      tag.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_ENDED, this._endedHandler, false);\n      tag.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_READY, this._readyHandler, false);\n      tag.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_STALLED, this._stalledHandler, false);\n      tag.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._loopHandler, false);\n      tag.removeEventListener(createjs.HTMLAudioPlugin._TIME_UPDATE, this._audioSpriteEndHandler, false);\n\n      try {\n        tag.currentTime = this._startTime;\n      } catch (e) {} // Reset Position\n\n\n      createjs.HTMLAudioTagPool.set(this.src, tag);\n      this._playbackResource = null;\n    }\n  };\n\n  p._beginPlaying = function (playProps) {\n    this._playbackResource = createjs.HTMLAudioTagPool.get(this.src);\n    return this.AbstractSoundInstance__beginPlaying(playProps);\n  };\n\n  p._handleSoundReady = function (event) {\n    if (this._playbackResource.readyState !== 4) {\n      var tag = this._playbackResource;\n      tag.addEventListener(createjs.HTMLAudioPlugin._AUDIO_READY, this._readyHandler, false);\n      tag.addEventListener(createjs.HTMLAudioPlugin._AUDIO_STALLED, this._stalledHandler, false);\n      tag.preload = \"auto\"; // This is necessary for Firefox, as it won't ever \"load\" until this is set.\n\n      tag.load();\n      return;\n    }\n\n    this._updateVolume();\n\n    this._playbackResource.currentTime = (this._startTime + this._position) * 0.001;\n\n    if (this._audioSpriteStopTime) {\n      this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._TIME_UPDATE, this._audioSpriteEndHandler, false);\n    } else {\n      this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._AUDIO_ENDED, this._endedHandler, false);\n\n      if (this._loop != 0) {\n        this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._loopHandler, false);\n\n        this._playbackResource.loop = true;\n      }\n    }\n\n    this._playbackResource.play();\n  };\n  /**\n   * Used to handle when a tag is not ready for immediate playback when it is returned from the HTMLAudioTagPool.\n   * @method _handleTagReady\n   * @param event\n   * @protected\n   */\n\n\n  p._handleTagReady = function (event) {\n    this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_READY, this._readyHandler, false);\n\n    this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_STALLED, this._stalledHandler, false);\n\n    this._handleSoundReady();\n  };\n\n  p._pause = function () {\n    this._playbackResource.pause();\n  };\n\n  p._resume = function () {\n    this._playbackResource.play();\n  };\n\n  p._updateVolume = function () {\n    if (this._playbackResource != null) {\n      var newVolume = this._muted || createjs.Sound._masterMute ? 0 : this._volume * createjs.Sound._masterVolume;\n\n      if (newVolume != this._playbackResource.volume) {\n        this._playbackResource.volume = newVolume;\n      }\n    }\n  };\n\n  p._calculateCurrentPosition = function () {\n    return this._playbackResource.currentTime * 1000 - this._startTime;\n  };\n\n  p._updatePosition = function () {\n    this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._loopHandler, false);\n\n    this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._handleSetPositionSeek, false);\n\n    try {\n      this._playbackResource.currentTime = (this._position + this._startTime) * 0.001;\n    } catch (error) {\n      // Out of range\n      this._handleSetPositionSeek(null);\n    }\n  };\n  /**\n   * Used to enable setting position, as we need to wait for that seek to be done before we add back our loop handling seek listener\n   * @method _handleSetPositionSeek\n   * @param event\n   * @protected\n   */\n\n\n  p._handleSetPositionSeek = function (event) {\n    if (this._playbackResource == null) {\n      return;\n    }\n\n    this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._handleSetPositionSeek, false);\n\n    this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._loopHandler, false);\n  };\n  /**\n   * Timer used to loop audio sprites.\n   * NOTE because of the inaccuracies in the timeupdate event (15 - 250ms) and in setting the tag to the desired timed\n   * (up to 300ms), it is strongly recommended not to loop audio sprites with HTML Audio if smooth looping is desired\n   *\n   * @method _handleAudioSpriteLoop\n   * @param event\n   * @private\n   */\n\n\n  p._handleAudioSpriteLoop = function (event) {\n    if (this._playbackResource.currentTime <= this._audioSpriteStopTime) {\n      return;\n    }\n\n    this._playbackResource.pause();\n\n    if (this._loop == 0) {\n      this._handleSoundComplete(null);\n    } else {\n      this._position = 0;\n      this._loop--;\n      this._playbackResource.currentTime = this._startTime * 0.001;\n\n      if (!this._paused) {\n        this._playbackResource.play();\n      }\n\n      this._sendEvent(\"loop\");\n    }\n  }; // NOTE with this approach audio will loop as reliably as the browser allows\n  // but we could end up sending the loop event after next loop playback begins\n\n\n  p._handleLoop = function (event) {\n    if (this._loop == 0) {\n      this._playbackResource.loop = false;\n\n      this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._loopHandler, false);\n    }\n  };\n\n  p._updateStartTime = function () {\n    this._audioSpriteStopTime = (this._startTime + this._duration) * 0.001;\n\n    if (this.playState == createjs.Sound.PLAY_SUCCEEDED) {\n      this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_ENDED, this._endedHandler, false);\n\n      this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._TIME_UPDATE, this._audioSpriteEndHandler, false);\n    }\n  };\n\n  p._updateDuration = function () {\n    this._audioSpriteStopTime = (this._startTime + this._duration) * 0.001;\n\n    if (this.playState == createjs.Sound.PLAY_SUCCEEDED) {\n      this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_ENDED, this._endedHandler, false);\n\n      this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._TIME_UPDATE, this._audioSpriteEndHandler, false);\n    }\n  };\n\n  p._setDurationFromSource = function () {\n    this._duration = createjs.HTMLAudioTagPool.getDuration(this.src);\n    this._playbackResource = null;\n  };\n\n  createjs.HTMLAudioSoundInstance = createjs.promote(HTMLAudioSoundInstance, \"AbstractSoundInstance\");\n})(); //##############################################################################\n// HTMLAudioPlugin.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\";\n  /**\n   * Play sounds using HTML &lt;audio&gt; tags in the browser. This plugin is the second priority plugin installed\n   * by default, after the {{#crossLink \"WebAudioPlugin\"}}{{/crossLink}}.  For older browsers that do not support html\n   * audio, include and install the {{#crossLink \"FlashAudioPlugin\"}}{{/crossLink}}.\n   *\n   * <h4>Known Browser and OS issues for HTML Audio</h4>\n   * <b>All browsers</b><br />\n   * Testing has shown in all browsers there is a limit to how many audio tag instances you are allowed.  If you exceed\n   * this limit, you can expect to see unpredictable results. Please use {{#crossLink \"Sound.MAX_INSTANCES\"}}{{/crossLink}} as\n   * a guide to how many total audio tags you can safely use in all browsers.  This issue is primarily limited to IE9.\n   *\n      * <b>IE html limitations</b><br />\n      * <ul><li>There is a delay in applying volume changes to tags that occurs once playback is started. So if you have\n      * muted all sounds, they will all play during this delay until the mute applies internally. This happens regardless of\n      * when or how you apply the volume change, as the tag seems to need to play to apply it.</li>\n      * <li>MP3 encoding will not always work for audio tags if it's not default.  We've found default encoding with\n      * 64kbps works.</li>\n   * <li>Occasionally very short samples will get cut off.</li>\n   * <li>There is a limit to how many audio tags you can load or play at once, which appears to be determined by\n   * hardware and browser settings.  See {{#crossLink \"HTMLAudioPlugin.MAX_INSTANCES\"}}{{/crossLink}} for a safe estimate.\n   * Note that audio sprites can be used as a solution to this issue.</li></ul>\n   *\n   * <b>Safari limitations</b><br />\n   * <ul><li>Safari requires Quicktime to be installed for audio playback.</li></ul>\n   *\n   * <b>iOS 6 limitations</b><br />\n   * <ul><li>can only have one &lt;audio&gt; tag</li>\n   * \t\t<li>can not preload or autoplay the audio</li>\n   * \t\t<li>can not cache the audio</li>\n   * \t\t<li>can not play the audio except inside a user initiated event.</li>\n   *\t\t<li>Note it is recommended to use {{#crossLink \"WebAudioPlugin\"}}{{/crossLink}} for iOS (6+)</li>\n   * \t\t<li>audio sprites can be used to mitigate some of these issues and are strongly recommended on iOS</li>\n   * </ul>\n   *\n   * <b>Android Native Browser limitations</b><br />\n   * <ul><li>We have no control over audio volume. Only the user can set volume on their device.</li>\n   *      <li>We can only play audio inside a user event (touch/click).  This currently means you cannot loop sound or use a delay.</li></ul>\n   * <b> Android Chrome 26.0.1410.58 specific limitations</b><br />\n   * <ul> <li>Can only play 1 sound at a time.</li>\n   *      <li>Sound is not cached.</li>\n   *      <li>Sound can only be loaded in a user initiated touch/click event.</li>\n   *      <li>There is a delay before a sound is played, presumably while the src is loaded.</li>\n   * </ul>\n   *\n   * See {{#crossLink \"Sound\"}}{{/crossLink}} for general notes on known issues.\n   *\n   * @class HTMLAudioPlugin\n   * @extends AbstractPlugin\n   * @constructor\n   */\n\n  function HTMLAudioPlugin() {\n    this.AbstractPlugin_constructor(); // Public Properties\n\n    /**\n     * This is no longer needed as we are now using object pooling for tags.\n     *\n     * <b>NOTE this property only exists as a limitation of HTML audio.</b>\n     * @property defaultNumChannels\n     * @type {Number}\n     * @default 2\n     * @since 0.4.0\n     * @deprecated\n     */\n\n    this.defaultNumChannels = 2;\n    this._capabilities = s._capabilities;\n    this._loaderClass = createjs.SoundLoader;\n    this._soundInstanceClass = createjs.HTMLAudioSoundInstance;\n  }\n\n  var p = createjs.extend(HTMLAudioPlugin, createjs.AbstractPlugin);\n  var s = HTMLAudioPlugin; // TODO: deprecated\n  // p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n  // Static Properties\n\n  /**\n   * The maximum number of instances that can be loaded or played. This is a browser limitation, primarily limited to IE9.\n   * The actual number varies from browser to browser (and is largely hardware dependant), but this is a safe estimate.\n   * Audio sprites work around this limitation.\n   * @property MAX_INSTANCES\n   * @type {Number}\n   * @default 30\n   * @static\n   */\n\n  s.MAX_INSTANCES = 30;\n  /**\n   * Event constant for the \"canPlayThrough\" event for cleaner code.\n   * @property _AUDIO_READY\n   * @type {String}\n   * @default canplaythrough\n   * @static\n   * @protected\n   */\n\n  s._AUDIO_READY = \"canplaythrough\";\n  /**\n   * Event constant for the \"ended\" event for cleaner code.\n   * @property _AUDIO_ENDED\n   * @type {String}\n   * @default ended\n   * @static\n   * @protected\n   */\n\n  s._AUDIO_ENDED = \"ended\";\n  /**\n   * Event constant for the \"seeked\" event for cleaner code.  We utilize this event for maintaining loop events.\n   * @property _AUDIO_SEEKED\n   * @type {String}\n   * @default seeked\n   * @static\n   * @protected\n   */\n\n  s._AUDIO_SEEKED = \"seeked\";\n  /**\n   * Event constant for the \"stalled\" event for cleaner code.\n   * @property _AUDIO_STALLED\n   * @type {String}\n   * @default stalled\n   * @static\n   * @protected\n   */\n\n  s._AUDIO_STALLED = \"stalled\";\n  /**\n   * Event constant for the \"timeupdate\" event for cleaner code.  Utilized for looping audio sprites.\n   * This event callsback ever 15 to 250ms and can be dropped by the browser for performance.\n   * @property _TIME_UPDATE\n   * @type {String}\n   * @default timeupdate\n   * @static\n   * @protected\n   */\n\n  s._TIME_UPDATE = \"timeupdate\";\n  /**\n   * The capabilities of the plugin. This is generated via the {{#crossLink \"HTMLAudioPlugin/_generateCapabilities\"}}{{/crossLink}}\n   * method. Please see the Sound {{#crossLink \"Sound/getCapabilities\"}}{{/crossLink}} method for an overview of all\n   * of the available properties.\n   * @property _capabilities\n   * @type {Object}\n   * @protected\n   * @static\n   */\n\n  s._capabilities = null; // Static Methods\n\n  /**\n   * Determine if the plugin can be used in the current browser/OS. Note that HTML audio is available in most modern\n   * browsers, but is disabled in iOS because of its limitations.\n   * @method isSupported\n   * @return {Boolean} If the plugin can be initialized.\n   * @static\n   */\n\n  s.isSupported = function () {\n    s._generateCapabilities();\n\n    return s._capabilities != null;\n  };\n  /**\n   * Determine the capabilities of the plugin. Used internally. Please see the Sound API {{#crossLink \"Sound/getCapabilities\"}}{{/crossLink}}\n   * method for an overview of plugin capabilities.\n   * @method _generateCapabilities\n   * @static\n   * @protected\n   */\n\n\n  s._generateCapabilities = function () {\n    if (s._capabilities != null) {\n      return;\n    }\n\n    var t = document.createElement(\"audio\");\n\n    if (t.canPlayType == null) {\n      return null;\n    }\n\n    s._capabilities = {\n      panning: false,\n      volume: true,\n      tracks: -1\n    }; // determine which extensions our browser supports for this plugin by iterating through Sound.SUPPORTED_EXTENSIONS\n\n    var supportedExtensions = createjs.Sound.SUPPORTED_EXTENSIONS;\n    var extensionMap = createjs.Sound.EXTENSION_MAP;\n\n    for (var i = 0, l = supportedExtensions.length; i < l; i++) {\n      var ext = supportedExtensions[i];\n      var playType = extensionMap[ext] || ext;\n      s._capabilities[ext] = t.canPlayType(\"audio/\" + ext) != \"no\" && t.canPlayType(\"audio/\" + ext) != \"\" || t.canPlayType(\"audio/\" + playType) != \"no\" && t.canPlayType(\"audio/\" + playType) != \"\";\n    } // OJR another way to do this might be canPlayType:\"m4a\", codex: mp4\n\n  }; // public methods\n\n\n  p.register = function (loadItem) {\n    var tag = createjs.HTMLAudioTagPool.get(loadItem.src);\n    var loader = this.AbstractPlugin_register(loadItem);\n    loader.setTag(tag);\n    return loader;\n  };\n\n  p.removeSound = function (src) {\n    this.AbstractPlugin_removeSound(src);\n    createjs.HTMLAudioTagPool.remove(src);\n  };\n\n  p.create = function (src, startTime, duration) {\n    var si = this.AbstractPlugin_create(src, startTime, duration);\n    si.setPlaybackResource(null);\n    return si;\n  };\n\n  p.toString = function () {\n    return \"[HTMLAudioPlugin]\";\n  }; // plugin does not support these\n\n\n  p.setVolume = p.getVolume = p.setMute = null;\n  createjs.HTMLAudioPlugin = createjs.promote(HTMLAudioPlugin, \"AbstractPlugin\");\n})(); //##############################################################################\n// Tween.js\n//##############################################################################\n// TODO: possibly add a END actionsMode (only runs actions that == position)?\n// TODO: evaluate a way to decouple paused from tick registration.\n\n\n(function () {\n  \"use strict\"; // constructor\n\n  /**\n   * A Tween instance tweens properties for a single target. Instance methods can be chained for easy construction and sequencing:\n   *\n   * <h4>Example</h4>\n   *\n   *      target.alpha = 1;\n   *\t    createjs.Tween.get(target)\n   *\t         .wait(500)\n   *\t         .to({alpha:0, visible:false}, 1000)\n   *\t         .call(handleComplete);\n   *\t    function handleComplete() {\n   *\t    \t//Tween complete\n   *\t    }\n   *\n   * Multiple tweens can point to the same instance, however if they affect the same properties there could be unexpected\n   * behaviour. To stop all tweens on an object, use {{#crossLink \"Tween/removeTweens\"}}{{/crossLink}} or pass `override:true`\n   * in the props argument.\n   *\n   *      createjs.Tween.get(target, {override:true}).to({x:100});\n   *\n   * Subscribe to the {{#crossLink \"Tween/change:event\"}}{{/crossLink}} event to get notified when a property of the\n   * target is changed.\n   *\n   *      createjs.Tween.get(target, {override:true}).to({x:100}).addEventListener(\"change\", handleChange);\n   *      function handleChange(event) {\n   *          // The tween changed.\n   *      }\n   *\n   * See the Tween {{#crossLink \"Tween/get\"}}{{/crossLink}} method for additional param documentation.\n   * @class Tween\n   * @param {Object} target The target object that will have its properties tweened.\n   * @param {Object} [props] The configuration properties to apply to this tween instance (ex. `{loop:true, paused:true}`.\n   * All properties default to false. Supported props are:<UL>\n   *    <LI> loop: sets the loop property on this tween.</LI>\n   *    <LI> useTicks: uses ticks for all durations instead of milliseconds.</LI>\n   *    <LI> ignoreGlobalPause: sets the {{#crossLink \"Tween/ignoreGlobalPause:property\"}}{{/crossLink}} property on this tween.</LI>\n   *    <LI> override: if true, `Tween.removeTweens(target)` will be called to remove any other tweens with the same target.\n   *    <LI> paused: indicates whether to start the tween paused.</LI>\n   *    <LI> position: indicates the initial position for this tween.</LI>\n   *    <LI> onChange: specifies a listener for the \"change\" event.</LI>\n   * </UL>\n   * @param {Object} [pluginData] An object containing data for use by installed plugins. See individual\n   * plugins' documentation for details.\n   * @extends EventDispatcher\n   * @constructor\n   */\n\n  function Tween(target, props, pluginData) {\n    // public properties:\n\n    /**\n     * Causes this tween to continue playing when a global pause is active. For example, if TweenJS is using {{#crossLink \"Ticker\"}}{{/crossLink}},\n     * then setting this to true (the default) will cause this tween to be paused when <code>Ticker.setPaused(true)</code>\n     * is called. See the Tween {{#crossLink \"Tween/tick\"}}{{/crossLink}} method for more info. Can be set via the props\n     * parameter.\n     * @property ignoreGlobalPause\n     * @type Boolean\n     * @default false\n     */\n    this.ignoreGlobalPause = false;\n    /**\n     * If true, the tween will loop when it reaches the end. Can be set via the props param.\n     * @property loop\n     * @type {Boolean}\n     * @default false\n     */\n\n    this.loop = false;\n    /**\n     * Specifies the total duration of this tween in milliseconds (or ticks if useTicks is true).\n     * This value is automatically updated as you modify the tween. Changing it directly could result in unexpected\n     * behaviour.\n     * @property duration\n     * @type {Number}\n     * @default 0\n     * @readonly\n     */\n\n    this.duration = 0;\n    /**\n     * Allows you to specify data that will be used by installed plugins. Each plugin uses this differently, but in general\n     * you specify data by setting it to a property of pluginData with the same name as the plugin class.\n     * @example\n     *\tmyTween.pluginData.PluginClassName = data;\n     * <br/>\n     * Also, most plugins support a property to enable or disable them. This is typically the plugin class name followed by \"_enabled\".<br/>\n     * @example\n     *\tmyTween.pluginData.PluginClassName_enabled = false;<br/>\n     * <br/>\n     * Some plugins also store instance data in this object, usually in a property named _PluginClassName.\n     * See the documentation for individual plugins for more details.\n     * @property pluginData\n     * @type {Object}\n     */\n\n    this.pluginData = pluginData || {};\n    /**\n     * The target of this tween. This is the object on which the tweened properties will be changed. Changing\n     * this property after the tween is created will not have any effect.\n     * @property target\n     * @type {Object}\n     * @readonly\n     */\n\n    this.target = target;\n    /**\n     * The current normalized position of the tween. This will always be a value between 0 and duration.\n     * Changing this property directly will have no effect.\n     * @property position\n     * @type {Object}\n     * @readonly\n     */\n\n    this.position = null;\n    /**\n     * Indicates the tween's current position is within a passive wait.\n     * @property passive\n     * @type {Boolean}\n     * @default false\n     * @readonly\n     **/\n\n    this.passive = false; // private properties:\t\n\n    /**\n     * @property _paused\n     * @type {Boolean}\n     * @default false\n     * @protected\n     */\n\n    this._paused = false;\n    /**\n     * @property _curQueueProps\n     * @type {Object}\n     * @protected\n     */\n\n    this._curQueueProps = {};\n    /**\n     * @property _initQueueProps\n     * @type {Object}\n     * @protected\n     */\n\n    this._initQueueProps = {};\n    /**\n     * @property _steps\n     * @type {Array}\n     * @protected\n     */\n\n    this._steps = [];\n    /**\n     * @property _actions\n     * @type {Array}\n     * @protected\n     */\n\n    this._actions = [];\n    /**\n     * Raw position.\n     * @property _prevPosition\n     * @type {Number}\n     * @default 0\n     * @protected\n     */\n\n    this._prevPosition = 0;\n    /**\n     * The position within the current step.\n     * @property _stepPosition\n     * @type {Number}\n     * @default 0\n     * @protected\n     */\n\n    this._stepPosition = 0; // this is needed by MovieClip.\n\n    /**\n     * Normalized position.\n     * @property _prevPos\n     * @type {Number}\n     * @default -1\n     * @protected\n     */\n\n    this._prevPos = -1;\n    /**\n     * @property _target\n     * @type {Object}\n     * @protected\n     */\n\n    this._target = target;\n    /**\n     * @property _useTicks\n     * @type {Boolean}\n     * @default false\n     * @protected\n     */\n\n    this._useTicks = false;\n    /**\n     * @property _inited\n     * @type {boolean}\n     * @default false\n     * @protected\n     */\n\n    this._inited = false;\n    /**\n     * Indicates whether the tween is currently registered with Tween.\n     * @property _registered\n     * @type {boolean}\n     * @default false\n     * @protected\n     */\n\n    this._registered = false;\n\n    if (props) {\n      this._useTicks = props.useTicks;\n      this.ignoreGlobalPause = props.ignoreGlobalPause;\n      this.loop = props.loop;\n      props.onChange && this.addEventListener(\"change\", props.onChange);\n\n      if (props.override) {\n        Tween.removeTweens(target);\n      }\n    }\n\n    if (props && props.paused) {\n      this._paused = true;\n    } else {\n      createjs.Tween._register(this, true);\n    }\n\n    if (props && props.position != null) {\n      this.setPosition(props.position, Tween.NONE);\n    }\n  }\n\n  ;\n  var p = createjs.extend(Tween, createjs.EventDispatcher); // TODO: deprecated\n  // p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n  // static properties\n\n  /**\n   * Constant defining the none actionsMode for use with setPosition.\n   * @property NONE\n   * @type Number\n   * @default 0\n   * @static\n   */\n\n  Tween.NONE = 0;\n  /**\n   * Constant defining the loop actionsMode for use with setPosition.\n   * @property LOOP\n   * @type Number\n   * @default 1\n   * @static\n   */\n\n  Tween.LOOP = 1;\n  /**\n   * Constant defining the reverse actionsMode for use with setPosition.\n   * @property REVERSE\n   * @type Number\n   * @default 2\n   * @static\n   */\n\n  Tween.REVERSE = 2;\n  /**\n   * Constant returned by plugins to tell the tween not to use default assignment.\n   * @property IGNORE\n   * @type Object\n   * @static\n   */\n\n  Tween.IGNORE = {};\n  /**\n   * @property _listeners\n   * @type Array[Tween]\n   * @static\n   * @protected\n   */\n\n  Tween._tweens = [];\n  /**\n   * @property _plugins\n   * @type Object\n   * @static\n   * @protected\n   */\n\n  Tween._plugins = {}; // static methods\t\n\n  /**\n   * Returns a new tween instance. This is functionally identical to using \"new Tween(...)\", but looks cleaner\n   * with the chained syntax of TweenJS.\n   * <h4>Example</h4>\n   *\n   *\t\tvar tween = createjs.Tween.get(target);\n   *\n   * @method get\n   * @param {Object} target The target object that will have its properties tweened.\n   * @param {Object} [props] The configuration properties to apply to this tween instance (ex. `{loop:true, paused:true}`).\n   * All properties default to `false`. Supported props are:\n   * <UL>\n   *    <LI> loop: sets the loop property on this tween.</LI>\n   *    <LI> useTicks: uses ticks for all durations instead of milliseconds.</LI>\n   *    <LI> ignoreGlobalPause: sets the {{#crossLink \"Tween/ignoreGlobalPause:property\"}}{{/crossLink}} property on\n   *    this tween.</LI>\n   *    <LI> override: if true, `createjs.Tween.removeTweens(target)` will be called to remove any other tweens with\n   *    the same target.\n   *    <LI> paused: indicates whether to start the tween paused.</LI>\n   *    <LI> position: indicates the initial position for this tween.</LI>\n   *    <LI> onChange: specifies a listener for the {{#crossLink \"Tween/change:event\"}}{{/crossLink}} event.</LI>\n   * </UL>\n   * @param {Object} [pluginData] An object containing data for use by installed plugins. See individual plugins'\n   * documentation for details.\n   * @param {Boolean} [override=false] If true, any previous tweens on the same target will be removed. This is the\n   * same as calling `Tween.removeTweens(target)`.\n   * @return {Tween} A reference to the created tween. Additional chained tweens, method calls, or callbacks can be\n   * applied to the returned tween instance.\n   * @static\n   */\n\n  Tween.get = function (target, props, pluginData, override) {\n    if (override) {\n      Tween.removeTweens(target);\n    }\n\n    return new Tween(target, props, pluginData);\n  };\n  /**\n   * Advances all tweens. This typically uses the {{#crossLink \"Ticker\"}}{{/crossLink}} class, but you can call it\n   * manually if you prefer to use your own \"heartbeat\" implementation.\n   * @method tick\n   * @param {Number} delta The change in time in milliseconds since the last tick. Required unless all tweens have\n   * `useTicks` set to true.\n   * @param {Boolean} paused Indicates whether a global pause is in effect. Tweens with {{#crossLink \"Tween/ignoreGlobalPause:property\"}}{{/crossLink}}\n   * will ignore this, but all others will pause if this is `true`.\n   * @static\n   */\n\n\n  Tween.tick = function (delta, paused) {\n    var tweens = Tween._tweens.slice(); // to avoid race conditions.\n\n\n    for (var i = tweens.length - 1; i >= 0; i--) {\n      var tween = tweens[i];\n\n      if (paused && !tween.ignoreGlobalPause || tween._paused) {\n        continue;\n      }\n\n      tween.tick(tween._useTicks ? 1 : delta);\n    }\n  };\n  /**\n   * Handle events that result from Tween being used as an event handler. This is included to allow Tween to handle\n   * {{#crossLink \"Ticker/tick:event\"}}{{/crossLink}} events from the createjs {{#crossLink \"Ticker\"}}{{/crossLink}}.\n   * No other events are handled in Tween.\n   * @method handleEvent\n   * @param {Object} event An event object passed in by the {{#crossLink \"EventDispatcher\"}}{{/crossLink}}. Will\n   * usually be of type \"tick\".\n   * @private\n   * @static\n   * @since 0.4.2\n   */\n\n\n  Tween.handleEvent = function (event) {\n    if (event.type == \"tick\") {\n      this.tick(event.delta, event.paused);\n    }\n  };\n  /**\n   * Removes all existing tweens for a target. This is called automatically by new tweens if the `override`\n   * property is `true`.\n   * @method removeTweens\n   * @param {Object} target The target object to remove existing tweens from.\n   * @static\n   */\n\n\n  Tween.removeTweens = function (target) {\n    if (!target.tweenjs_count) {\n      return;\n    }\n\n    var tweens = Tween._tweens;\n\n    for (var i = tweens.length - 1; i >= 0; i--) {\n      var tween = tweens[i];\n\n      if (tween._target == target) {\n        tween._paused = true;\n        tweens.splice(i, 1);\n      }\n    }\n\n    target.tweenjs_count = 0;\n  };\n  /**\n   * Stop and remove all existing tweens.\n   * @method removeAllTweens\n   * @static\n   * @since 0.4.1\n   */\n\n\n  Tween.removeAllTweens = function () {\n    var tweens = Tween._tweens;\n\n    for (var i = 0, l = tweens.length; i < l; i++) {\n      var tween = tweens[i];\n      tween._paused = true;\n      tween.target && (tween.target.tweenjs_count = 0);\n    }\n\n    tweens.length = 0;\n  };\n  /**\n   * Indicates whether there are any active tweens (and how many) on the target object (if specified) or in general.\n   * @method hasActiveTweens\n   * @param {Object} [target] The target to check for active tweens. If not specified, the return value will indicate\n   * if there are any active tweens on any target.\n   * @return {Boolean} If there are active tweens.\n   * @static\n   */\n\n\n  Tween.hasActiveTweens = function (target) {\n    if (target) {\n      return target.tweenjs_count != null && !!target.tweenjs_count;\n    }\n\n    return Tween._tweens && !!Tween._tweens.length;\n  };\n  /**\n   * Installs a plugin, which can modify how certain properties are handled when tweened. See the {{#crossLink \"CSSPlugin\"}}{{/crossLink}}\n   * for an example of how to write TweenJS plugins.\n   * @method installPlugin\n   * @static\n   * @param {Object} plugin The plugin class to install\n   * @param {Array} properties An array of properties that the plugin will handle.\n   */\n\n\n  Tween.installPlugin = function (plugin, properties) {\n    var priority = plugin.priority;\n\n    if (priority == null) {\n      plugin.priority = priority = 0;\n    }\n\n    for (var i = 0, l = properties.length, p = Tween._plugins; i < l; i++) {\n      var n = properties[i];\n\n      if (!p[n]) {\n        p[n] = [plugin];\n      } else {\n        var arr = p[n];\n\n        for (var j = 0, jl = arr.length; j < jl; j++) {\n          if (priority < arr[j].priority) {\n            break;\n          }\n        }\n\n        p[n].splice(j, 0, plugin);\n      }\n    }\n  };\n  /**\n   * Registers or unregisters a tween with the ticking system.\n   * @method _register\n   * @param {Tween} tween The tween instance to register or unregister.\n   * @param {Boolean} value If `true`, the tween is registered. If `false` the tween is unregistered.\n   * @static\n   * @protected\n   */\n\n\n  Tween._register = function (tween, value) {\n    var target = tween._target;\n    var tweens = Tween._tweens;\n\n    if (value && !tween._registered) {\n      // TODO: this approach might fail if a dev is using sealed objects in ES5\n      if (target) {\n        target.tweenjs_count = target.tweenjs_count ? target.tweenjs_count + 1 : 1;\n      }\n\n      tweens.push(tween);\n\n      if (!Tween._inited && createjs.Ticker) {\n        createjs.Ticker.addEventListener(\"tick\", Tween);\n        Tween._inited = true;\n      }\n    } else if (!value && tween._registered) {\n      if (target) {\n        target.tweenjs_count--;\n      }\n\n      var i = tweens.length;\n\n      while (i--) {\n        if (tweens[i] == tween) {\n          tweens.splice(i, 1);\n          break;\n        }\n      }\n    }\n\n    tween._registered = value;\n  }; // events:\n\n  /**\n   * Called whenever the tween's position changes.\n   * @event change\n   * @since 0.4.0\n   **/\n  // public methods:\n\n  /**\n   * Queues a wait (essentially an empty tween).\n   * <h4>Example</h4>\n   *\n   *\t\t//This tween will wait 1s before alpha is faded to 0.\n   *\t\tcreatejs.Tween.get(target).wait(1000).to({alpha:0}, 1000);\n   *\n   * @method wait\n   * @param {Number} duration The duration of the wait in milliseconds (or in ticks if `useTicks` is true).\n   * @param {Boolean} [passive] Tween properties will not be updated during a passive wait. This\n   * is mostly useful for use with {{#crossLink \"Timeline\"}}{{/crossLink}} instances that contain multiple tweens\n   * affecting the same target at different times.\n   * @return {Tween} This tween instance (for chaining calls).\n   **/\n\n\n  p.wait = function (duration, passive) {\n    if (duration == null || duration <= 0) {\n      return this;\n    }\n\n    var o = this._cloneProps(this._curQueueProps);\n\n    return this._addStep({\n      d: duration,\n      p0: o,\n      e: this._linearEase,\n      p1: o,\n      v: passive\n    });\n  };\n  /**\n   * Queues a tween from the current values to the target properties. Set duration to 0 to jump to these value.\n   * Numeric properties will be tweened from their current value in the tween to the target value. Non-numeric\n   * properties will be set at the end of the specified duration.\n   * <h4>Example</h4>\n   *\n   *\t\tcreatejs.Tween.get(target).to({alpha:0}, 1000);\n   *\n   * @method to\n   * @param {Object} props An object specifying property target values for this tween (Ex. `{x:300}` would tween the x\n   * property of the target to 300).\n   * @param {Number} [duration=0] The duration of the wait in milliseconds (or in ticks if `useTicks` is true).\n   * @param {Function} [ease=\"linear\"] The easing function to use for this tween. See the {{#crossLink \"Ease\"}}{{/crossLink}}\n   * class for a list of built-in ease functions.\n   * @return {Tween} This tween instance (for chaining calls).\n   */\n\n\n  p.to = function (props, duration, ease) {\n    if (isNaN(duration) || duration < 0) {\n      duration = 0;\n    }\n\n    return this._addStep({\n      d: duration || 0,\n      p0: this._cloneProps(this._curQueueProps),\n      e: ease,\n      p1: this._cloneProps(this._appendQueueProps(props))\n    });\n  };\n  /**\n   * Queues an action to call the specified function.\n   * <h4>Example</h4>\n   *\n   *   \t//would call myFunction() after 1 second.\n   *   \tmyTween.wait(1000).call(myFunction);\n   *\n   * @method call\n   * @param {Function} callback The function to call.\n   * @param {Array} [params]. The parameters to call the function with. If this is omitted, then the function\n   *      will be called with a single param pointing to this tween.\n   * @param {Object} [scope]. The scope to call the function in. If omitted, it will be called in the target's\n   *      scope.\n   * @return {Tween} This tween instance (for chaining calls).\n   */\n\n\n  p.call = function (callback, params, scope) {\n    return this._addAction({\n      f: callback,\n      p: params ? params : [this],\n      o: scope ? scope : this._target\n    });\n  }; // TODO: add clarification between this and a 0 duration .to:\n\n  /**\n   * Queues an action to set the specified props on the specified target. If target is null, it will use this tween's\n   * target.\n   * <h4>Example</h4>\n   *\n   *\t\tmyTween.wait(1000).set({visible:false},foo);\n   *\n   * @method set\n   * @param {Object} props The properties to set (ex. `{visible:false}`).\n   * @param {Object} [target] The target to set the properties on. If omitted, they will be set on the tween's target.\n   * @return {Tween} This tween instance (for chaining calls).\n   */\n\n\n  p.set = function (props, target) {\n    return this._addAction({\n      f: this._set,\n      o: this,\n      p: [props, target ? target : this._target]\n    });\n  };\n  /**\n   * Queues an action to play (unpause) the specified tween. This enables you to sequence multiple tweens.\n   * <h4>Example</h4>\n   *\n   *\t\tmyTween.to({x:100},500).play(otherTween);\n   *\n   * @method play\n   * @param {Tween} tween The tween to play.\n   * @return {Tween} This tween instance (for chaining calls).\n   */\n\n\n  p.play = function (tween) {\n    if (!tween) {\n      tween = this;\n    }\n\n    return this.call(tween.setPaused, [false], tween);\n  };\n  /**\n   * Queues an action to pause the specified tween.\n   * @method pause\n   * @param {Tween} tween The tween to pause. If null, it pauses this tween.\n   * @return {Tween} This tween instance (for chaining calls)\n   */\n\n\n  p.pause = function (tween) {\n    if (!tween) {\n      tween = this;\n    }\n\n    return this.call(tween.setPaused, [true], tween);\n  };\n  /**\n   * Advances the tween to a specified position.\n   * @method setPosition\n   * @param {Number} value The position to seek to in milliseconds (or ticks if useTicks is true).\n   * @param {Number} [actionsMode=1] Specifies how actions are handled (ie. call, set, play, pause):\n   * <ul>\n   *      <li>{{#crossLink \"Tween/NONE:property\"}}{{/crossLink}} (0) - run no actions.</li>\n   *      <li>{{#crossLink \"Tween/LOOP:property\"}}{{/crossLink}} (1) - if new position is less than old, then run all\n   *      actions between old and duration, then all actions between 0 and new.</li>\n   *      <li>{{#crossLink \"Tween/REVERSE:property\"}}{{/crossLink}} (2) - if new position is less than old, run all\n   *      actions between them in reverse.</li>\n   * </ul>\n   * @return {Boolean} Returns `true` if the tween is complete (ie. the full tween has run & {{#crossLink \"Tween/loop:property\"}}{{/crossLink}}\n   * is `false`).\n   */\n\n\n  p.setPosition = function (value, actionsMode) {\n    if (value < 0) {\n      value = 0;\n    }\n\n    if (actionsMode == null) {\n      actionsMode = 1;\n    } // normalize position:\n\n\n    var t = value;\n    var end = false;\n\n    if (t >= this.duration) {\n      if (this.loop) {\n        t = t % this.duration;\n      } else {\n        t = this.duration;\n        end = true;\n      }\n    }\n\n    if (t == this._prevPos) {\n      return end;\n    }\n\n    var prevPos = this._prevPos;\n    this.position = this._prevPos = t; // set this in advance in case an action modifies position.\n\n    this._prevPosition = value; // handle tweens:\n\n    if (this._target) {\n      if (end) {\n        // addresses problems with an ending zero length step.\n        this._updateTargetProps(null, 1);\n      } else if (this._steps.length > 0) {\n        // find our new tween index:\n        for (var i = 0, l = this._steps.length; i < l; i++) {\n          if (this._steps[i].t > t) {\n            break;\n          }\n        }\n\n        var step = this._steps[i - 1];\n\n        this._updateTargetProps(step, (this._stepPosition = t - step.t) / step.d);\n      }\n    } // run actions:\n\n\n    if (actionsMode != 0 && this._actions.length > 0) {\n      if (this._useTicks) {\n        // only run the actions we landed on.\n        this._runActions(t, t);\n      } else if (actionsMode == 1 && t < prevPos) {\n        if (prevPos != this.duration) {\n          this._runActions(prevPos, this.duration);\n        }\n\n        this._runActions(0, t, true);\n      } else {\n        this._runActions(prevPos, t);\n      }\n    }\n\n    if (end) {\n      this.setPaused(true);\n    }\n\n    this.dispatchEvent(\"change\");\n    return end;\n  };\n  /**\n   * Advances this tween by the specified amount of time in milliseconds (or ticks if`useTicks` is `true`).\n   * This is normally called automatically by the Tween engine (via {{#crossLink \"Tween/tick\"}}{{/crossLink}}), but is\n   * exposed for advanced uses.\n   * @method tick\n   * @param {Number} delta The time to advance in milliseconds (or ticks if `useTicks` is `true`).\n   */\n\n\n  p.tick = function (delta) {\n    if (this._paused) {\n      return;\n    }\n\n    this.setPosition(this._prevPosition + delta);\n  };\n  /**\n   * Pauses or plays this tween.\n   * @method setPaused\n   * @param {Boolean} [value=true] Indicates whether the tween should be paused (`true`) or played (`false`).\n   * @return {Tween} This tween instance (for chaining calls)\n   */\n\n\n  p.setPaused = function (value) {\n    if (this._paused === !!value) {\n      return this;\n    }\n\n    this._paused = !!value;\n\n    Tween._register(this, !value);\n\n    return this;\n  }; // tiny api (primarily for tool output):\n\n\n  p.w = p.wait;\n  p.t = p.to;\n  p.c = p.call;\n  p.s = p.set;\n  /**\n   * Returns a string representation of this object.\n   * @method toString\n   * @return {String} a string representation of the instance.\n   */\n\n  p.toString = function () {\n    return \"[Tween]\";\n  };\n  /**\n   * @method clone\n   * @protected\n   */\n\n\n  p.clone = function () {\n    throw \"Tween can not be cloned.\";\n  }; // private methods:\n\n  /**\n   * @method _updateTargetProps\n   * @param {Object} step\n   * @param {Number} ratio\n   * @protected\n   */\n\n\n  p._updateTargetProps = function (step, ratio) {\n    var p0, p1, v, v0, v1, arr;\n\n    if (!step && ratio == 1) {\n      // GDS: when does this run? Just at the very end? Shouldn't.\n      this.passive = false;\n      p0 = p1 = this._curQueueProps;\n    } else {\n      this.passive = !!step.v;\n\n      if (this.passive) {\n        return;\n      } // don't update props.\n      // apply ease to ratio.\n\n\n      if (step.e) {\n        ratio = step.e(ratio, 0, 1, 1);\n      }\n\n      p0 = step.p0;\n      p1 = step.p1;\n    }\n\n    for (var n in this._initQueueProps) {\n      if ((v0 = p0[n]) == null) {\n        p0[n] = v0 = this._initQueueProps[n];\n      }\n\n      if ((v1 = p1[n]) == null) {\n        p1[n] = v1 = v0;\n      }\n\n      if (v0 == v1 || ratio == 0 || ratio == 1 || typeof v0 != \"number\") {\n        // no interpolation - either at start, end, values don't change, or the value is non-numeric.\n        v = ratio == 1 ? v1 : v0;\n      } else {\n        v = v0 + (v1 - v0) * ratio;\n      }\n\n      var ignore = false;\n\n      if (arr = Tween._plugins[n]) {\n        for (var i = 0, l = arr.length; i < l; i++) {\n          var v2 = arr[i].tween(this, n, v, p0, p1, ratio, !!step && p0 == p1, !step);\n\n          if (v2 == Tween.IGNORE) {\n            ignore = true;\n          } else {\n            v = v2;\n          }\n        }\n      }\n\n      if (!ignore) {\n        this._target[n] = v;\n      }\n    }\n  };\n  /**\n   * @method _runActions\n   * @param {Number} startPos\n   * @param {Number} endPos\n   * @param {Boolean} includeStart\n   * @protected\n   */\n\n\n  p._runActions = function (startPos, endPos, includeStart) {\n    var sPos = startPos;\n    var ePos = endPos;\n    var i = -1;\n    var j = this._actions.length;\n    var k = 1;\n\n    if (startPos > endPos) {\n      // running backwards, flip everything:\n      sPos = endPos;\n      ePos = startPos;\n      i = j;\n      j = k = -1;\n    }\n\n    while ((i += k) != j) {\n      var action = this._actions[i];\n      var pos = action.t;\n\n      if (pos == ePos || pos > sPos && pos < ePos || includeStart && pos == startPos) {\n        action.f.apply(action.o, action.p);\n      }\n    }\n  };\n  /**\n   * @method _appendQueueProps\n   * @param {Object} o\n   * @protected\n   */\n\n\n  p._appendQueueProps = function (o) {\n    var arr, oldValue, i, l, injectProps;\n\n    for (var n in o) {\n      if (this._initQueueProps[n] === undefined) {\n        oldValue = this._target[n]; // init plugins:\n\n        if (arr = Tween._plugins[n]) {\n          for (i = 0, l = arr.length; i < l; i++) {\n            oldValue = arr[i].init(this, n, oldValue);\n          }\n        }\n\n        this._initQueueProps[n] = this._curQueueProps[n] = oldValue === undefined ? null : oldValue;\n      } else {\n        oldValue = this._curQueueProps[n];\n      }\n    }\n\n    for (var n in o) {\n      oldValue = this._curQueueProps[n];\n\n      if (arr = Tween._plugins[n]) {\n        injectProps = injectProps || {};\n\n        for (i = 0, l = arr.length; i < l; i++) {\n          // TODO: remove the check for .step in the next version. It's here for backwards compatibility.\n          if (arr[i].step) {\n            arr[i].step(this, n, oldValue, o[n], injectProps);\n          }\n        }\n      }\n\n      this._curQueueProps[n] = o[n];\n    }\n\n    if (injectProps) {\n      this._appendQueueProps(injectProps);\n    }\n\n    return this._curQueueProps;\n  };\n  /**\n   * @method _cloneProps\n   * @param {Object} props\n   * @protected\n   */\n\n\n  p._cloneProps = function (props) {\n    var o = {};\n\n    for (var n in props) {\n      o[n] = props[n];\n    }\n\n    return o;\n  };\n  /**\n   * @method _addStep\n   * @param {Object} o\n   * @protected\n   */\n\n\n  p._addStep = function (o) {\n    if (o.d > 0) {\n      this._steps.push(o);\n\n      o.t = this.duration;\n      this.duration += o.d;\n    }\n\n    return this;\n  };\n  /**\n   * @method _addAction\n   * @param {Object} o\n   * @protected\n   */\n\n\n  p._addAction = function (o) {\n    o.t = this.duration;\n\n    this._actions.push(o);\n\n    return this;\n  };\n  /**\n   * @method _set\n   * @param {Object} props\n   * @param {Object} o\n   * @protected\n   */\n\n\n  p._set = function (props, o) {\n    for (var n in props) {\n      o[n] = props[n];\n    }\n  };\n\n  createjs.Tween = createjs.promote(Tween, \"EventDispatcher\");\n})(); //##############################################################################\n// Timeline.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\"; // constructor\t\n\n  /**\n   * The Timeline class synchronizes multiple tweens and allows them to be controlled as a group. Please note that if a\n   * timeline is looping, the tweens on it may appear to loop even if the \"loop\" property of the tween is false.\n   * @class Timeline\n   * @param {Array} tweens An array of Tweens to add to this timeline. See {{#crossLink \"Timeline/addTween\"}}{{/crossLink}}\n   * for more info.\n   * @param {Object} labels An object defining labels for using {{#crossLink \"Timeline/gotoAndPlay\"}}{{/crossLink}}/{{#crossLink \"Timeline/gotoAndStop\"}}{{/crossLink}}.\n   * See {{#crossLink \"Timeline/setLabels\"}}{{/crossLink}}\n   * for details.\n   * @param {Object} props The configuration properties to apply to this tween instance (ex. `{loop:true}`). All properties\n   * default to false. Supported props are:<UL>\n   *    <LI> loop: sets the loop property on this tween.</LI>\n   *    <LI> useTicks: uses ticks for all durations instead of milliseconds.</LI>\n   *    <LI> ignoreGlobalPause: sets the ignoreGlobalPause property on this tween.</LI>\n   *    <LI> paused: indicates whether to start the tween paused.</LI>\n   *    <LI> position: indicates the initial position for this timeline.</LI>\n   *    <LI> onChange: specifies a listener to add for the {{#crossLink \"Timeline/change:event\"}}{{/crossLink}} event.</LI>\n   * </UL>\n   * @extends EventDispatcher\n   * @constructor\n   **/\n\n  function Timeline(tweens, labels, props) {\n    this.EventDispatcher_constructor(); // public properties:\n\n    /**\n     * Causes this timeline to continue playing when a global pause is active.\n     * @property ignoreGlobalPause\n     * @type Boolean\n     **/\n\n    this.ignoreGlobalPause = false;\n    /**\n     * The total duration of this timeline in milliseconds (or ticks if `useTicks `is `true`). This value is usually\n     * automatically updated as you modify the timeline. See {{#crossLink \"Timeline/updateDuration\"}}{{/crossLink}}\n     * for more information.\n     * @property duration\n     * @type Number\n     * @default 0\n     * @readonly\n     **/\n\n    this.duration = 0;\n    /**\n     * If true, the timeline will loop when it reaches the end. Can be set via the props param.\n     * @property loop\n     * @type Boolean\n     **/\n\n    this.loop = false;\n    /**\n     * The current normalized position of the timeline. This will always be a value between 0 and\n     * {{#crossLink \"Timeline/duration:property\"}}{{/crossLink}}.\n     * Changing this property directly will have no effect.\n     * @property position\n     * @type Object\n     * @readonly\n     **/\n\n    this.position = null; // private properties:\n\n    /**\n     * @property _paused\n     * @type Boolean\n     * @protected\n     **/\n\n    this._paused = false;\n    /**\n     * @property _tweens\n     * @type Array[Tween]\n     * @protected\n     **/\n\n    this._tweens = [];\n    /**\n     * @property _labels\n     * @type Object\n     * @protected\n     **/\n\n    this._labels = null;\n    /**\n     * @property _labelList\n     * @type Array[Object]\n     * @protected\n     **/\n\n    this._labelList = null;\n    /**\n     * @property _prevPosition\n     * @type Number\n     * @default 0\n     * @protected\n     **/\n\n    this._prevPosition = 0;\n    /**\n     * @property _prevPos\n     * @type Number\n     * @default -1\n     * @protected\n     **/\n\n    this._prevPos = -1;\n    /**\n     * @property _useTicks\n     * @type Boolean\n     * @default false\n     * @protected\n     **/\n\n    this._useTicks = false;\n    /**\n     * Indicates whether the timeline is currently registered with Tween.\n     * @property _registered\n     * @type {boolean}\n     * @default false\n     * @protected\n     */\n\n    this._registered = false;\n\n    if (props) {\n      this._useTicks = props.useTicks;\n      this.loop = props.loop;\n      this.ignoreGlobalPause = props.ignoreGlobalPause;\n      props.onChange && this.addEventListener(\"change\", props.onChange);\n    }\n\n    if (tweens) {\n      this.addTween.apply(this, tweens);\n    }\n\n    this.setLabels(labels);\n\n    if (props && props.paused) {\n      this._paused = true;\n    } else {\n      createjs.Tween._register(this, true);\n    }\n\n    if (props && props.position != null) {\n      this.setPosition(props.position, createjs.Tween.NONE);\n    }\n  }\n\n  ;\n  var p = createjs.extend(Timeline, createjs.EventDispatcher); // TODO: deprecated\n  // p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n  // events:\n\n  /**\n   * Called whenever the timeline's position changes.\n   * @event change\n   * @since 0.5.0\n   **/\n  // public methods:\n\n  /**\n   * Adds one or more tweens (or timelines) to this timeline. The tweens will be paused (to remove them from the\n   * normal ticking system) and managed by this timeline. Adding a tween to multiple timelines will result in\n   * unexpected behaviour.\n   * @method addTween\n   * @param {Tween} ...tween The tween(s) to add. Accepts multiple arguments.\n   * @return {Tween} The first tween that was passed in.\n   **/\n\n  p.addTween = function (tween) {\n    var l = arguments.length;\n\n    if (l > 1) {\n      for (var i = 0; i < l; i++) {\n        this.addTween(arguments[i]);\n      }\n\n      return arguments[0];\n    } else if (l == 0) {\n      return null;\n    }\n\n    this.removeTween(tween);\n\n    this._tweens.push(tween);\n\n    tween.setPaused(true);\n    tween._paused = false;\n    tween._useTicks = this._useTicks;\n\n    if (tween.duration > this.duration) {\n      this.duration = tween.duration;\n    }\n\n    if (this._prevPos >= 0) {\n      tween.setPosition(this._prevPos, createjs.Tween.NONE);\n    }\n\n    return tween;\n  };\n  /**\n   * Removes one or more tweens from this timeline.\n   * @method removeTween\n   * @param {Tween} ...tween The tween(s) to remove. Accepts multiple arguments.\n   * @return Boolean Returns `true` if all of the tweens were successfully removed.\n   **/\n\n\n  p.removeTween = function (tween) {\n    var l = arguments.length;\n\n    if (l > 1) {\n      var good = true;\n\n      for (var i = 0; i < l; i++) {\n        good = good && this.removeTween(arguments[i]);\n      }\n\n      return good;\n    } else if (l == 0) {\n      return false;\n    }\n\n    var tweens = this._tweens;\n    var i = tweens.length;\n\n    while (i--) {\n      if (tweens[i] == tween) {\n        tweens.splice(i, 1);\n\n        if (tween.duration >= this.duration) {\n          this.updateDuration();\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Adds a label that can be used with {{#crossLink \"Timeline/gotoAndPlay\"}}{{/crossLink}}/{{#crossLink \"Timeline/gotoAndStop\"}}{{/crossLink}}.\n   * @method addLabel\n   * @param {String} label The label name.\n   * @param {Number} position The position this label represents.\n   **/\n\n\n  p.addLabel = function (label, position) {\n    this._labels[label] = position;\n    var list = this._labelList;\n\n    if (list) {\n      for (var i = 0, l = list.length; i < l; i++) {\n        if (position < list[i].position) {\n          break;\n        }\n      }\n\n      list.splice(i, 0, {\n        label: label,\n        position: position\n      });\n    }\n  };\n  /**\n   * Defines labels for use with gotoAndPlay/Stop. Overwrites any previously set labels.\n   * @method setLabels\n   * @param {Object} o An object defining labels for using {{#crossLink \"Timeline/gotoAndPlay\"}}{{/crossLink}}/{{#crossLink \"Timeline/gotoAndStop\"}}{{/crossLink}}\n   * in the form `{labelName:time}` where time is in milliseconds (or ticks if `useTicks` is `true`).\n   **/\n\n\n  p.setLabels = function (o) {\n    this._labels = o ? o : {};\n  };\n  /**\n   * Returns a sorted list of the labels defined on this timeline.\n   * @method getLabels\n   * @return {Array[Object]} A sorted array of objects with label and position properties.\n   **/\n\n\n  p.getLabels = function () {\n    var list = this._labelList;\n\n    if (!list) {\n      list = this._labelList = [];\n      var labels = this._labels;\n\n      for (var n in labels) {\n        list.push({\n          label: n,\n          position: labels[n]\n        });\n      }\n\n      list.sort(function (a, b) {\n        return a.position - b.position;\n      });\n    }\n\n    return list;\n  };\n  /**\n   * Returns the name of the label on or immediately before the current position. For example, given a timeline with\n   * two labels, \"first\" on frame index 4, and \"second\" on frame 8, getCurrentLabel would return:\n   * <UL>\n   * \t\t<LI>null if the current position is 2.</LI>\n   * \t\t<LI>\"first\" if the current position is 4.</LI>\n   * \t\t<LI>\"first\" if the current position is 7.</LI>\n   * \t\t<LI>\"second\" if the current position is 15.</LI>\n   * </UL>\n   * @method getCurrentLabel\n   * @return {String} The name of the current label or null if there is no label\n   **/\n\n\n  p.getCurrentLabel = function () {\n    var labels = this.getLabels();\n    var pos = this.position;\n    var l = labels.length;\n\n    if (l) {\n      for (var i = 0; i < l; i++) {\n        if (pos < labels[i].position) {\n          break;\n        }\n      }\n\n      return i == 0 ? null : labels[i - 1].label;\n    }\n\n    return null;\n  };\n  /**\n   * Unpauses this timeline and jumps to the specified position or label.\n   * @method gotoAndPlay\n   * @param {String|Number} positionOrLabel The position in milliseconds (or ticks if `useTicks` is `true`)\n   * or label to jump to.\n   **/\n\n\n  p.gotoAndPlay = function (positionOrLabel) {\n    this.setPaused(false);\n\n    this._goto(positionOrLabel);\n  };\n  /**\n   * Pauses this timeline and jumps to the specified position or label.\n   * @method gotoAndStop\n   * @param {String|Number} positionOrLabel The position in milliseconds (or ticks if `useTicks` is `true`) or label\n   * to jump to.\n   **/\n\n\n  p.gotoAndStop = function (positionOrLabel) {\n    this.setPaused(true);\n\n    this._goto(positionOrLabel);\n  };\n  /**\n   * Advances the timeline to the specified position.\n   * @method setPosition\n   * @param {Number} value The position to seek to in milliseconds (or ticks if `useTicks` is `true`).\n   * @param {Number} [actionsMode] parameter specifying how actions are handled. See the Tween {{#crossLink \"Tween/setPosition\"}}{{/crossLink}}\n   * method for more details.\n   * @return {Boolean} Returns `true` if the timeline is complete (ie. the full timeline has run & {{#crossLink \"Timeline/loop:property\"}}{{/crossLink}}\n   * is `false`).\n   **/\n\n\n  p.setPosition = function (value, actionsMode) {\n    var t = this._calcPosition(value);\n\n    var end = !this.loop && value >= this.duration;\n\n    if (t == this._prevPos) {\n      return end;\n    }\n\n    this._prevPosition = value;\n    this.position = this._prevPos = t; // in case an action changes the current frame.\n\n    for (var i = 0, l = this._tweens.length; i < l; i++) {\n      this._tweens[i].setPosition(t, actionsMode);\n\n      if (t != this._prevPos) {\n        return false;\n      } // an action changed this timeline's position.\n\n    }\n\n    if (end) {\n      this.setPaused(true);\n    }\n\n    this.dispatchEvent(\"change\");\n    return end;\n  };\n  /**\n   * Pauses or plays this timeline.\n   * @method setPaused\n   * @param {Boolean} value Indicates whether the tween should be paused (`true`) or played (`false`).\n   **/\n\n\n  p.setPaused = function (value) {\n    this._paused = !!value;\n\n    createjs.Tween._register(this, !value);\n  };\n  /**\n   * Recalculates the duration of the timeline. The duration is automatically updated when tweens are added or removed,\n   * but this method is useful if you modify a tween after it was added to the timeline.\n   * @method updateDuration\n   **/\n\n\n  p.updateDuration = function () {\n    this.duration = 0;\n\n    for (var i = 0, l = this._tweens.length; i < l; i++) {\n      var tween = this._tweens[i];\n\n      if (tween.duration > this.duration) {\n        this.duration = tween.duration;\n      }\n    }\n  };\n  /**\n   * Advances this timeline by the specified amount of time in milliseconds (or ticks if `useTicks` is `true`).\n   * This is normally called automatically by the Tween engine (via the {{#crossLink \"Tween/tick:event\"}}{{/crossLink}}\n   * event), but is exposed for advanced uses.\n   * @method tick\n   * @param {Number} delta The time to advance in milliseconds (or ticks if useTicks is true).\n   **/\n\n\n  p.tick = function (delta) {\n    this.setPosition(this._prevPosition + delta);\n  };\n  /**\n   * If a numeric position is passed, it is returned unchanged. If a string is passed, the position of the\n   * corresponding frame label will be returned, or `null` if a matching label is not defined.\n   * @method resolve\n   * @param {String|Number} positionOrLabel A numeric position value or label string.\n   **/\n\n\n  p.resolve = function (positionOrLabel) {\n    var pos = Number(positionOrLabel);\n\n    if (isNaN(pos)) {\n      pos = this._labels[positionOrLabel];\n    }\n\n    return pos;\n  };\n  /**\n  * Returns a string representation of this object.\n  * @method toString\n  * @return {String} a string representation of the instance.\n  **/\n\n\n  p.toString = function () {\n    return \"[Timeline]\";\n  };\n  /**\n   * @method clone\n   * @protected\n   **/\n\n\n  p.clone = function () {\n    throw \"Timeline can not be cloned.\";\n  }; // private methods:\n\n  /**\n   * @method _goto\n   * @param {String | Number} positionOrLabel\n   * @protected\n   **/\n\n\n  p._goto = function (positionOrLabel) {\n    var pos = this.resolve(positionOrLabel);\n\n    if (pos != null) {\n      this.setPosition(pos);\n    }\n  };\n  /**\n   * @method _calcPosition\n   * @param {Number} value\n   * @return {Number}\n   * @protected\n   **/\n\n\n  p._calcPosition = function (value) {\n    if (value < 0) {\n      return 0;\n    }\n\n    if (value < this.duration) {\n      return value;\n    }\n\n    return this.loop ? value % this.duration : this.duration;\n  };\n\n  createjs.Timeline = createjs.promote(Timeline, \"EventDispatcher\");\n})(); //##############################################################################\n// Ease.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\";\n  /**\n   * The Ease class provides a collection of easing functions for use with TweenJS. It does not use the standard 4 param\n   * easing signature. Instead it uses a single param which indicates the current linear ratio (0 to 1) of the tween.\n   *\n   * Most methods on Ease can be passed directly as easing functions:\n   *\n   *      Tween.get(target).to({x:100}, 500, Ease.linear);\n   *\n   * However, methods beginning with \"get\" will return an easing function based on parameter values:\n   *\n   *      Tween.get(target).to({y:200}, 500, Ease.getPowIn(2.2));\n   *\n   * Please see the <a href=\"http://www.createjs.com/Demos/TweenJS/Tween_SparkTable\">spark table demo</a> for an\n   * overview of the different ease types on <a href=\"http://tweenjs.com\">TweenJS.com</a>.\n   *\n   * <em>Equations derived from work by Robert Penner.</em>\n   * @class Ease\n   * @static\n   **/\n\n  function Ease() {\n    throw \"Ease cannot be instantiated.\";\n  } // static methods and properties\n\n  /**\n   * @method linear\n   * @param {Number} t\n   * @static\n   * @return {Number}\n   **/\n\n\n  Ease.linear = function (t) {\n    return t;\n  };\n  /**\n   * Identical to linear.\n   * @method none\n   * @param {Number} t\n   * @static\n   * @return {Number}\n   **/\n\n\n  Ease.none = Ease.linear;\n  /**\n   * Mimics the simple -100 to 100 easing in Flash Pro.\n   * @method get\n   * @param {Number} amount A value from -1 (ease in) to 1 (ease out) indicating the strength and direction of the ease.\n   * @static\n   * @return {Function}\n   **/\n\n  Ease.get = function (amount) {\n    if (amount < -1) {\n      amount = -1;\n    }\n\n    if (amount > 1) {\n      amount = 1;\n    }\n\n    return function (t) {\n      if (amount == 0) {\n        return t;\n      }\n\n      if (amount < 0) {\n        return t * (t * -amount + 1 + amount);\n      }\n\n      return t * ((2 - t) * amount + (1 - amount));\n    };\n  };\n  /**\n   * Configurable exponential ease.\n   * @method getPowIn\n   * @param {Number} pow The exponent to use (ex. 3 would return a cubic ease).\n   * @static\n   * @return {Function}\n   **/\n\n\n  Ease.getPowIn = function (pow) {\n    return function (t) {\n      return Math.pow(t, pow);\n    };\n  };\n  /**\n   * Configurable exponential ease.\n   * @method getPowOut\n   * @param {Number} pow The exponent to use (ex. 3 would return a cubic ease).\n   * @static\n   * @return {Function}\n   **/\n\n\n  Ease.getPowOut = function (pow) {\n    return function (t) {\n      return 1 - Math.pow(1 - t, pow);\n    };\n  };\n  /**\n   * Configurable exponential ease.\n   * @method getPowInOut\n   * @param {Number} pow The exponent to use (ex. 3 would return a cubic ease).\n   * @static\n   * @return {Function}\n   **/\n\n\n  Ease.getPowInOut = function (pow) {\n    return function (t) {\n      if ((t *= 2) < 1) return 0.5 * Math.pow(t, pow);\n      return 1 - 0.5 * Math.abs(Math.pow(2 - t, pow));\n    };\n  };\n  /**\n   * @method quadIn\n   * @param {Number} t\n   * @static\n   * @return {Number}\n   **/\n\n\n  Ease.quadIn = Ease.getPowIn(2);\n  /**\n   * @method quadOut\n   * @param {Number} t\n   * @static\n   * @return {Number}\n   **/\n\n  Ease.quadOut = Ease.getPowOut(2);\n  /**\n   * @method quadInOut\n   * @param {Number} t\n   * @static\n   * @return {Number}\n   **/\n\n  Ease.quadInOut = Ease.getPowInOut(2);\n  /**\n   * @method cubicIn\n   * @param {Number} t\n   * @static\n   * @return {Number}\n   **/\n\n  Ease.cubicIn = Ease.getPowIn(3);\n  /**\n   * @method cubicOut\n   * @param {Number} t\n   * @static\n   * @return {Number}\n   **/\n\n  Ease.cubicOut = Ease.getPowOut(3);\n  /**\n   * @method cubicInOut\n   * @param {Number} t\n   * @static\n   * @return {Number}\n   **/\n\n  Ease.cubicInOut = Ease.getPowInOut(3);\n  /**\n   * @method quartIn\n   * @param {Number} t\n   * @static\n   * @return {Number}\n   **/\n\n  Ease.quartIn = Ease.getPowIn(4);\n  /**\n   * @method quartOut\n   * @param {Number} t\n   * @static\n   * @return {Number}\n   **/\n\n  Ease.quartOut = Ease.getPowOut(4);\n  /**\n   * @method quartInOut\n   * @param {Number} t\n   * @static\n   * @return {Number}\n   **/\n\n  Ease.quartInOut = Ease.getPowInOut(4);\n  /**\n   * @method quintIn\n   * @param {Number} t\n   * @static\n   * @return {Number}\n   **/\n\n  Ease.quintIn = Ease.getPowIn(5);\n  /**\n   * @method quintOut\n   * @param {Number} t\n   * @static\n   * @return {Number}\n   **/\n\n  Ease.quintOut = Ease.getPowOut(5);\n  /**\n   * @method quintInOut\n   * @param {Number} t\n   * @static\n   * @return {Number}\n   **/\n\n  Ease.quintInOut = Ease.getPowInOut(5);\n  /**\n   * @method sineIn\n   * @param {Number} t\n   * @static\n   * @return {Number}\n   **/\n\n  Ease.sineIn = function (t) {\n    return 1 - Math.cos(t * Math.PI / 2);\n  };\n  /**\n   * @method sineOut\n   * @param {Number} t\n   * @static\n   * @return {Number}\n   **/\n\n\n  Ease.sineOut = function (t) {\n    return Math.sin(t * Math.PI / 2);\n  };\n  /**\n   * @method sineInOut\n   * @param {Number} t\n   * @static\n   * @return {Number}\n   **/\n\n\n  Ease.sineInOut = function (t) {\n    return -0.5 * (Math.cos(Math.PI * t) - 1);\n  };\n  /**\n   * Configurable \"back in\" ease.\n   * @method getBackIn\n   * @param {Number} amount The strength of the ease.\n   * @static\n   * @return {Function}\n   **/\n\n\n  Ease.getBackIn = function (amount) {\n    return function (t) {\n      return t * t * ((amount + 1) * t - amount);\n    };\n  };\n  /**\n   * @method backIn\n   * @param {Number} t\n   * @static\n   * @return {Number}\n   **/\n\n\n  Ease.backIn = Ease.getBackIn(1.7);\n  /**\n   * Configurable \"back out\" ease.\n   * @method getBackOut\n   * @param {Number} amount The strength of the ease.\n   * @static\n   * @return {Function}\n   **/\n\n  Ease.getBackOut = function (amount) {\n    return function (t) {\n      return --t * t * ((amount + 1) * t + amount) + 1;\n    };\n  };\n  /**\n   * @method backOut\n   * @param {Number} t\n   * @static\n   * @return {Number}\n   **/\n\n\n  Ease.backOut = Ease.getBackOut(1.7);\n  /**\n   * Configurable \"back in out\" ease.\n   * @method getBackInOut\n   * @param {Number} amount The strength of the ease.\n   * @static\n   * @return {Function}\n   **/\n\n  Ease.getBackInOut = function (amount) {\n    amount *= 1.525;\n    return function (t) {\n      if ((t *= 2) < 1) return 0.5 * (t * t * ((amount + 1) * t - amount));\n      return 0.5 * ((t -= 2) * t * ((amount + 1) * t + amount) + 2);\n    };\n  };\n  /**\n   * @method backInOut\n   * @param {Number} t\n   * @static\n   * @return {Number}\n   **/\n\n\n  Ease.backInOut = Ease.getBackInOut(1.7);\n  /**\n   * @method circIn\n   * @param {Number} t\n   * @static\n   * @return {Number}\n   **/\n\n  Ease.circIn = function (t) {\n    return -(Math.sqrt(1 - t * t) - 1);\n  };\n  /**\n   * @method circOut\n   * @param {Number} t\n   * @static\n   * @return {Number}\n   **/\n\n\n  Ease.circOut = function (t) {\n    return Math.sqrt(1 - --t * t);\n  };\n  /**\n   * @method circInOut\n   * @param {Number} t\n   * @static\n   * @return {Number}\n   **/\n\n\n  Ease.circInOut = function (t) {\n    if ((t *= 2) < 1) return -0.5 * (Math.sqrt(1 - t * t) - 1);\n    return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);\n  };\n  /**\n   * @method bounceIn\n   * @param {Number} t\n   * @static\n   * @return {Number}\n   **/\n\n\n  Ease.bounceIn = function (t) {\n    return 1 - Ease.bounceOut(1 - t);\n  };\n  /**\n   * @method bounceOut\n   * @param {Number} t\n   * @static\n   * @return {Number}\n   **/\n\n\n  Ease.bounceOut = function (t) {\n    if (t < 1 / 2.75) {\n      return 7.5625 * t * t;\n    } else if (t < 2 / 2.75) {\n      return 7.5625 * (t -= 1.5 / 2.75) * t + 0.75;\n    } else if (t < 2.5 / 2.75) {\n      return 7.5625 * (t -= 2.25 / 2.75) * t + 0.9375;\n    } else {\n      return 7.5625 * (t -= 2.625 / 2.75) * t + 0.984375;\n    }\n  };\n  /**\n   * @method bounceInOut\n   * @param {Number} t\n   * @static\n   * @return {Number}\n   **/\n\n\n  Ease.bounceInOut = function (t) {\n    if (t < 0.5) return Ease.bounceIn(t * 2) * .5;\n    return Ease.bounceOut(t * 2 - 1) * 0.5 + 0.5;\n  };\n  /**\n   * Configurable elastic ease.\n   * @method getElasticIn\n   * @param {Number} amplitude\n   * @param {Number} period\n   * @static\n   * @return {Function}\n   **/\n\n\n  Ease.getElasticIn = function (amplitude, period) {\n    var pi2 = Math.PI * 2;\n    return function (t) {\n      if (t == 0 || t == 1) return t;\n      var s = period / pi2 * Math.asin(1 / amplitude);\n      return -(amplitude * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * pi2 / period));\n    };\n  };\n  /**\n   * @method elasticIn\n   * @param {Number} t\n   * @static\n   * @return {Number}\n   **/\n\n\n  Ease.elasticIn = Ease.getElasticIn(1, 0.3);\n  /**\n   * Configurable elastic ease.\n   * @method getElasticOut\n   * @param {Number} amplitude\n   * @param {Number} period\n   * @static\n   * @return {Function}\n   **/\n\n  Ease.getElasticOut = function (amplitude, period) {\n    var pi2 = Math.PI * 2;\n    return function (t) {\n      if (t == 0 || t == 1) return t;\n      var s = period / pi2 * Math.asin(1 / amplitude);\n      return amplitude * Math.pow(2, -10 * t) * Math.sin((t - s) * pi2 / period) + 1;\n    };\n  };\n  /**\n   * @method elasticOut\n   * @param {Number} t\n   * @static\n   * @return {Number}\n   **/\n\n\n  Ease.elasticOut = Ease.getElasticOut(1, 0.3);\n  /**\n   * Configurable elastic ease.\n   * @method getElasticInOut\n   * @param {Number} amplitude\n   * @param {Number} period\n   * @static\n   * @return {Function}\n   **/\n\n  Ease.getElasticInOut = function (amplitude, period) {\n    var pi2 = Math.PI * 2;\n    return function (t) {\n      var s = period / pi2 * Math.asin(1 / amplitude);\n      if ((t *= 2) < 1) return -0.5 * (amplitude * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * pi2 / period));\n      return amplitude * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - s) * pi2 / period) * 0.5 + 1;\n    };\n  };\n  /**\n   * @method elasticInOut\n   * @param {Number} t\n   * @static\n   * @return {Number}\n   **/\n\n\n  Ease.elasticInOut = Ease.getElasticInOut(1, 0.3 * 1.5);\n  createjs.Ease = Ease;\n})(); //##############################################################################\n// MotionGuidePlugin.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\";\n  /**\n   * A TweenJS plugin for working with motion guides.\n   *\n   * To use, install the plugin after TweenJS has loaded. Next tween the 'guide' property with an object as detailed below.\n   *\n   *       createjs.MotionGuidePlugin.install();\n   *\n   * <h4>Example</h4>\n   *\n   *      // Using a Motion Guide\n   *\t    createjs.Tween.get(target).to({guide:{ path:[0,0, 0,200,200,200, 200,0,0,0] }},7000);\n   *\t    // Visualizing the line\n   *\t    graphics.moveTo(0,0).curveTo(0,200,200,200).curveTo(200,0,0,0);\n   *\n   * Each path needs pre-computation to ensure there's fast performance. Because of the pre-computation there's no\n   * built in support for path changes mid tween. These are the Guide Object's properties:<UL>\n   *      <LI> path: Required, Array : The x/y points used to draw the path with a moveTo and 1 to n curveTo calls.</LI>\n   *      <LI> start: Optional, 0-1 : Initial position, default 0 except for when continuing along the same path.</LI>\n   *      <LI> end: Optional, 0-1 : Final position, default 1 if not specified.</LI>\n   *      <LI> orient: Optional, string : \"fixed\"/\"auto\"/\"cw\"/\"ccw\"<UL>\n   *\t\t\t\t<LI>\"fixed\" forces the object to face down the path all movement (relative to start rotation),</LI>\n   *      \t\t<LI>\"auto\" rotates the object along the path relative to the line.</LI>\n   *      \t\t<LI>\"cw\"/\"ccw\" force clockwise or counter clockwise rotations including flash like behaviour</LI>\n   * \t\t</UL></LI>\n   * </UL>\n   * Guide objects should not be shared between tweens even if all properties are identical, the library stores\n   * information on these objects in the background and sharing them can cause unexpected behaviour. Values\n   * outside 0-1 range of tweens will be a \"best guess\" from the appropriate part of the defined curve.\n   *\n   * @class MotionGuidePlugin\n   * @constructor\n   **/\n\n  function MotionGuidePlugin() {\n    throw \"MotionGuidePlugin cannot be instantiated.\";\n  }\n\n  ; // static properties:\n\n  /**\n   * @property priority\n   * @protected\n   * @static\n   **/\n\n  MotionGuidePlugin.priority = 0; // high priority, should run sooner\n\n  /**\n   * @property temporary variable storage\n   * @private\n   * @static\n   */\n\n  MotionGuidePlugin._rotOffS;\n  /**\n   * @property temporary variable storage\n   * @private\n   * @static\n   */\n\n  MotionGuidePlugin._rotOffE;\n  /**\n   * @property temporary variable storage\n   * @private\n   * @static\n   */\n\n  MotionGuidePlugin._rotNormS;\n  /**\n   * @property temporary variable storage\n   * @private\n   * @static\n   */\n\n  MotionGuidePlugin._rotNormE; // static methods\n\n  /**\n   * Installs this plugin for use with TweenJS. Call this once after TweenJS is loaded to enable this plugin.\n   * @method install\n   * @static\n   **/\n\n  MotionGuidePlugin.install = function () {\n    createjs.Tween.installPlugin(MotionGuidePlugin, [\"guide\", \"x\", \"y\", \"rotation\"]);\n    return createjs.Tween.IGNORE;\n  };\n  /**\n   * @method init\n   * @protected\n   * @static\n   **/\n\n\n  MotionGuidePlugin.init = function (tween, prop, value) {\n    var target = tween.target;\n\n    if (!target.hasOwnProperty(\"x\")) {\n      target.x = 0;\n    }\n\n    if (!target.hasOwnProperty(\"y\")) {\n      target.y = 0;\n    }\n\n    if (!target.hasOwnProperty(\"rotation\")) {\n      target.rotation = 0;\n    }\n\n    if (prop == \"rotation\") {\n      tween.__needsRot = true;\n    }\n\n    return prop == \"guide\" ? null : value;\n  };\n  /**\n   * @method step\n   * @protected\n   * @static\n   **/\n\n\n  MotionGuidePlugin.step = function (tween, prop, startValue, endValue, injectProps) {\n    // other props\n    if (prop == \"rotation\") {\n      tween.__rotGlobalS = startValue;\n      tween.__rotGlobalE = endValue;\n      MotionGuidePlugin.testRotData(tween, injectProps);\n    }\n\n    if (prop != \"guide\") {\n      return endValue;\n    } // guide only information - Start -\n\n\n    var temp,\n        data = endValue;\n\n    if (!data.hasOwnProperty(\"path\")) {\n      data.path = [];\n    }\n\n    var path = data.path;\n\n    if (!data.hasOwnProperty(\"end\")) {\n      data.end = 1;\n    }\n\n    if (!data.hasOwnProperty(\"start\")) {\n      data.start = startValue && startValue.hasOwnProperty(\"end\") && startValue.path === path ? startValue.end : 0;\n    } // Figure out subline information\n\n\n    if (data.hasOwnProperty(\"_segments\") && data._length) {\n      return endValue;\n    }\n\n    var l = path.length;\n    var accuracy = 10; // Adjust to improve line following precision but sacrifice performance (# of seg)\n\n    if (l >= 6 && (l - 2) % 4 == 0) {\n      // Enough points && contains correct number per entry ignoring start\n      data._segments = [];\n      data._length = 0;\n\n      for (var i = 2; i < l; i += 4) {\n        var sx = path[i - 2],\n            sy = path[i - 1];\n        var cx = path[i + 0],\n            cy = path[i + 1];\n        var ex = path[i + 2],\n            ey = path[i + 3];\n        var oldX = sx,\n            oldY = sy;\n        var tempX,\n            tempY,\n            total = 0;\n        var sublines = [];\n\n        for (var j = 1; j <= accuracy; j++) {\n          var t = j / accuracy;\n          var inv = 1 - t;\n          tempX = inv * inv * sx + 2 * inv * t * cx + t * t * ex;\n          tempY = inv * inv * sy + 2 * inv * t * cy + t * t * ey;\n          total += sublines[sublines.push(Math.sqrt((temp = tempX - oldX) * temp + (temp = tempY - oldY) * temp)) - 1];\n          oldX = tempX;\n          oldY = tempY;\n        }\n\n        data._segments.push(total);\n\n        data._segments.push(sublines);\n\n        data._length += total;\n      }\n    } else {\n      throw \"invalid 'path' data, please see documentation for valid paths\";\n    } // Setup x/y tweens\n\n\n    temp = data.orient;\n    data.orient = true;\n    var o = {};\n    MotionGuidePlugin.calc(data, data.start, o);\n    tween.__rotPathS = Number(o.rotation.toFixed(5));\n    MotionGuidePlugin.calc(data, data.end, o);\n    tween.__rotPathE = Number(o.rotation.toFixed(5));\n    data.orient = false; //here and now we don't know if we need to\n\n    MotionGuidePlugin.calc(data, data.end, injectProps);\n    data.orient = temp; // Setup rotation properties\n\n    if (!data.orient) {\n      return endValue;\n    }\n\n    tween.__guideData = data;\n    MotionGuidePlugin.testRotData(tween, injectProps);\n    return endValue;\n  };\n  /**\n   * @method testRotData\n   * @protected\n   * @static\n   **/\n\n\n  MotionGuidePlugin.testRotData = function (tween, injectProps) {\n    // no rotation informat? if we need it come back, if we don't use 0 & ensure we have guide data\n    if (tween.__rotGlobalS === undefined || tween.__rotGlobalE === undefined) {\n      if (tween.__needsRot) {\n        return;\n      }\n\n      if (tween._curQueueProps.rotation !== undefined) {\n        tween.__rotGlobalS = tween.__rotGlobalE = tween._curQueueProps.rotation;\n      } else {\n        tween.__rotGlobalS = tween.__rotGlobalE = injectProps.rotation = tween.target.rotation || 0;\n      }\n    }\n\n    if (tween.__guideData === undefined) {\n      return;\n    } // Process rotation properties\n\n\n    var data = tween.__guideData;\n    var rotGlobalD = tween.__rotGlobalE - tween.__rotGlobalS;\n    var rotPathD = tween.__rotPathE - tween.__rotPathS;\n    var rot = rotGlobalD - rotPathD;\n\n    if (data.orient == \"auto\") {\n      if (rot > 180) {\n        rot -= 360;\n      } else if (rot < -180) {\n        rot += 360;\n      }\n    } else if (data.orient == \"cw\") {\n      while (rot < 0) {\n        rot += 360;\n      }\n\n      if (rot == 0 && rotGlobalD > 0 && rotGlobalD != 180) {\n        rot += 360;\n      }\n    } else if (data.orient == \"ccw\") {\n      rot = rotGlobalD - (rotPathD > 180 ? 360 - rotPathD : rotPathD); // sign flipping on path\n\n      while (rot > 0) {\n        rot -= 360;\n      }\n\n      if (rot == 0 && rotGlobalD < 0 && rotGlobalD != -180) {\n        rot -= 360;\n      }\n    }\n\n    data.rotDelta = rot;\n    data.rotOffS = tween.__rotGlobalS - tween.__rotPathS; // reset\n\n    tween.__rotGlobalS = tween.__rotGlobalE = tween.__guideData = tween.__needsRot = undefined;\n  };\n  /**\n   * @method tween\n   * @protected\n   * @static\n   **/\n\n\n  MotionGuidePlugin.tween = function (tween, prop, value, startValues, endValues, ratio, wait, end) {\n    var data = endValues.guide;\n\n    if (data == undefined || data === startValues.guide) {\n      return value;\n    }\n\n    if (data.lastRatio != ratio) {\n      // first time through so calculate what I need to\n      var t = (data.end - data.start) * (wait ? data.end : ratio) + data.start;\n      MotionGuidePlugin.calc(data, t, tween.target);\n\n      switch (data.orient) {\n        case \"cw\": // mix in the original rotation\n\n        case \"ccw\":\n        case \"auto\":\n          tween.target.rotation += data.rotOffS + data.rotDelta * ratio;\n          break;\n\n        case \"fixed\": // follow fixed behaviour to solve potential issues\n\n        default:\n          tween.target.rotation += data.rotOffS;\n          break;\n      }\n\n      data.lastRatio = ratio;\n    }\n\n    if (prop == \"rotation\" && (!data.orient || data.orient == \"false\")) {\n      return value;\n    }\n\n    return tween.target[prop];\n  };\n  /**\n   * Determine the appropriate x/y/rotation information about a path for a given ratio along the path.\n   * Assumes a path object with all optional parameters specified.\n   * @param data Data object you would pass to the \"guide:\" property in a Tween\n   * @param ratio 0-1 Distance along path, values outside 0-1 are \"best guess\"\n   * @param target Object to copy the results onto, will use a new object if not supplied.\n   * @return {Object} The target object or a new object w/ the tweened properties\n   * @static\n   */\n\n\n  MotionGuidePlugin.calc = function (data, ratio, target) {\n    if (data._segments == undefined) {\n      throw \"Missing critical pre-calculated information, please file a bug\";\n    }\n\n    if (target == undefined) {\n      target = {\n        x: 0,\n        y: 0,\n        rotation: 0\n      };\n    }\n\n    var seg = data._segments;\n    var path = data.path; // find segment\n\n    var pos = data._length * ratio;\n    var cap = seg.length - 2;\n    var n = 0;\n\n    while (pos > seg[n] && n < cap) {\n      pos -= seg[n];\n      n += 2;\n    } // find subline\n\n\n    var sublines = seg[n + 1];\n    var i = 0;\n    cap = sublines.length - 1;\n\n    while (pos > sublines[i] && i < cap) {\n      pos -= sublines[i];\n      i++;\n    }\n\n    var t = i / ++cap + pos / (cap * sublines[i]); // find x/y\n\n    n = n * 2 + 2;\n    var inv = 1 - t;\n    target.x = inv * inv * path[n - 2] + 2 * inv * t * path[n + 0] + t * t * path[n + 2];\n    target.y = inv * inv * path[n - 1] + 2 * inv * t * path[n + 1] + t * t * path[n + 3]; // orientation\n\n    if (data.orient) {\n      target.rotation = 57.2957795 * Math.atan2((path[n + 1] - path[n - 1]) * inv + (path[n + 3] - path[n + 1]) * t, (path[n + 0] - path[n - 2]) * inv + (path[n + 2] - path[n + 0]) * t);\n    }\n\n    return target;\n  };\n\n  createjs.MotionGuidePlugin = MotionGuidePlugin;\n})(); //##############################################################################\n// version.js\n//##############################################################################\n\n\n(function () {\n  \"use strict\";\n  /**\n   * Static class holding library specific information such as the version and buildDate of\n   * the library.\n   * @class TweenJS\n   **/\n\n  var s = createjs.TweenJS = createjs.TweenJS || {};\n  /**\n   * The version string for this release.\n   * @property version\n   * @type String\n   * @static\n   **/\n\n  s.version =\n  /*=version*/\n  \"0.6.2\"; // injected by build process\n\n  /**\n   * The build date for this release in UTC format.\n   * @property buildDate\n   * @type String\n   * @static\n   **/\n\n  s.buildDate =\n  /*=date*/\n  \"Thu, 26 Nov 2015 20:44:31 GMT\"; // injected by build process\n})();\n\nif (typeof module !== \"undefined\" && typeof module.exports !== \"undefined\") module.exports = this.createjs;","map":null,"metadata":{},"sourceType":"script"}