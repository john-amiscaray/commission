{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { WebPlugin } from './index';\n\nvar AppPluginWeb =\n/** @class */\nfunction (_super) {\n  __extends(AppPluginWeb, _super);\n\n  function AppPluginWeb() {\n    var _this = _super.call(this, {\n      name: 'App',\n      platforms: ['web']\n    }) || this;\n\n    if (typeof document !== 'undefined') {\n      document.addEventListener('visibilitychange', _this.handleVisibilityChange.bind(_this), false);\n    }\n\n    return _this;\n  }\n\n  AppPluginWeb.prototype.exitApp = function () {\n    throw new Error('Method not implemented.');\n  };\n\n  AppPluginWeb.prototype.canOpenUrl = function (_options) {\n    return Promise.resolve({\n      value: true\n    });\n  };\n\n  AppPluginWeb.prototype.openUrl = function (_options) {\n    return Promise.resolve({\n      completed: true\n    });\n  };\n\n  AppPluginWeb.prototype.getLaunchUrl = function () {\n    return Promise.resolve({\n      url: ''\n    });\n  };\n\n  AppPluginWeb.prototype.getState = function () {\n    return Promise.resolve({\n      isActive: document.hidden !== true\n    });\n  };\n\n  AppPluginWeb.prototype.handleVisibilityChange = function () {\n    var data = {\n      isActive: document.hidden !== true\n    };\n    this.notifyListeners('appStateChange', data);\n  };\n\n  return AppPluginWeb;\n}(WebPlugin);\n\nexport { AppPluginWeb };\nvar App = new AppPluginWeb();\nexport { App }; //# sourceMappingURL=app.js.map","map":null,"metadata":{},"sourceType":"module"}