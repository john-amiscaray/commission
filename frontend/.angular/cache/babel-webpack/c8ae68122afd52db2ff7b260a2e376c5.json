{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { WebPlugin } from './index';\n\nvar LocalNotificationsPluginWeb =\n/** @class */\nfunction (_super) {\n  __extends(LocalNotificationsPluginWeb, _super);\n\n  function LocalNotificationsPluginWeb() {\n    var _this = _super.call(this, {\n      name: 'LocalNotifications',\n      platforms: ['web']\n    }) || this;\n\n    _this.pending = [];\n    return _this;\n  }\n\n  LocalNotificationsPluginWeb.prototype.createChannel = function (channel) {\n    throw new Error('Feature not available in the browser. ' + channel.id);\n  };\n\n  LocalNotificationsPluginWeb.prototype.deleteChannel = function (channel) {\n    throw new Error('Feature not available in the browser. ' + channel.id);\n  };\n\n  LocalNotificationsPluginWeb.prototype.listChannels = function () {\n    throw new Error('Feature not available in the browser');\n  };\n\n  LocalNotificationsPluginWeb.prototype.sendPending = function () {\n    var _this = this;\n\n    var toRemove = [];\n    var now = +new Date();\n    this.pending.forEach(function (localNotification) {\n      if (localNotification.schedule && localNotification.schedule.at) {\n        if (+localNotification.schedule.at <= now) {\n          _this.buildNotification(localNotification);\n\n          toRemove.push(localNotification);\n        }\n      }\n    });\n    console.log('Sent pending, removing', toRemove);\n    this.pending = this.pending.filter(function (localNotification) {\n      return !toRemove.find(function (ln) {\n        return ln === localNotification;\n      });\n    });\n  };\n\n  LocalNotificationsPluginWeb.prototype.sendNotification = function (localNotification) {\n    var _this = this;\n\n    var l = localNotification;\n\n    if (localNotification.schedule && localNotification.schedule.at) {\n      var diff = +localNotification.schedule.at - +new Date();\n      this.pending.push(l);\n      setTimeout(function () {\n        _this.sendPending();\n      }, diff);\n      return;\n    }\n\n    this.buildNotification(localNotification);\n  };\n\n  LocalNotificationsPluginWeb.prototype.buildNotification = function (localNotification) {\n    var l = localNotification;\n    return new Notification(l.title, {\n      body: l.body\n    });\n  };\n\n  LocalNotificationsPluginWeb.prototype.schedule = function (options) {\n    var _this = this;\n\n    var notifications = [];\n    options.notifications.forEach(function (notification) {\n      notifications.push(_this.sendNotification(notification));\n    });\n    return Promise.resolve({\n      notifications: options.notifications.map(function (notification) {\n        return {\n          id: '' + notification.id\n        };\n      })\n    });\n  };\n\n  LocalNotificationsPluginWeb.prototype.getPending = function () {\n    return Promise.resolve({\n      notifications: this.pending.map(function (localNotification) {\n        return {\n          id: '' + localNotification.id\n        };\n      })\n    });\n  };\n\n  LocalNotificationsPluginWeb.prototype.registerActionTypes = function (_options) {\n    throw new Error('Method not implemented.');\n  };\n\n  LocalNotificationsPluginWeb.prototype.cancel = function (pending) {\n    console.log('Cancel these', pending);\n    this.pending = this.pending.filter(function (localNotification) {\n      return !pending.notifications.find(function (ln) {\n        return ln.id === '' + localNotification.id;\n      });\n    });\n    return Promise.resolve();\n  };\n\n  LocalNotificationsPluginWeb.prototype.areEnabled = function () {\n    return Promise.resolve({\n      value: Notification.permission === 'granted'\n    });\n  };\n\n  LocalNotificationsPluginWeb.prototype.requestPermission = function () {\n    return new Promise(function (resolve) {\n      Notification.requestPermission(function (result) {\n        var granted = true;\n\n        if (result === 'denied' || result === 'default') {\n          granted = false;\n        }\n\n        resolve({\n          granted: granted\n        });\n      });\n    });\n  };\n\n  LocalNotificationsPluginWeb.prototype.requestPermissions = function () {\n    return new Promise(function (resolve, reject) {\n      Notification.requestPermission(function (result) {\n        if (result === 'denied' || result === 'default') {\n          reject(result);\n          return;\n        }\n\n        resolve({\n          results: [result]\n        });\n      });\n    });\n  };\n\n  return LocalNotificationsPluginWeb;\n}(WebPlugin);\n\nexport { LocalNotificationsPluginWeb };\nvar LocalNotifications = new LocalNotificationsPluginWeb();\nexport { LocalNotifications }; //# sourceMappingURL=local-notifications.js.map","map":null,"metadata":{},"sourceType":"module"}