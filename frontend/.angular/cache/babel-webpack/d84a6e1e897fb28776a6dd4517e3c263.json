{"ast":null,"code":"import { GamePlayerStatusType } from \"../dtos/GamePlayerStatus\";\nimport { RxStomp } from \"@stomp/rx-stomp\";\nimport { environment } from \"../../environments/environment\";\nimport * as SockJS from \"sockjs-client\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nexport let GameService = /*#__PURE__*/(() => {\n  class GameService {\n    constructor(auth) {\n      this.auth = auth;\n      this.gameActionCallbacks = [];\n      this.gameStatusCallbacks = [];\n      this.gameScoreCallbacks = [];\n      this.gamePlayerUpdateCallbacks = [];\n      this.gameJudgeActionCallbacks = [];\n      this._inActiveGame = false;\n      this.subscriptions = [];\n      this._connectedPlayerCount = 0;\n      this.participants = null;\n      this._gameActive = false;\n    }\n\n    get settings() {\n      return this._settings;\n    }\n\n    get connectedPlayerCount() {\n      return this._connectedPlayerCount;\n    }\n\n    get userConnectedStatus() {\n      return this._userConnectedStatus;\n    }\n\n    get inActiveGame() {\n      return this._inActiveGame;\n    }\n\n    get gameActive() {\n      return this._gameActive;\n    }\n\n    init(roomCode, settings, connectedStatus, participants) {\n      let self = this;\n      this._roomCode = roomCode;\n      this.participants = participants;\n      this.rxStompClient = new RxStomp();\n      this.rxStompClient.configure({\n        webSocketFactory: function () {\n          return new SockJS(environment.sockJSEndpoint);\n        }\n      });\n      this.rxStompClient.activate();\n      this._settings = settings;\n      this._userConnectedStatus = connectedStatus;\n      this.subscriptions.push(this.rxStompClient.watch({\n        destination: environment.getGameActionReceiveEndpoint(this._roomCode)\n      }).subscribe(res => {\n        let body = JSON.parse(res.body);\n\n        for (let callback of self.gameActionCallbacks) {\n          callback(body);\n        }\n      }, error => {\n        console.error(error);\n      }));\n      this.subscriptions.push(this.rxStompClient.watch({\n        destination: environment.getGameStatusUpdateEndpoint(this._roomCode)\n      }).subscribe(res => {\n        let body = JSON.parse(res.body);\n        let count = 0;\n\n        for (let prop in body.scores) {\n          count++;\n        }\n\n        if (count !== this._connectedPlayerCount) {\n          this._connectedPlayerCount = count;\n        }\n\n        for (let callback of self.gameStatusCallbacks) {\n          callback(body);\n        }\n      }, error => {\n        console.log(error);\n      }));\n      this.subscriptions.push(this.rxStompClient.watch({\n        destination: environment.getGameScoreUpdateEndpoint(this._roomCode)\n      }).subscribe(res => {\n        let body = JSON.parse(res.body);\n\n        for (let callback of self.gameScoreCallbacks) {\n          callback(body);\n        }\n      }, error => {\n        console.log(error);\n      }));\n      this.subscriptions.push(this.rxStompClient.watch({\n        destination: environment.getGamePlayerUpdateReceiveEndpoint(this._roomCode)\n      }).subscribe(res => {\n        let body = JSON.parse(res.body);\n        self.userConnectedStatus.get(body.subject).ready = body.status === GamePlayerStatusType.CONNECT;\n\n        if (!this.participants.includes(body.subject) && body.status === 'CONNECT') {\n          this.participants.push(body.subject);\n        } else if (this.participants.includes(body.subject) && body.status === 'DISCONNECT') {\n          this.participants = this.participants.filter(it => it != body.subject);\n        }\n\n        for (let callback of self.gamePlayerUpdateCallbacks) {\n          callback(body);\n        }\n      }, error => {\n        console.log(error);\n      }));\n      this.subscriptions.push(this.rxStompClient.watch({\n        destination: environment.getGameJudgeActionReceiveEndpoint(this._roomCode)\n      }).subscribe(res => {\n        let body = JSON.parse(res.body);\n\n        for (let callback of self.gameJudgeActionCallbacks) {\n          callback(body);\n        }\n      }));\n      this._inActiveGame = true;\n    } // ADD CALLBACKS\n\n\n    addGameActionCallback(callback) {\n      this.gameActionCallbacks.push(callback);\n    }\n\n    addGameStatusCallback(callback) {\n      this.gameStatusCallbacks.push(callback);\n    }\n\n    addGameScoreCallback(callback) {\n      this.gameScoreCallbacks.push(callback);\n    }\n\n    addGamePlayerUpdateCallback(callback) {\n      this.gamePlayerUpdateCallbacks.push(callback);\n    }\n\n    addJudgeActionCallback(callback) {\n      this.gameJudgeActionCallbacks.push(callback);\n    } // SEND MESSAGES\n\n\n    sendGameAction(action) {\n      let self = this;\n      this.rxStompClient.publish({\n        destination: environment.getGameActionSendEndpoint(self._roomCode),\n        body: JSON.stringify(action),\n        headers: {\n          token: self.auth.getJWT()\n        }\n      });\n    }\n\n    sendGamePlayerStatus(status) {\n      let self = this;\n      this.rxStompClient.publish({\n        destination: environment.getGamePlayerUpdateSendEndpoint(self._roomCode),\n        body: JSON.stringify(status),\n        headers: {\n          token: self.auth.getJWT()\n        }\n      });\n    }\n\n    sendJudgeAction(action) {\n      let self = this;\n      action.subject = parseInt(this.auth.getGameId());\n      this.rxStompClient.publish({\n        destination: environment.getGameJudgeActionSendEndpoint(self._roomCode),\n        body: JSON.stringify(action),\n        headers: {\n          token: self.auth.getJWT()\n        }\n      });\n    } // CLEAN UP\n\n\n    clearCallbacks() {\n      this.gameJudgeActionCallbacks = [];\n      this.gameScoreCallbacks = [];\n      this.gameActionCallbacks = [];\n      this.gameStatusCallbacks = [];\n    }\n\n    unsubscribeAll() {\n      for (let subscription of this.subscriptions) {\n        subscription.unsubscribe();\n      }\n    }\n\n    clearResourcesOnComplete() {\n      this.clearCallbacks();\n      this.unsubscribeAll();\n      this.rxStompClient.deactivate();\n    }\n\n  }\n\n  GameService.ɵfac = function GameService_Factory(t) {\n    return new (t || GameService)(i0.ɵɵinject(i1.AuthService));\n  };\n\n  GameService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GameService,\n    factory: GameService.ɵfac,\n    providedIn: 'root'\n  });\n  return GameService;\n})();","map":null,"metadata":{},"sourceType":"module"}