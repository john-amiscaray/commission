{"ast":null,"code":"import * as createjs from 'createjs-module';\nimport { GameAction } from \"../../dtos/GameAction\";\nimport { LinkedListNode } from \"../../data-structures/linked-list-node\";\nimport { GamePlayerStatus } from \"../../dtos/GamePlayerStatus\";\nimport { GameStatusType } from \"../../dtos/GameStatus\";\nimport { GameJudgeActionType } from \"../../dtos/GameJudgeAction\";\nimport { Subject } from \"rxjs\";\nimport { fadeAnimation, fallInAnimation, fallOutAnimation } from \"./game-animations\";\nimport { ComponentWithSplashIntro } from \"../../component-interfaces/component-with-splash-intro\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../../services/game-message.service\";\nimport * as i3 from \"../../services/toast.service\";\nimport * as i4 from \"../../services/auth.service\";\nimport * as i5 from \"../../services/game.service\";\nimport * as i6 from \"@ionic/angular\";\nimport * as i7 from \"./game-clock/game-clock.component\";\nimport * as i8 from \"@angular/common\";\nimport * as i9 from \"./pallet-color/pallet-color.component\";\nimport * as i10 from \"@angular/forms\";\nimport * as i11 from \"./game-message/game-message.component\";\n\nfunction GamePage_ion_backdrop_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"ion-backdrop\", 30);\n    i0.ɵɵlistener(\"ionBackdropTap\", function GamePage_ion_backdrop_9_Template_ion_backdrop_ionBackdropTap_0_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.onMessageBackDropClick();\n    })(\"click\", function GamePage_ion_backdrop_9_Template_ion_backdrop_click_0_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.onMessageBackDropClick();\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵproperty(\"@fade\", undefined);\n  }\n}\n\nfunction GamePage_app_game_message_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-game-message\", 31);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@fallin\", undefined)(\"@fallout\", undefined)(\"messageDetails\", ctx_r1.currentMessageDetails);\n  }\n}\n\nfunction GamePage_canvas_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"canvas\", 32);\n  }\n\n  if (rf & 2) {\n    const player_r6 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"id\", player_r6)(\"hidden\", player_r6 !== ctx_r2.activeCanvas.value);\n  }\n}\n\nexport let GamePage = /*#__PURE__*/(() => {\n  class GamePage extends ComponentWithSplashIntro {\n    constructor(router, modal, toast, auth, game, route) {\n      super();\n      this.router = router;\n      this.modal = modal;\n      this.toast = toast;\n      this.auth = auth;\n      this.game = game;\n      this.route = route;\n      this.colorsOnPallet = ['#000000', '#D3D1D1', '#D62929', '#64BC56', '#437FF3', '#F3E243'];\n      this.colorCode = this.colorsOnPallet[2];\n      this.brushSize = 10;\n      this.bucketSelected = false;\n      this.eraserSelected = false;\n      this.playerCanvases = new Map();\n      this.score = 500;\n      this.isJudge = false;\n      this.currentJudge = -1;\n      this.roundNumber = 1;\n      this.colorPickerSelection = this.colorCode;\n      this.displayedJudgeCanvasWarning = false;\n      this.startEvent = new Subject();\n      this.pauseEvent = new Subject();\n      this.currentMessageDetails = {\n        heading: '',\n        message: '',\n        messageType: GameStatusType.MATCH_START,\n        isJudge: false,\n        judgeRequest: '',\n        drawingUrlMap: null,\n        dismissible: true\n      }; // Used to restore the previous message if the game was paused\n\n      this.messageShouldShow = false;\n      this.savedMessage = null;\n    }\n\n    ngOnInit() {\n      if (!this.game.inActiveGame) {\n        this.router.navigate(['home']);\n      }\n\n      for (let player of this.game.participants) {\n        this.playerCanvases.set(player, null);\n      }\n\n      this.initCanvasRotation();\n      this.userConnectedStatus = this.game.userConnectedStatus;\n    }\n\n    initCanvasRotation() {\n      let self = this;\n      this.activeCanvas = new LinkedListNode(parseInt(this.auth.getGameId()));\n      let temp = this.game.participants.filter(value => {\n        return value != parseInt(self.auth.getGameId());\n      });\n      temp.push(this.activeCanvas.value);\n      let lastNode = this.activeCanvas;\n      let originNode = null;\n      let i = 0,\n          j = 1;\n\n      while (i < temp.length) {\n        let node = temp[i] === this.activeCanvas.value ? this.activeCanvas : new LinkedListNode(temp[i]);\n\n        if (i === 0) {\n          originNode = node;\n        }\n\n        let next = j < temp.length ? temp[j] === this.activeCanvas.value ? this.activeCanvas : new LinkedListNode(temp[j]) : originNode;\n        node.previous = lastNode;\n        node.previous.next = node;\n        node.next = next;\n        next.previous = node;\n        lastNode = next;\n        i = j + 1;\n        j = i + 1;\n\n        if (j === temp.length - 1) {\n          next.next = originNode;\n        }\n      }\n    }\n\n    ngAfterViewInit() {\n      for (let player of this.playerCanvases.keys()) {\n        this.canvasInit(player);\n      }\n\n      this.addCallbacks();\n      this.disableInactiveCanvases();\n      this.game.sendGamePlayerStatus(new GamePlayerStatus(parseInt(this.auth.getGameId()), 'CONNECT'));\n    }\n\n    canvasInit(player) {\n      let self = this;\n      let stage = new createjs.Stage(document.getElementById(`${player}`));\n      this.playerCanvases.set(player, stage);\n      createjs.Ticker.on('tick', () => {\n        stage.update();\n      });\n      let shape = new createjs.Shape();\n      let oldLocation;\n      let drawing = false;\n      createjs.Touch.enable(stage, false, true);\n      shape.graphics.beginFill(\"#EAEEEF\").drawRect(0, 0, 300, 400).endFill();\n      stage.addChild(shape);\n      this.game.addGameActionCallback(action => {\n        if (player === self.currentJudge) {\n          return;\n        }\n\n        if (player === action.canvas) {\n          oldLocation = action.from;\n          shape.graphics.setStrokeStyle(action.size, \"round\").beginStroke(action.color).moveTo(oldLocation.x, oldLocation.y).lineTo(action.to.x, action.to.y).endStroke();\n        }\n      });\n\n      let pressListener = e => {\n        if (player === self.currentJudge) {\n          return;\n        }\n\n        drawing = true;\n\n        if (oldLocation) {\n          self.game.sendGameAction(new GameAction(parseInt(self.auth.getGameId()), self.colorCode, self.brushSize, oldLocation, {\n            x: e.stageX,\n            y: e.stageY\n          }, self.activeCanvas.value));\n        }\n      };\n\n      shape.on('pressmove', pressListener);\n      shape.on('pressup', _ => {\n        if (player === self.currentJudge && !self.displayedJudgeCanvasWarning) {\n          self.toast.customToastMessage(\"You cannot draw on the judge's canvas\", 10000);\n          self.displayedJudgeCanvasWarning = true;\n          return;\n        }\n\n        drawing = false;\n      });\n      stage.on('stagemousemove', e => {\n        if (player === self.currentJudge) {\n          return;\n        }\n\n        if (!drawing) {\n          oldLocation = {\n            x: e.stageX,\n            y: e.stageY\n          };\n        }\n      });\n    }\n\n    addCallbacks() {\n      let self = this;\n      this.game.addGameStatusCallback(status => {\n        self.isJudge = status.judge === parseInt(self.auth.getGameId());\n        self.currentJudge = status.judge;\n        self.roundNumber = status.roundNumber;\n\n        if (status.type === GameStatusType.MATCH_START) {\n          self.clearCanvases();\n          self.currentMessageDetails = self.modal.getMatchStartDetails(self.isJudge);\n          self.messageShouldShow = true;\n        } else if (status.type === GameStatusType.GAME_END) {\n          console.log('trying to end the game (successfully? idk)');\n          /*\r\n          Doing this because even though the game service casts the JSON payload to the status object, the map inside\r\n          does not have the functions of a normal map so I need to convert it to a real map. This is real dumb.\r\n           */\n\n          let scoresMap = new Map();\n          let scores = status.scores;\n\n          for (let user in scores) {\n            scoresMap.set(self.userConnectedStatus.get(parseInt(user)).user.name, scores[user]);\n          }\n\n          self.modal.presentGameOverModal(new Map([...scoresMap].sort((a, b) => b[1] - a[1]).slice(0, 3))).then(_ => {\n            self.router.navigate(['']);\n          });\n        } else if (status.type === GameStatusType.MATCH_END) {\n          self.currentMessageDetails = self.modal.getMatchEndDetails(self.isJudge, self.getCanvasUrlMap());\n          self.messageShouldShow = true;\n        } else if (status.type === GameStatusType.GAME_PAUSE) {\n          self.pauseEvent.next(true);\n\n          if (self.messageShouldShow) {\n            self.savedMessage = self.currentMessageDetails;\n          }\n\n          self.currentMessageDetails = self.modal.getMatchPauseDetails();\n          self.messageShouldShow = true;\n        } else if (status.type === GameStatusType.GAME_UNPAUSE) {\n          let pauseStatus = status;\n\n          if (pauseStatus.playersHaveLeft) {\n            if (!pauseStatus.leavingPlayers.includes(parseInt(self.auth.getGameId()))) {\n              let message = self.game.connectedPlayerCount < 3 ? 'Not enough players left to complete the game.' : 'A player left due to inactivity.';\n              self.toast.customToastMessage(message);\n\n              if (self.game.connectedPlayerCount < 3) {\n                self.leaveGame();\n              }\n            } else if (pauseStatus.leavingPlayers.includes(parseInt(self.auth.getGameId()))) {\n              self.toast.customToastMessage('Kicked due to inactivity.');\n              self.leaveGame();\n            }\n          }\n\n          self.pauseEvent.next(false);\n\n          if (self.savedMessage) {\n            self.currentMessageDetails = self.savedMessage;\n          } else {\n            self.messageShouldShow = false;\n          }\n        }\n      });\n      this.game.addGameScoreCallback(score => {\n        if (score.subject === parseInt(self.auth.getGameId())) {\n          self.score = score.score;\n        }\n      });\n      this.game.addJudgeActionCallback(action => {\n        if (action.type === GameJudgeActionType.CHOSE_SOMETHING_TO_DRAW) {\n          self.currentMessageDetails = self.modal.getJudgeRequestDetails(self.isJudge, action.drawing);\n          self.startEvent.next();\n          self.messageShouldShow = true;\n        } else if (action.type === GameJudgeActionType.JUDGED) {\n          self.currentMessageDetails = self.modal.getMatchResultsDetails(self.isJudge, action.winner);\n          self.messageShouldShow = true;\n        }\n      });\n      this.game.addGamePlayerUpdateCallback(update => {\n        if (update.status === 'DISCONNECT') {\n          let canvas = this.playerCanvases.get(update.subject);\n          GamePage.setCanvasEnabled(canvas, false);\n          this.playerCanvases.delete(update.subject);\n          this.initCanvasRotation();\n        } else if (update.status === 'CONNECT' && !this.playerCanvases.has(update.subject)) {\n          this.canvasInit(update.subject);\n          this.initCanvasRotation();\n        }\n\n        this.userConnectedStatus = this.game.userConnectedStatus;\n      });\n    }\n\n    onClickEraser() {\n      this.eraserSelected = !this.eraserSelected;\n\n      if (this.eraserSelected) {\n        this.colorCode = '#EAEEEF';\n      } else {\n        this.colorCode = this.colorPickerSelection;\n      }\n    }\n\n    goToNextCanvas() {\n      this.activeCanvas = this.activeCanvas.next;\n      this.disableInactiveCanvases();\n    }\n\n    goToPreviousCanvas() {\n      this.activeCanvas = this.activeCanvas.previous;\n      this.disableInactiveCanvases();\n    }\n\n    disableInactiveCanvases() {\n      for (let canvasPlayer of this.playerCanvases.entries()) {\n        let enabled = canvasPlayer[0] === this.activeCanvas.value;\n        let canvas = canvasPlayer[1];\n        GamePage.setCanvasEnabled(canvas, enabled);\n      }\n    }\n\n    static setCanvasEnabled(canvas, enabled) {\n      canvas.enableDOMEvents(enabled);\n\n      for (let child of canvas.children) {\n        child.mouseEnabled = enabled;\n      }\n    }\n\n    clearCanvases() {\n      for (let canvas of this.playerCanvases.values()) {\n        for (let child of canvas.children) {\n          child.graphics.beginFill(\"#EAEEEF\").drawRect(0, 0, 300, 400).endFill();\n        }\n      }\n    }\n\n    getCanvasUrlMap() {\n      let urls = new Map();\n\n      for (let canvas of this.playerCanvases.keys()) {\n        if (canvas !== this.currentJudge) {\n          urls.set(canvas, document.getElementById(canvas + \"\").toDataURL('image/png'));\n        }\n      }\n\n      return urls;\n    }\n\n    onMessageBackDropClick() {\n      if (this.currentMessageDetails.dismissible) {\n        this.messageShouldShow = false;\n      }\n    }\n\n    leaveGame(callback = function () {}) {\n      this.game.clearResourcesOnComplete();\n      this.router.navigate(['/home']).then(callback);\n    }\n\n  }\n\n  GamePage.ɵfac = function GamePage_Factory(t) {\n    return new (t || GamePage)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.GameMessageService), i0.ɵɵdirectiveInject(i3.ToastService), i0.ɵɵdirectiveInject(i4.AuthService), i0.ɵɵdirectiveInject(i5.GameService), i0.ɵɵdirectiveInject(i1.ActivatedRoute));\n  };\n\n  GamePage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: GamePage,\n    selectors: [[\"app-game\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 46,\n    vars: 26,\n    consts: [[\"color\", \"primary\"], [\"slot\", \"start\"], [\"id\", \"game-toolbar-content\"], [3, \"pauseEvent\", \"startEvent\", \"timePerRound\"], [\"id\", \"game-message-display\"], [3, \"ionBackdropTap\", \"click\", 4, \"ngIf\"], [\"id\", \"game-message-content\", 3, \"messageDetails\", 4, \"ngIf\"], [\"id\", \"app-background\", \"src\", \"assets/images/background.png\", \"alt\", \"background\"], [\"id\", \"wrapper\"], [\"id\", \"center-screen\"], [\"id\", \"left-arrow-wrapper\", 1, \"arrow-wrapper\"], [\"id\", \"left-arrow\", \"width\", \"12\", \"height\", \"18\", \"viewBox\", \"0 0 12 18\", \"fill\", \"none\", \"xmlns\", \"http://www.w3.org/2000/svg\", 3, \"click\"], [\"d\", \"M11.415 2.115L9.29999 0L0.299988 9L9.29999 18L11.415 15.885L4.54499 9L11.415 2.115Z\", \"fill\", \"black\"], [\"id\", \"active-canvas-wrapper\"], [3, \"id\", \"hidden\", 4, \"ngFor\", \"ngForOf\"], [\"id\", \"right-arrow-wrapper\", 1, \"arrow-wrapper\"], [\"id\", \"right-arrow\", \"width\", \"13\", \"height\", \"18\", \"viewBox\", \"0 0 13 18\", \"fill\", \"none\", \"xmlns\", \"http://www.w3.org/2000/svg\", 3, \"click\"], [\"d\", \"M3.02998 0L0.914978 2.115L7.78498 9L0.914978 15.885L3.02998 18L12.03 9L3.02998 0Z\", \"fill\", \"black\"], [\"id\", \"options\"], [\"id\", \"money\", \"color\", \"success\", \"slot\", \"end\"], [\"id\", \"controls\"], [\"id\", \"pallet\"], [3, \"selectedColor\", \"color\", \"click\"], [\"id\", \"lower-controls\"], [\"xmlns\", \"http://www.w3.org/2000/svg\", \"width\", \"34px\", \"height\", \"55px\", \"viewBox\", \"0 0 34 55\", 3, \"click\"], [\"id\", \"surface1\"], [\"fill\", \"#F18CB9\", \"d\", \"M 0.5 95.101562 L 0.5 1.242188 L 33.5 19.039062 L 33.5 109.132812 Z M 0.5 95.101562 \", \"transform\", \"matrix(1,0,0,0.5,0,0)\"], [\"id\", \"fill-settings\"], [\"min\", \"1\", \"max\", \"150\", \"color\", \"light\", 3, \"ngModel\", \"ngModelChange\"], [\"id\", \"brush-icon\", \"slot\", \"start\", \"size\", \"small\", \"name\", \"brush-outline\"], [3, \"ionBackdropTap\", \"click\"], [\"id\", \"game-message-content\", 3, \"messageDetails\"], [3, \"id\", \"hidden\"]],\n    template: function GamePage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\");\n        i0.ɵɵelementStart(1, \"ion-toolbar\", 0);\n        i0.ɵɵelement(2, \"ion-menu-button\", 1);\n        i0.ɵɵelementStart(3, \"div\", 2);\n        i0.ɵɵelement(4, \"app-game-clock\", 3);\n        i0.ɵɵelementStart(5, \"h3\");\n        i0.ɵɵtext(6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"ion-content\");\n        i0.ɵɵelementStart(8, \"div\", 4);\n        i0.ɵɵtemplate(9, GamePage_ion_backdrop_9_Template, 1, 1, \"ion-backdrop\", 5);\n        i0.ɵɵtemplate(10, GamePage_app_game_message_10_Template, 1, 3, \"app-game-message\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"div\");\n        i0.ɵɵelement(12, \"img\", 7);\n        i0.ɵɵelementStart(13, \"div\", 8);\n        i0.ɵɵelementStart(14, \"div\", 9);\n        i0.ɵɵelementStart(15, \"div\", 10);\n        i0.ɵɵnamespaceSVG();\n        i0.ɵɵelementStart(16, \"svg\", 11);\n        i0.ɵɵlistener(\"click\", function GamePage_Template__svg_svg_click_16_listener() {\n          return ctx.goToPreviousCanvas();\n        });\n        i0.ɵɵelement(17, \"path\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵnamespaceHTML();\n        i0.ɵɵelementStart(18, \"div\", 13);\n        i0.ɵɵelementStart(19, \"header\");\n        i0.ɵɵelementStart(20, \"h1\");\n        i0.ɵɵtext(21);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"h3\");\n        i0.ɵɵtext(23);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(24, GamePage_canvas_24_Template, 1, 2, \"canvas\", 14);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"div\", 15);\n        i0.ɵɵnamespaceSVG();\n        i0.ɵɵelementStart(26, \"svg\", 16);\n        i0.ɵɵlistener(\"click\", function GamePage_Template__svg_svg_click_26_listener() {\n          return ctx.goToNextCanvas();\n        });\n        i0.ɵɵelement(27, \"path\", 17);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵnamespaceHTML();\n        i0.ɵɵelementStart(28, \"div\", 18);\n        i0.ɵɵelementStart(29, \"ion-button\", 19);\n        i0.ɵɵtext(30);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(31, \"div\", 20);\n        i0.ɵɵelementStart(32, \"div\", 21);\n        i0.ɵɵelementStart(33, \"app-pallet-color\", 22);\n        i0.ɵɵlistener(\"click\", function GamePage_Template_app_pallet_color_click_33_listener() {\n          return ctx.colorCode = ctx.colorsOnPallet[0];\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(34, \"app-pallet-color\", 22);\n        i0.ɵɵlistener(\"click\", function GamePage_Template_app_pallet_color_click_34_listener() {\n          return ctx.colorCode = ctx.colorsOnPallet[1];\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(35, \"app-pallet-color\", 22);\n        i0.ɵɵlistener(\"click\", function GamePage_Template_app_pallet_color_click_35_listener() {\n          return ctx.colorCode = ctx.colorsOnPallet[2];\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(36, \"app-pallet-color\", 22);\n        i0.ɵɵlistener(\"click\", function GamePage_Template_app_pallet_color_click_36_listener() {\n          return ctx.colorCode = ctx.colorsOnPallet[3];\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(37, \"app-pallet-color\", 22);\n        i0.ɵɵlistener(\"click\", function GamePage_Template_app_pallet_color_click_37_listener() {\n          return ctx.colorCode = ctx.colorsOnPallet[4];\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(38, \"app-pallet-color\", 22);\n        i0.ɵɵlistener(\"click\", function GamePage_Template_app_pallet_color_click_38_listener() {\n          return ctx.colorCode = ctx.colorsOnPallet[5];\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(39, \"div\", 23);\n        i0.ɵɵnamespaceSVG();\n        i0.ɵɵelementStart(40, \"svg\", 24);\n        i0.ɵɵlistener(\"click\", function GamePage_Template__svg_svg_click_40_listener() {\n          return ctx.onClickEraser();\n        });\n        i0.ɵɵelementStart(41, \"g\", 25);\n        i0.ɵɵelement(42, \"path\", 26);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵnamespaceHTML();\n        i0.ɵɵelementStart(43, \"div\", 27);\n        i0.ɵɵelementStart(44, \"ion-range\", 28);\n        i0.ɵɵlistener(\"ngModelChange\", function GamePage_Template_ion_range_ngModelChange_44_listener($event) {\n          return ctx.brushSize = $event;\n        });\n        i0.ɵɵelement(45, \"ion-icon\", 29);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        let tmp_6_0;\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"pauseEvent\", ctx.pauseEvent)(\"startEvent\", ctx.startEvent)(\"timePerRound\", ctx.game.settings.seconds);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate2(\"\", ctx.roundNumber + 1, \"/\", ctx.game.settings.rounds, \"\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.messageShouldShow);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.messageShouldShow);\n        i0.ɵɵadvance(11);\n        i0.ɵɵtextInterpolate1(\"\", ctx.userConnectedStatus ? (tmp_6_0 = ctx.userConnectedStatus.get(ctx.activeCanvas.value)) == null ? null : tmp_6_0.user.name : \"\", \"'s Canvas\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"Draw: \", (ctx.currentMessageDetails.judgeRequest && ctx.currentMessageDetails.judgeRequest.trim() !== \"\" ? ctx.currentMessageDetails.judgeRequest : \"not yet announced\") + \".\", \"\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.playerCanvases.keys());\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate1(\" $\", ctx.score, \" \");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"selectedColor\", ctx.colorCode)(\"color\", ctx.colorsOnPallet[0]);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"selectedColor\", ctx.colorCode)(\"color\", ctx.colorsOnPallet[1]);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"selectedColor\", ctx.colorCode)(\"color\", ctx.colorsOnPallet[2]);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"selectedColor\", ctx.colorCode)(\"color\", ctx.colorsOnPallet[3]);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"selectedColor\", ctx.colorCode)(\"color\", ctx.colorsOnPallet[4]);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"selectedColor\", ctx.colorCode)(\"color\", ctx.colorsOnPallet[5]);\n        i0.ɵɵadvance(4);\n        i0.ɵɵstyleProp(\"stroke\", ctx.eraserSelected ? \"white\" : \"black\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngModel\", ctx.brushSize);\n      }\n    },\n    directives: [i6.IonHeader, i6.IonToolbar, i6.IonMenuButton, i7.GameClockComponent, i6.IonContent, i8.NgIf, i8.NgForOf, i6.IonButton, i9.PalletColorComponent, i6.IonRange, i6.SelectValueAccessor, i10.NgControlStatus, i10.NgModel, i6.IonIcon, i6.IonBackdrop, i11.GameMessageComponent],\n    styles: [\"h1[_ngcontent-%COMP%]{font-family:Marker,serif}ion-toolbar[_ngcontent-%COMP%]{display:flex;align-items:center}#wrapper[_ngcontent-%COMP%]{position:absolute;left:0;top:0;width:100%;height:100%;overflow:auto;display:flex;justify-content:end;flex-direction:column;border:1px solid black}#wrapper[_ngcontent-%COMP%]   #center-screen[_ngcontent-%COMP%]{height:80%;width:100%;display:flex;flex-direction:row;align-items:center;min-width:0}#wrapper[_ngcontent-%COMP%]   #center-screen[_ngcontent-%COMP%]   #active-canvas-wrapper[_ngcontent-%COMP%]{flex-basis:90%;height:100%;z-index:0;display:flex;align-items:end;justify-content:center;flex-direction:column}#wrapper[_ngcontent-%COMP%]   #center-screen[_ngcontent-%COMP%]   #active-canvas-wrapper[_ngcontent-%COMP%]   header[_ngcontent-%COMP%]{width:90%;margin:0 auto;padding-top:50px;display:flex;flex-direction:row}#wrapper[_ngcontent-%COMP%]   #center-screen[_ngcontent-%COMP%]   #active-canvas-wrapper[_ngcontent-%COMP%]   header[_ngcontent-%COMP%]   *[_ngcontent-%COMP%]{display:block}#wrapper[_ngcontent-%COMP%]   #center-screen[_ngcontent-%COMP%]   #active-canvas-wrapper[_ngcontent-%COMP%]   header[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%]{margin-left:auto;font-size:1em;text-align:center}#wrapper[_ngcontent-%COMP%]   #center-screen[_ngcontent-%COMP%]   #active-canvas-wrapper[_ngcontent-%COMP%]   canvas[_ngcontent-%COMP%]{margin:0 auto;width:90%;height:83%;border:5px solid black;box-shadow:0 2px 5px}#wrapper[_ngcontent-%COMP%]   #center-screen[_ngcontent-%COMP%]   .arrow-wrapper[_ngcontent-%COMP%]{flex-basis:5%;display:flex}#wrapper[_ngcontent-%COMP%]   #center-screen[_ngcontent-%COMP%]   #right-arrow-wrapper[_ngcontent-%COMP%]{justify-content:flex-end}#wrapper[_ngcontent-%COMP%]   #controls[_ngcontent-%COMP%]{display:flex;flex-direction:column;grid-gap:10px;gap:10px;background-color:#483a3a;border:1px solid black;border-top:2px solid black;align-items:center}#wrapper[_ngcontent-%COMP%]   #controls[_ngcontent-%COMP%]   #pallet[_ngcontent-%COMP%]{margin:10px auto;display:flex;flex-direction:row;width:317px;grid-gap:5px;gap:5px}#wrapper[_ngcontent-%COMP%]   #controls[_ngcontent-%COMP%]   #pallet[_ngcontent-%COMP%]   app-pallet-color[_ngcontent-%COMP%]{flex-basis:16.66%;flex-grow:1;flex-shrink:1}#wrapper[_ngcontent-%COMP%]   #controls[_ngcontent-%COMP%]   #lower-controls[_ngcontent-%COMP%]{width:317px;display:flex;flex-direction:row;justify-content:center}#wrapper[_ngcontent-%COMP%]   #controls[_ngcontent-%COMP%]   #fill-settings[_ngcontent-%COMP%]{flex-basis:85%}#wrapper[_ngcontent-%COMP%]   #controls[_ngcontent-%COMP%]   #fill-settings[_ngcontent-%COMP%]   ion-range[_ngcontent-%COMP%]   #brush-icon[_ngcontent-%COMP%]{color:#fff}#wrapper[_ngcontent-%COMP%]   #options[_ngcontent-%COMP%]{display:flex}#wrapper[_ngcontent-%COMP%]   #options[_ngcontent-%COMP%]   #money[_ngcontent-%COMP%]{margin-left:auto}#game-toolbar-content[_ngcontent-%COMP%]{width:100%;height:100%;display:flex;flex-direction:row;align-items:center;justify-content:center}#game-toolbar-content[_ngcontent-%COMP%]   app-game-clock[_ngcontent-%COMP%]{flex-grow:1}#game-toolbar-content[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%]{flex-grow:1;text-align:right;margin-right:8px;font-family:Marker,sans-serif}#game-message-display[_ngcontent-%COMP%]   #game-message-content[_ngcontent-%COMP%]{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);z-index:10}@media only screen and (max-width: 768px){ion-toolbar[_ngcontent-%COMP%]{height:75px}#wrapper[_ngcontent-%COMP%]   #center-screen[_ngcontent-%COMP%]   #active-canvas-wrapper[_ngcontent-%COMP%]{align-items:center}#wrapper[_ngcontent-%COMP%]   #center-screen[_ngcontent-%COMP%]   #active-canvas-wrapper[_ngcontent-%COMP%]   header[_ngcontent-%COMP%]{display:block;padding-top:0}}\"],\n    data: {\n      animation: [fadeAnimation, fallOutAnimation, fallInAnimation]\n    }\n  });\n  return GamePage;\n})();","map":null,"metadata":{},"sourceType":"module"}