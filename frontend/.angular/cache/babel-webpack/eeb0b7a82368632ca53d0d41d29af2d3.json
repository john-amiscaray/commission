{"ast":null,"code":"import { environment } from \"../../environments/environment\";\nimport { LobbyStatus, LobbyStatusType } from \"../dtos/LobbyStatus\";\nimport { RxStomp } from \"@stomp/rx-stomp\";\nimport * as SockJS from 'sockjs-client';\nimport { GameSettings } from \"../dtos/GameSettings\";\nimport { GameIdentity } from \"../dtos/GameIdentity\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"./toast.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common/http\";\nimport * as i5 from \"./game.service\";\nimport * as i6 from \"./profile-picture.service\";\nexport let LobbyService = /*#__PURE__*/(() => {\n  class LobbyService {\n    constructor(auth, toast, router, http, game, pfp) {\n      this.auth = auth;\n      this.toast = toast;\n      this.router = router;\n      this.http = http;\n      this.game = game;\n      this.pfp = pfp;\n      this._roomCode = null;\n      this._participants = [];\n      this.lobbyStatusCallbacks = [];\n      this.rxStompClient = new RxStomp();\n    }\n\n    get participants() {\n      return this._participants;\n    }\n\n    roomExists(roomCode) {\n      return this.http.get(`${environment.apiUrl}/room/${roomCode}/exists`);\n    }\n\n    configureTestSettings() {\n      this._roomCode = 'test';\n      this._participants = [parseInt(this.auth.getGameId()), 420, 69, 12];\n      this._settings = new GameSettings(3);\n      this.rxStompClient.configure({\n        webSocketFactory: function () {\n          return new SockJS(environment.sockJSEndpoint);\n        }\n      });\n      this.rxStompClient.activate();\n    }\n\n    get settings() {\n      return this._settings;\n    }\n\n    get roomCode() {\n      return this._roomCode;\n    }\n\n    resetGameCode() {\n      this._roomCode = null;\n      this.auth.resetRoomCode();\n    }\n\n    connectedToLobby() {\n      console.log(this.roomCode);\n      return this.roomCode !== null && !this.game.inActiveGame;\n    }\n\n    leaveLobby() {\n      if (!this.connectedToLobby()) {\n        return;\n      }\n\n      this.sendStatusMessage(new LobbyStatus(LobbyStatusType.DISCONNECT, parseInt(this.auth.getGameId())));\n      this.rxStompClient.deactivate();\n      this.unSubscribeFromLobby();\n      this._settings = null;\n      this._roomCode = null; // If we left at the lobby page, then we keep the lobby code to try to restore the game later\n\n      if (this.router.url !== '/lobby') {\n        this.resetGameCode();\n      } else {\n        console.log('-------Stored the game stuff for safety-------');\n      }\n\n      console.log(`-------left game from ${this.router.url} |  ${this.router.url === '/lobby'}-------`);\n    }\n\n    tryRestoreGameOrLeave(onSuccess = _ => {}) {\n      this._roomCode = this.auth.getRoomCode();\n      let self = this;\n\n      try {\n        this.auth.generateAndSaveUUID(() => {\n          this.joinRoom(this._roomCode, onSuccess);\n        });\n      } catch (e) {\n        self.leaveLobby();\n        self.router.navigate(['home']).then(() => {\n          self.toast.customToastMessage('Failed to restore the game. Please start a new one');\n        });\n      }\n    }\n\n    requestLobbyStart(gameSettings, roomCodeCallBack, errorCallback = () => {}) {\n      let self = this;\n      this._settings = gameSettings;\n      this.http.post(`${environment.apiUrl}/request-new-game`, gameSettings, {\n        headers: {\n          'Accept': 'text/plain'\n        },\n        responseType: 'text'\n      }).subscribe(res => {\n        self.joinRoom(res, roomCodeCallBack, errorCallback);\n      }, error => {\n        self.toast.failureToast();\n        errorCallback(error);\n      });\n    }\n\n    registerGameId(roomCode) {\n      return this.http.post(`${environment.apiUrl}/room/${roomCode}/game-identity`, new GameIdentity(-1, this.pfp.getProfilePicture(), this.auth.getName(), this.auth.getUUID()));\n    }\n\n    joinRoom(roomCode, gameIdentityCallback, errorCallback = e => {\n      console.log(e);\n    }) {\n      this.registerGameId(roomCode).subscribe(res => {\n        this._roomCode = roomCode;\n        this.auth.setGameId(res.id);\n        this.auth.setRoomCode(roomCode);\n        this.auth.setJWT(res.token);\n        this.establishConnection();\n        gameIdentityCallback(res);\n      }, errorCallback);\n    }\n\n    establishConnection() {\n      let self = this;\n      this.rxStompClient.configure({\n        webSocketFactory: function () {\n          return new SockJS(environment.sockJSEndpoint);\n        }\n      });\n      this.rxStompClient.activate();\n      this.lobbySubscription = this.rxStompClient.watch({\n        destination: environment.getLobbyStatusReceiveEndpoint(self._roomCode)\n      }).subscribe(res => {\n        let body = JSON.parse(res.body);\n\n        if (body.settings != self._settings) {\n          self._settings = body.settings;\n          console.log(`--------The settings are ${JSON.stringify(self._settings)}--------`);\n        }\n\n        if (body.statusType === LobbyStatusType.CONNECT) {\n          self._participants = body.participants;\n        }\n\n        for (let gameStatusCallBack of this.lobbyStatusCallbacks) {\n          gameStatusCallBack(body);\n        }\n      }, error => {\n        console.log(error);\n      });\n    }\n\n    addLobbyStatusCallback(callback) {\n      this.lobbyStatusCallbacks.push(callback);\n    }\n\n    kickPlayer(id) {\n      this.sendStatusMessage(new LobbyStatus(LobbyStatusType.KICK_PLAYER, id));\n    }\n\n    requestStart() {\n      this.sendStatusMessage(new LobbyStatus(LobbyStatusType.REQUEST_START, parseInt(this.auth.getGameId())));\n    }\n\n    resetLobbyCallbacks() {\n      this.lobbyStatusCallbacks = [];\n    }\n\n    unSubscribeFromLobby() {\n      if (this.lobbySubscription) {\n        this.lobbySubscription.unsubscribe();\n      }\n\n      this.resetLobbyCallbacks();\n    }\n\n    sendStatusMessage(action) {\n      let self = this;\n      this.rxStompClient.publish({\n        destination: environment.getLobbyStatusSendEndpoint(self._roomCode),\n        body: JSON.stringify(action),\n        headers: {\n          token: self.auth.getJWT()\n        }\n      });\n    } // START GAME\n\n\n    startGame(lobbyStatus) {\n      this.unSubscribeFromLobby();\n      this.game.init(this.roomCode, this._settings, lobbyStatus, this.participants);\n    }\n\n  }\n\n  LobbyService.ɵfac = function LobbyService_Factory(t) {\n    return new (t || LobbyService)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.ToastService), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.HttpClient), i0.ɵɵinject(i5.GameService), i0.ɵɵinject(i6.ProfilePictureService));\n  };\n\n  LobbyService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LobbyService,\n    factory: LobbyService.ɵfac,\n    providedIn: 'root'\n  });\n  return LobbyService;\n})();","map":null,"metadata":{},"sourceType":"module"}