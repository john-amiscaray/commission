{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { GameStatusType } from \"../dtos/GameStatus\";\nimport { GameOverComponent } from \"../modules/game/game-over/game-over.component\";\nimport * as createjs from 'createjs-module';\nimport { GameMessageDetails } from \"../dtos/GameMessageDetails\";\nimport { GameMessageScreen } from \"../modules/game/game-message/game-message-screen-enum\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"./auth.service\";\nimport * as i3 from \"./game.service\";\nlet queue;\nwindow.createjs = createjs;\nexport let GameMessageService = /*#__PURE__*/(() => {\n  class GameMessageService {\n    constructor(modalController, auth, game) {\n      this.modalController = modalController;\n      this.auth = auth;\n      this.game = game;\n      queue = new createjs.LoadQueue();\n      let manifest = [{\n        id: 'end-music',\n        src: 'assets/sounds/game-end.wav'\n      }];\n      queue.installPlugin(createjs.Sound);\n      queue.loadManifest(manifest);\n    }\n\n    getMatchStartDetails(isJudge) {\n      return new GameMessageDetails('Match Started!', isJudge ? 'You are the judge! You will decide the fate of the contestants this match.' : 'You are an artist! You will draw what the judge wants you to draw and sabotage other artists to win money. Wait for the judge to pick what you will to draw', GameStatusType.MATCH_START, isJudge, null, null, false);\n    }\n\n    getMatchEndDetails(isJudge, drawingUrlMap) {\n      return new GameMessageDetails(\"Time's up!\", isJudge ? 'The match ended! Pick who drew your request the best!' : \"Looks like time's up! Wait for the judge to decide your fate\", GameStatusType.MATCH_END, isJudge, null, drawingUrlMap, false);\n    }\n\n    getMatchPauseDetails() {\n      return new GameMessageDetails(`Waiting for a player to reconnect`, \"A player was disconnected so we have to pause for a bit to wait for them to return.\", GameStatusType.GAME_PAUSE, false, null, null, false);\n    }\n\n    getJudgeRequestDetails(isJudge, request) {\n      return new GameMessageDetails(isJudge ? 'Wait for the artists to finish' : 'Start Drawing!', '', GameMessageScreen.JUDGE_REQUEST, isJudge, request, null, !isJudge);\n    }\n\n    getMatchResultsDetails(isJudge, winner) {\n      return new GameMessageDetails('The Judge Has Spoken!', isJudge ? `You've made your decision! The winner here is ${this.game.userConnectedStatus.get(winner).user.name}` : winner === parseInt(this.auth.getGameId()) ? 'Congrats you won the match! You will be awarded $500 for your ' + 'masterpiece. Keep it up!' : 'You lost this match. Better luck next time.', GameMessageScreen.MATCH_RESULTS, isJudge, null, null, false);\n    }\n\n    presentGameOverModal(scores) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const modal = yield this.modalController.create({\n          component: GameOverComponent,\n          cssClass: 'game-modal',\n          componentProps: {\n            topThree: scores\n          },\n          backdropDismiss: true,\n          swipeToClose: true\n        });\n        yield this.modalController.getTop().then(modal => {\n          modal.dismiss();\n        });\n        return yield modal.present().then(_ => {\n          createjs.Sound.play('end-music');\n          this.game.clearResourcesOnComplete();\n        });\n      });\n    }\n\n    presentTestGameOverModal() {\n      return __awaiter(this, void 0, void 0, function* () {\n        yield this.presentGameOverModal(new Map([['Bobbert', 200], ['Jimboo', 180], ['Larry', 50]]));\n      });\n    }\n\n  }\n\n  GameMessageService.ɵfac = function GameMessageService_Factory(t) {\n    return new (t || GameMessageService)(i0.ɵɵinject(i1.ModalController), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i3.GameService));\n  };\n\n  GameMessageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GameMessageService,\n    factory: GameMessageService.ɵfac,\n    providedIn: 'root'\n  });\n  return GameMessageService;\n})();","map":null,"metadata":{},"sourceType":"module"}