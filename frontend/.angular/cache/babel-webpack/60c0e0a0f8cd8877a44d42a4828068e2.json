{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { WebPlugin } from './index';\n\nvar StoragePluginWeb =\n/** @class */\nfunction (_super) {\n  __extends(StoragePluginWeb, _super);\n\n  function StoragePluginWeb() {\n    var _this = _super.call(this, {\n      name: 'Storage',\n      platforms: ['web']\n    }) || this;\n\n    _this.KEY_PREFIX = '_cap_';\n    return _this;\n  }\n\n  StoragePluginWeb.prototype.get = function (options) {\n    var _this = this;\n\n    return new Promise(function (resolve, _reject) {\n      resolve({\n        value: window.localStorage.getItem(_this.makeKey(options.key))\n      });\n    });\n  };\n\n  StoragePluginWeb.prototype.set = function (options) {\n    var _this = this;\n\n    return new Promise(function (resolve, _reject) {\n      window.localStorage.setItem(_this.makeKey(options.key), options.value);\n      resolve();\n    });\n  };\n\n  StoragePluginWeb.prototype.remove = function (options) {\n    var _this = this;\n\n    return new Promise(function (resolve, _reject) {\n      window.localStorage.removeItem(_this.makeKey(options.key));\n      resolve();\n    });\n  };\n\n  StoragePluginWeb.prototype.keys = function () {\n    var _this = this;\n\n    return new Promise(function (resolve, _reject) {\n      resolve({\n        keys: Object.keys(localStorage).filter(function (k) {\n          return _this.isKey(k);\n        }).map(function (k) {\n          return _this.getKey(k);\n        })\n      });\n    });\n  };\n\n  StoragePluginWeb.prototype.clear = function () {\n    var _this = this;\n\n    return new Promise(function (resolve, _reject) {\n      Object.keys(localStorage).filter(function (k) {\n        return _this.isKey(k);\n      }).forEach(function (k) {\n        return window.localStorage.removeItem(k);\n      });\n      resolve();\n    });\n  };\n\n  StoragePluginWeb.prototype.makeKey = function (key) {\n    return this.KEY_PREFIX + key;\n  };\n\n  StoragePluginWeb.prototype.isKey = function (key) {\n    return key.indexOf(this.KEY_PREFIX) === 0;\n  };\n\n  StoragePluginWeb.prototype.getKey = function (key) {\n    return key.substr(this.KEY_PREFIX.length);\n  };\n\n  return StoragePluginWeb;\n}(WebPlugin);\n\nexport { StoragePluginWeb };\nvar Storage = new StoragePluginWeb();\nexport { Storage }; //# sourceMappingURL=storage.js.map","map":null,"metadata":{},"sourceType":"module"}