{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { WebPlugin } from './index';\n\nvar NetworkPluginWeb =\n/** @class */\nfunction (_super) {\n  __extends(NetworkPluginWeb, _super);\n\n  function NetworkPluginWeb() {\n    var _this = _super.call(this, {\n      name: 'Network',\n      platforms: ['web']\n    }) || this;\n\n    _this.listenerFunction = null;\n    return _this;\n  }\n\n  NetworkPluginWeb.prototype.getStatus = function () {\n    return new Promise(function (resolve, reject) {\n      if (!window.navigator) {\n        reject('Network info not available');\n        return;\n      }\n\n      var connected = window.navigator.onLine;\n      var connection = window.navigator.connection || window.navigator.mozConnection || window.navigator.webkitConnection;\n      var connectionType = connection ? connection.type || connection.effectiveType : 'wifi';\n      resolve({\n        connected: connected,\n        connectionType: connected ? connectionType : 'none'\n      });\n    });\n  };\n\n  NetworkPluginWeb.prototype.addListener = function (eventName, listenerFunc) {\n    var thisRef = this;\n    var connection = window.navigator.connection || window.navigator.mozConnection || window.navigator.webkitConnection;\n    var connectionType = connection ? connection.type || connection.effectiveType : 'wifi';\n    var onlineBindFunc = listenerFunc.bind(thisRef, {\n      connected: true,\n      connectionType: connectionType\n    });\n    var offlineBindFunc = listenerFunc.bind(thisRef, {\n      connected: false,\n      connectionType: 'none'\n    });\n\n    if (eventName.localeCompare('networkStatusChange') === 0) {\n      window.addEventListener('online', onlineBindFunc);\n      window.addEventListener('offline', offlineBindFunc);\n      return {\n        remove: function () {\n          window.removeEventListener('online', onlineBindFunc);\n          window.removeEventListener('offline', offlineBindFunc);\n        }\n      };\n    }\n  };\n\n  return NetworkPluginWeb;\n}(WebPlugin);\n\nexport { NetworkPluginWeb };\nvar Network = new NetworkPluginWeb();\nexport { Network }; //# sourceMappingURL=network.js.map","map":null,"metadata":{},"sourceType":"module"}