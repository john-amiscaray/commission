{"ast":null,"code":"import { environment } from \"../../environments/environment\";\nimport { ERROR_MESSAGES } from \"../constants/Constants\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./profile-picture.service\";\nimport * as i2 from \"./toast.service\";\nimport * as i3 from \"@angular/common/http\";\nimport * as i4 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(pfp, toast, http, router) {\n      this.pfp = pfp;\n      this.toast = toast;\n      this.http = http;\n      this.router = router;\n      this._uuidAttemptedToGenerate = false;\n    }\n\n    get uuidAttemptedToGenerate() {\n      return this._uuidAttemptedToGenerate;\n    }\n\n    setGameId(id) {\n      sessionStorage.setItem(AuthService.ID, `${id}`);\n    }\n\n    getGameId() {\n      return sessionStorage.getItem(AuthService.ID);\n    }\n\n    resetGameId() {\n      sessionStorage.removeItem(AuthService.ID);\n    }\n\n    setName(name) {\n      sessionStorage.setItem(AuthService.USERNAME, name);\n    }\n\n    getName() {\n      return sessionStorage.getItem(AuthService.USERNAME);\n    }\n\n    hasValidProfile() {\n      return this.getName() !== null && this.pfp.getProfilePicture() !== null;\n    }\n\n    presentBadProfileError() {\n      this.toast.customToastMessage('Please set your profile before entering a game');\n    }\n\n    getUserInfo(roomCode, id) {\n      return this.http.get(`${environment.apiUrl}/room/${roomCode}/player/${id}`);\n    }\n\n    setRoomCode(roomCode) {\n      sessionStorage.setItem(AuthService.ROOM_CODE, roomCode);\n    }\n\n    getRoomCode() {\n      return sessionStorage.getItem(AuthService.ROOM_CODE);\n    }\n\n    resetRoomCode() {\n      sessionStorage.removeItem(AuthService.ROOM_CODE);\n    }\n\n    getJWT() {\n      return sessionStorage.getItem(AuthService.JWT);\n    }\n\n    setJWT(token) {\n      sessionStorage.setItem(AuthService.JWT, token);\n    }\n\n    getUUID() {\n      return sessionStorage.getItem(AuthService.UUID);\n    }\n\n    static setUUID(uuid) {\n      sessionStorage.setItem(AuthService.UUID, uuid);\n    }\n\n    resetUUID() {\n      navigator.sendBeacon(`${environment.apiUrl}/logout-details?uuid=${this.getUUID()}`);\n      sessionStorage.removeItem(AuthService.UUID);\n      console.log('beacon request should have sent');\n    }\n\n    generateAndSaveUUID(then = () => {}) {\n      this.http.get(`${environment.apiUrl}/sessionId`, {\n        responseType: 'text'\n      }).subscribe(uuid => {\n        AuthService.setUUID(uuid);\n        this._uuidAttemptedToGenerate = true;\n        then();\n      }, _ => {\n        this.router.navigate(['error'], {\n          queryParams: {\n            error: ERROR_MESSAGES.FAILED_TO_GENERATE_UUID\n          }\n        });\n        this._uuidAttemptedToGenerate = true;\n        then();\n      });\n    }\n\n  }\n\n  AuthService.ID = 'id';\n  AuthService.USERNAME = 'username';\n  AuthService.ROOM_CODE = 'active room';\n  AuthService.JWT = 'jwt';\n  AuthService.UUID = 'uuid';\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.ProfilePictureService), i0.ɵɵinject(i2.ToastService), i0.ɵɵinject(i3.HttpClient), i0.ɵɵinject(i4.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}