{"ast":null,"code":"var WebPluginRegistry =\n/** @class */\nfunction () {\n  function WebPluginRegistry() {\n    this.plugins = {};\n    this.loadedPlugins = {};\n  }\n\n  WebPluginRegistry.prototype.addPlugin = function (plugin) {\n    this.plugins[plugin.config.name] = plugin;\n  };\n\n  WebPluginRegistry.prototype.getPlugin = function (name) {\n    return this.plugins[name];\n  };\n\n  WebPluginRegistry.prototype.loadPlugin = function (name) {\n    var plugin = this.getPlugin(name);\n\n    if (!plugin) {\n      console.error(\"Unable to load web plugin \" + name + \", no such plugin found.\");\n      return;\n    }\n\n    plugin.load();\n  };\n\n  WebPluginRegistry.prototype.getPlugins = function () {\n    var p = [];\n\n    for (var name_1 in this.plugins) {\n      p.push(this.plugins[name_1]);\n    }\n\n    return p;\n  };\n\n  return WebPluginRegistry;\n}();\n\nexport { WebPluginRegistry };\nvar WebPlugins = new WebPluginRegistry();\nexport { WebPlugins };\n\nvar WebPlugin =\n/** @class */\nfunction () {\n  function WebPlugin(config, pluginRegistry) {\n    this.config = config;\n    this.loaded = false;\n    this.listeners = {};\n    this.windowListeners = {};\n\n    if (!pluginRegistry) {\n      WebPlugins.addPlugin(this);\n    } else {\n      pluginRegistry.addPlugin(this);\n    }\n  }\n\n  WebPlugin.prototype.addWindowListener = function (handle) {\n    window.addEventListener(handle.windowEventName, handle.handler);\n    handle.registered = true;\n  };\n\n  WebPlugin.prototype.removeWindowListener = function (handle) {\n    if (!handle) {\n      return;\n    }\n\n    window.removeEventListener(handle.windowEventName, handle.handler);\n    handle.registered = false;\n  };\n\n  WebPlugin.prototype.addListener = function (eventName, listenerFunc) {\n    var _this = this;\n\n    var listeners = this.listeners[eventName];\n\n    if (!listeners) {\n      this.listeners[eventName] = [];\n    }\n\n    this.listeners[eventName].push(listenerFunc); // If we haven't added a window listener for this event and it requires one,\n    // go ahead and add it\n\n    var windowListener = this.windowListeners[eventName];\n\n    if (windowListener && !windowListener.registered) {\n      this.addWindowListener(windowListener);\n    }\n\n    return {\n      remove: function () {\n        _this.removeListener(eventName, listenerFunc);\n      }\n    };\n  };\n\n  WebPlugin.prototype.removeListener = function (eventName, listenerFunc) {\n    var listeners = this.listeners[eventName];\n\n    if (!listeners) {\n      return;\n    }\n\n    var index = listeners.indexOf(listenerFunc);\n    this.listeners[eventName].splice(index, 1); // If there are no more listeners for this type of event,\n    // remove the window listener\n\n    if (!this.listeners[eventName].length) {\n      this.removeWindowListener(this.windowListeners[eventName]);\n    }\n  };\n\n  WebPlugin.prototype.removeAllListeners = function () {\n    this.listeners = {};\n\n    for (var listener in this.windowListeners) {\n      this.removeWindowListener(this.windowListeners[listener]);\n    }\n\n    this.windowListeners = {};\n  };\n\n  WebPlugin.prototype.notifyListeners = function (eventName, data) {\n    var listeners = this.listeners[eventName];\n\n    if (listeners) {\n      listeners.forEach(function (listener) {\n        return listener(data);\n      });\n    }\n  };\n\n  WebPlugin.prototype.hasListeners = function (eventName) {\n    return !!this.listeners[eventName].length;\n  };\n\n  WebPlugin.prototype.registerWindowListener = function (windowEventName, pluginEventName) {\n    var _this = this;\n\n    this.windowListeners[pluginEventName] = {\n      registered: false,\n      windowEventName: windowEventName,\n      pluginEventName: pluginEventName,\n      handler: function (event) {\n        _this.notifyListeners(pluginEventName, event);\n      }\n    };\n  };\n\n  WebPlugin.prototype.requestPermissions = function () {\n    if (Capacitor.isNative) {\n      return Capacitor.nativePromise(this.config.name, 'requestPermissions', {});\n    } else {\n      return Promise.resolve({\n        results: []\n      });\n    }\n  };\n\n  WebPlugin.prototype.load = function () {\n    this.loaded = true;\n  };\n\n  return WebPlugin;\n}();\n\nexport { WebPlugin };\n\nvar shouldMergeWebPlugin = function (plugin) {\n  return plugin.config.platforms && plugin.config.platforms.indexOf(Capacitor.platform) >= 0;\n};\n/**\n * For all our known web plugins, merge them into the global plugins\n * registry if they aren't already existing. If they don't exist, that\n * means there's no existing native implementation for it.\n * @param knownPlugins the Capacitor.Plugins global registry.\n */\n\n\nexport var mergeWebPlugins = function (knownPlugins) {\n  var plugins = WebPlugins.getPlugins();\n\n  for (var _i = 0, plugins_1 = plugins; _i < plugins_1.length; _i++) {\n    var plugin = plugins_1[_i];\n    mergeWebPlugin(knownPlugins, plugin);\n  }\n};\nexport var mergeWebPlugin = function (knownPlugins, plugin) {\n  // If we already have a plugin registered (meaning it was defined in the native layer),\n  // then we should only overwrite it if the corresponding web plugin activates on\n  // a certain platform. For example: Geolocation uses the WebPlugin on Android but not iOS\n  if (knownPlugins.hasOwnProperty(plugin.config.name) && !shouldMergeWebPlugin(plugin)) {\n    return;\n  }\n\n  knownPlugins[plugin.config.name] = plugin;\n}; //# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module"}