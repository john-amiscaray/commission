{"ast":null,"code":"var CapacitorWeb =\n/** @class */\nfunction () {\n  function CapacitorWeb() {\n    var _this = this;\n\n    this.platform = 'web';\n    this.isNative = false; // Need to assign here to avoid having to define every plugin but still\n    // get the typed benefits of the provided plugins in PluginRegistry\n\n    this.Plugins = {}; // Gracefully degrade in non-Proxy supporting engines, e.g. IE11. This\n    // effectively means that trying to access an unavailable plugin will\n    // locally throw, but this is still better than throwing a syntax error.\n\n    if (typeof Proxy !== 'undefined') {\n      // Build a proxy for the Plugins object that returns the \"Noop Plugin\"\n      // if a plugin isn't available\n      this.Plugins = new Proxy(this.Plugins, {\n        get: function (target, prop) {\n          if (typeof target[prop] === 'undefined') {\n            var thisRef_1 = _this;\n            return new Proxy({}, {\n              get: function (_target, _prop) {\n                if (typeof _target[_prop] === 'undefined') {\n                  return thisRef_1.pluginMethodNoop.bind(thisRef_1, _target, _prop, prop);\n                } else {\n                  return _target[_prop];\n                }\n              }\n            });\n          } else {\n            return target[prop];\n          }\n        }\n      });\n    }\n  }\n\n  CapacitorWeb.prototype.pluginMethodNoop = function (_target, _prop, pluginName) {\n    return Promise.reject(pluginName + \" does not have web implementation.\");\n  };\n\n  CapacitorWeb.prototype.getPlatform = function () {\n    return this.platform;\n  };\n\n  CapacitorWeb.prototype.isPluginAvailable = function (name) {\n    return this.Plugins.hasOwnProperty(name);\n  };\n\n  CapacitorWeb.prototype.convertFileSrc = function (filePath) {\n    return filePath;\n  };\n\n  CapacitorWeb.prototype.handleError = function (e) {\n    console.error(e);\n  };\n\n  return CapacitorWeb;\n}();\n\nexport { CapacitorWeb }; //# sourceMappingURL=web-runtime.js.map","map":null,"metadata":{},"sourceType":"module"}