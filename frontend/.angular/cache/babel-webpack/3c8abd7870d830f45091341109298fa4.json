{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport { WebPlugin } from './index';\n\nvar ClipboardPluginWeb =\n/** @class */\nfunction (_super) {\n  __extends(ClipboardPluginWeb, _super);\n\n  function ClipboardPluginWeb() {\n    return _super.call(this, {\n      name: 'Clipboard',\n      platforms: ['web']\n    }) || this;\n  }\n\n  ClipboardPluginWeb.prototype.write = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var blob, clipboardItemInput, err_1;\n\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!navigator.clipboard) {\n              return [2\n              /*return*/\n              , Promise.reject('Clipboard API not available in this browser')];\n            }\n\n            if (!(options.string !== undefined || options.url)) return [3\n            /*break*/\n            , 2];\n\n            if (!navigator.clipboard.writeText) {\n              return [2\n              /*return*/\n              , Promise.reject('Writting to clipboard not supported in this browser')];\n            }\n\n            return [4\n            /*yield*/\n            , navigator.clipboard.writeText(options.string !== undefined ? options.string : options.url)];\n\n          case 1:\n            _b.sent();\n\n            return [3\n            /*break*/\n            , 10];\n\n          case 2:\n            if (!options.image) return [3\n            /*break*/\n            , 9];\n\n            if (!navigator.clipboard.write) {\n              return [2\n              /*return*/\n              , Promise.reject('Setting images not supported in this browser')];\n            }\n\n            _b.label = 3;\n\n          case 3:\n            _b.trys.push([3, 7,, 8]);\n\n            return [4\n            /*yield*/\n            , fetch(options.image)];\n\n          case 4:\n            return [4\n            /*yield*/\n            , _b.sent().blob()];\n\n          case 5:\n            blob = _b.sent();\n            clipboardItemInput = new ClipboardItem((_a = {}, _a[blob.type] = blob, _a));\n            return [4\n            /*yield*/\n            , navigator.clipboard.write([clipboardItemInput])];\n\n          case 6:\n            _b.sent();\n\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            err_1 = _b.sent();\n            return [2\n            /*return*/\n            , Promise.reject('Failed to write image')];\n\n          case 8:\n            return [3\n            /*break*/\n            , 10];\n\n          case 9:\n            return [2\n            /*return*/\n            , Promise.reject('Nothing to write')];\n\n          case 10:\n            return [2\n            /*return*/\n            , Promise.resolve()];\n        }\n      });\n    });\n  };\n\n  ClipboardPluginWeb.prototype.read = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var clipboardItems, type, clipboardBlob, data, err_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!navigator.clipboard) {\n              return [2\n              /*return*/\n              , Promise.reject('Clipboard API not available in this browser')];\n            }\n\n            if (!!navigator.clipboard.read) return [3\n            /*break*/\n            , 1];\n\n            if (!navigator.clipboard.readText) {\n              return [2\n              /*return*/\n              , Promise.reject('Reading from clipboard not supported in this browser')];\n            }\n\n            return [2\n            /*return*/\n            , this.readText()];\n\n          case 1:\n            _a.trys.push([1, 5,, 6]);\n\n            return [4\n            /*yield*/\n            , navigator.clipboard.read()];\n\n          case 2:\n            clipboardItems = _a.sent();\n            type = clipboardItems[0].types[0];\n            return [4\n            /*yield*/\n            , clipboardItems[0].getType(type)];\n\n          case 3:\n            clipboardBlob = _a.sent();\n            return [4\n            /*yield*/\n            , this._getBlobData(clipboardBlob, type)];\n\n          case 4:\n            data = _a.sent();\n            return [2\n            /*return*/\n            , Promise.resolve({\n              value: data,\n              type: type\n            })];\n\n          case 5:\n            err_2 = _a.sent();\n            return [2\n            /*return*/\n            , this.readText()];\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  ClipboardPluginWeb.prototype.readText = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var text;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , navigator.clipboard.readText()];\n\n          case 1:\n            text = _a.sent();\n            return [2\n            /*return*/\n            , Promise.resolve({\n              value: text,\n              type: 'text/plain'\n            })];\n        }\n      });\n    });\n  };\n\n  ClipboardPluginWeb.prototype._getBlobData = function (clipboardBlob, type) {\n    return new Promise(function (resolve, reject) {\n      var reader = new FileReader();\n\n      if (type.includes('image')) {\n        reader.readAsDataURL(clipboardBlob);\n      } else {\n        reader.readAsText(clipboardBlob);\n      }\n\n      reader.onloadend = function () {\n        var r = reader.result;\n        resolve(r);\n      };\n\n      reader.onerror = function (e) {\n        reject(e);\n      };\n    });\n  };\n\n  return ClipboardPluginWeb;\n}(WebPlugin);\n\nexport { ClipboardPluginWeb };\nvar Clipboard = new ClipboardPluginWeb();\nexport { Clipboard }; //# sourceMappingURL=clipboard.js.map","map":null,"metadata":{},"sourceType":"module"}